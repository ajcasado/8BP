                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11528 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module ciclo
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _reverse
                             13 	.globl _DisplayChar
                             14 	.globl __8BP_umap_inv6
                             15 	.globl __8BP_moverall_inv2
                             16 	.globl __8BP_mover_inv3
                             17 	.globl __8BP_map2sp_inv2
                             18 	.globl __8BP_layout_inv3
                             19 	.globl __8BP_stars_inv5
                             20 	.globl __8BP_setupsp_inv4
                             21 	.globl __8BP_setupsp_inv3
                             22 	.globl __8BP_setlimits_inv4
                             23 	.globl __8BP_routesp_inv2
                             24 	.globl __8BP_printspall_inv4
                             25 	.globl __8BP_printsp_inv2
                             26 	.globl __8BP_printsp_inv3
                             27 	.globl __8BP_printat_inv
                             28 	.globl _getDescriptor
                             29 	.globl __8BP_music_inv4
                             30 	.globl __8BP_locatesp_inv3
                             31 	.globl __8BP_colspall_inv2
                             32 	.globl __8BP_colsp_inv2
                             33 	.globl __8BP_colsp_inv3
                             34 	.globl __8BP_colay_inv2
                             35 	.globl __8BP_colay_inv3
                             36 	.globl __8BP_3D_inv3
                             37 	.globl _comandos_8BP_V41
                             38 	.globl _strlen
                             39 	.globl _abs
                             40 	.globl __basic_rnd_x
                             41 	.globl _res
                             42 	.globl _co
                             43 	.globl _precomp
                             44 	.globl _op
                             45 	.globl _newr
                             46 	.globl _yf
                             47 	.globl _xf
                             48 	.globl _id
                             49 	.globl _dfy
                             50 	.globl _dfx
                             51 	.globl _rf
                             52 	.globl _cad
                             53 	.globl _dato
                             54 	.globl _cfps
                             55 	.globl _fps
                             56 	.globl _d
                             57 	.globl _t2
                             58 	.globl _t1
                             59 	.globl _music_dir
                             60 	.globl _music
                             61 	.globl _flaghi_dir
                             62 	.globl _flaghi
                             63 	.globl _hi_dir
                             64 	.globl _hi
                             65 	.globl _target_dir
                             66 	.globl _target
                             67 	.globl _scr_dir
                             68 	.globl _scr
                             69 	.globl _col
                             70 	.globl _cor
                             71 	.globl _cod
                             72 	.globl _dir
                             73 	.globl _y2
                             74 	.globl _y
                             75 	.globl _x
                             76 	.globl _n
                             77 	.globl _c
                             78 	.globl __8BP_rink_N_inverse_list
                             79 	.globl __8BP_rink_N_color1
                             80 	.globl __8BP_3D_3
                             81 	.globl __8BP_3D_1
                             82 	.globl __8BP_anima_1
                             83 	.globl __8BP_animall
                             84 	.globl __8BP_auto_1
                             85 	.globl __8BP_autoall_1
                             86 	.globl __8BP_autoall
                             87 	.globl __8BP_colay
                             88 	.globl __8BP_colay_2
                             89 	.globl __8BP_colay_1
                             90 	.globl __8BP_colay_3
                             91 	.globl __8BP_colsp_3
                             92 	.globl __8BP_colsp_2
                             93 	.globl __8BP_colsp_1
                             94 	.globl __8BP_colspall
                             95 	.globl __8BP_colspall_1
                             96 	.globl __8BP_colspall_2
                             97 	.globl __8BP_locatesp_3
                             98 	.globl __8BP_music_4
                             99 	.globl __8BP_music
                            100 	.globl __8BP_printat_4
                            101 	.globl __8BP_printsp_3
                            102 	.globl __8BP_printsp_2
                            103 	.globl __8BP_printsp_1
                            104 	.globl __8BP_printspall_4
                            105 	.globl __8BP_printspall_1
                            106 	.globl __8BP_printspall
                            107 	.globl __8BP_routeall
                            108 	.globl __8BP_routesp_2
                            109 	.globl __8BP_routesp_1
                            110 	.globl __8BP_setlimits_4
                            111 	.globl __8BP_setupsp_3
                            112 	.globl __8BP_setupsp_4
                            113 	.globl __8BP_stars_5
                            114 	.globl __8BP_stars
                            115 	.globl __8BP_layout_3
                            116 	.globl __8BP_map2sp_2
                            117 	.globl __8BP_map2sp_1
                            118 	.globl __8BP_mover_3
                            119 	.globl __8BP_mover_1
                            120 	.globl __8BP_moverall_2
                            121 	.globl __8BP_moverall
                            122 	.globl __8BP_peek_2
                            123 	.globl __8BP_poke_2
                            124 	.globl __8BP_rink_1
                            125 	.globl __8BP_rink_N
                            126 	.globl __8BP_umap_6
                            127 	.globl __basic_time
                            128 	.globl __basic_rnd
                            129 	.globl __basic_border
                            130 	.globl __basic_print
                            131 	.globl __basic_inkey
                            132 	.globl __basic_str
                            133 	.globl __basic_call
                            134 	.globl __basic_locate
                            135 	.globl __basic_sound
                            136 	.globl __basic_ink
                            137 	.globl __basic_peek
                            138 	.globl __basic_poke
                            139 	.globl __basic_pen_txt
                            140 	.globl __basic_pen_graph
                            141 	.globl __basic_paper
                            142 	.globl __basic_plot
                            143 	.globl __basic_move
                            144 	.globl __basic_draw
                            145 	.globl _logica_fantasma
                            146 	.globl _logica_fantasma_precomputed
                            147 ;--------------------------------------------------------
                            148 ; special function registers
                            149 ;--------------------------------------------------------
                            150 ;--------------------------------------------------------
                            151 ; ram data
                            152 ;--------------------------------------------------------
                            153 	.area _DATA
   0000                     154 __8BP_rink_N_color1::
   0000                     155 	.ds 1
   0001                     156 __8BP_rink_N_inverse_list::
   0001                     157 	.ds 34
   0023                     158 __basic_str_buffer_65536_273:
   0023                     159 	.ds 11
   002E                     160 _c::
   002E                     161 	.ds 2
   0030                     162 _n::
   0030                     163 	.ds 2
   0032                     164 _x::
   0032                     165 	.ds 2
   0034                     166 _y::
   0034                     167 	.ds 2
   0036                     168 _y2::
   0036                     169 	.ds 2
   0038                     170 _dir::
   0038                     171 	.ds 2
   003A                     172 _cod::
   003A                     173 	.ds 2
   003C                     174 _cor::
   003C                     175 	.ds 2
   003E                     176 _col::
   003E                     177 	.ds 2
   0040                     178 _scr::
   0040                     179 	.ds 2
   0042                     180 _scr_dir::
   0042                     181 	.ds 2
   0044                     182 _target::
   0044                     183 	.ds 2
   0046                     184 _target_dir::
   0046                     185 	.ds 2
   0048                     186 _hi::
   0048                     187 	.ds 2
   004A                     188 _hi_dir::
   004A                     189 	.ds 2
   004C                     190 _flaghi::
   004C                     191 	.ds 2
   004E                     192 _flaghi_dir::
   004E                     193 	.ds 2
   0050                     194 _music::
   0050                     195 	.ds 2
   0052                     196 _music_dir::
   0052                     197 	.ds 2
   0054                     198 _t1::
   0054                     199 	.ds 2
   0056                     200 _t2::
   0056                     201 	.ds 2
   0058                     202 _d::
   0058                     203 	.ds 2
   005A                     204 _fps::
   005A                     205 	.ds 2
   005C                     206 _cfps::
   005C                     207 	.ds 2
   005E                     208 _dato::
   005E                     209 	.ds 1
   005F                     210 _cad::
   005F                     211 	.ds 2
   0061                     212 _rf::
   0061                     213 	.ds 4
   0065                     214 _dfx::
   0065                     215 	.ds 8
   006D                     216 _dfy::
   006D                     217 	.ds 8
   0075                     218 _id::
   0075                     219 	.ds 2
   0077                     220 _xf::
   0077                     221 	.ds 1
   0078                     222 _yf::
   0078                     223 	.ds 1
   0079                     224 _newr::
   0079                     225 	.ds 1
   007A                     226 _op::
   007A                     227 	.ds 1
   007B                     228 _precomp::
   007B                     229 	.ds 2
   007D                     230 _co::
   007D                     231 	.ds 2
   007F                     232 _res::
   007F                     233 	.ds 2
                            234 ;--------------------------------------------------------
                            235 ; ram data
                            236 ;--------------------------------------------------------
                            237 	.area _INITIALIZED
   0000                     238 __basic_rnd_x::
   0000                     239 	.ds 2
                            240 ;--------------------------------------------------------
                            241 ; absolute external ram data
                            242 ;--------------------------------------------------------
                            243 	.area _DABS (ABS)
                            244 ;--------------------------------------------------------
                            245 ; global & static initialisations
                            246 ;--------------------------------------------------------
                            247 	.area _HOME
                            248 	.area _GSINIT
                            249 	.area _GSFINAL
                            250 	.area _GSINIT
                            251 ;mini_BASIC/minibasic.h:178: static char buffer[]="          ";
   0000 21r23r00      [10]  252 	ld	hl, #__basic_str_buffer_65536_273
   0003 36 20         [10]  253 	ld	(hl), #0x20
   0005 21r24r00      [10]  254 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0001)
   0008 36 20         [10]  255 	ld	(hl), #0x20
   000A 21r25r00      [10]  256 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0002)
   000D 36 20         [10]  257 	ld	(hl), #0x20
   000F 21r26r00      [10]  258 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0003)
   0012 36 20         [10]  259 	ld	(hl), #0x20
   0014 21r27r00      [10]  260 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0004)
   0017 36 20         [10]  261 	ld	(hl), #0x20
   0019 21r28r00      [10]  262 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0005)
   001C 36 20         [10]  263 	ld	(hl), #0x20
   001E 21r29r00      [10]  264 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0006)
   0021 36 20         [10]  265 	ld	(hl), #0x20
   0023 21r2Ar00      [10]  266 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0007)
   0026 36 20         [10]  267 	ld	(hl), #0x20
   0028 21r2Br00      [10]  268 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0008)
   002B 36 20         [10]  269 	ld	(hl), #0x20
   002D 21r2Cr00      [10]  270 	ld	hl, #(__basic_str_buffer_65536_273 + 0x0009)
   0030 36 20         [10]  271 	ld	(hl), #0x20
   0032 21r2Dr00      [10]  272 	ld	hl, #(__basic_str_buffer_65536_273 + 0x000a)
   0035 36 00         [10]  273 	ld	(hl), #0x00
                            274 ;--------------------------------------------------------
                            275 ; Home
                            276 ;--------------------------------------------------------
                            277 	.area _HOME
                            278 	.area _HOME
                            279 ;--------------------------------------------------------
                            280 ; code
                            281 ;--------------------------------------------------------
                            282 	.area _CODE
                            283 ;8BP_wrapper/8BP.h:103: void comandos_8BP_V41(){
                            284 ;	---------------------------------
                            285 ; Function comandos_8BP_V41
                            286 ; ---------------------------------
   0000                     287 _comandos_8BP_V41::
                            288 ;8BP_wrapper/8BP.h:133: __endasm;
                     6462   289 	_3D	== 0x6462;
                     6FC8   290 	ANIMA	== 0x6fc8;
                     7714   291 	ANIMALL	== 0x7714;
                     7180   292 	AUTO	== 0x7180;
                     71CE   293 	AUTOALL	== 0x71ce;
                     71FD   294 	COLAY	== 0x71fd;
                     73A8   295 	COLSP	== 0x73a8;
                     75AF   296 	COLSPALL	== 0x75af;
                     705E   297 	LAYOUT	== 0x705e;
                     6C6B   298 	LOCATESP	== 0x6C6b;
                     649E   299 	MAP2SP	== 0x649e;
                     753C   300 	MOVER	== 0x753c;
                     76EE   301 	MOVERALL	== 0x76ee;
                     6F54   302 	MUSIC	== 0x6F54;
                     692D   303 	PEEK	== 0x692d;
                     6940   304 	POKE	== 0x6940;
                     6069   305 	PRINTAT	== 0x6069;
                     6C8E   306 	PRINTSP	== 0x6C8e;
                     62A6   307 	PRINTSPALL	== 0x62a6;
                     762E   308 	RINK	== 0x762e;
                     65FC   309 	ROUTESP	== 0x65fc;
                     65DB   310 	ROUTEALL	== 0x65db;
                     6875   311 	SETLIMITS	== 0x6875;
                     70FD   312 	SETUPSP	== 0x70fd;
                     743A   313 	STARS	== 0x743a;
                     5F34   314 	UMAP	== 0x5f34;
                            315 ;8BP_wrapper/8BP.h:134: }
   0000 C9            [10]  316 	ret
                            317 ;8BP_wrapper/8BP.h:137: void _8BP_3D_inv3(int offsety,int sp_fin, int flag)
                            318 ;	---------------------------------
                            319 ; Function _8BP_3D_inv3
                            320 ; ---------------------------------
   0001                     321 __8BP_3D_inv3::
                            322 ;8BP_wrapper/8BP.h:148: __endasm;			
   0001 3E 03         [ 7]  323 	ld	a, #3
   0003 DD 21 02 00   [14]  324 	ld	ix,#2 ;posicion primer parametro 
   0007 DD 39         [15]  325 	add ix,sp;
   0009 CD 62 64      [17]  326 	call	_3D ;
                            327 ;8BP_wrapper/8BP.h:150: }
   000C C9            [10]  328 	ret
                            329 ;8BP_wrapper/8BP.h:152: void _8BP_3D_3(int flag, int sp_fin,int offsety)  
                            330 ;	---------------------------------
                            331 ; Function _8BP_3D_3
                            332 ; ---------------------------------
   000D                     333 __8BP_3D_3::
                            334 ;8BP_wrapper/8BP.h:154: _8BP_3D_inv3(offsety,sp_fin,flag);
   000D C1            [10]  335 	pop	bc
   000E E1            [10]  336 	pop	hl
   000F E5            [11]  337 	push	hl
   0010 C5            [11]  338 	push	bc
   0011 E5            [11]  339 	push	hl
   0012 FD 21 06 00   [14]  340 	ld	iy, #6
   0016 FD 39         [15]  341 	add	iy, sp
   0018 FD 6E 00      [19]  342 	ld	l, 0 (iy)
   001B FD 66 01      [19]  343 	ld	h, 1 (iy)
   001E E5            [11]  344 	push	hl
   001F FD 23         [10]  345 	inc	iy
   0021 FD 23         [10]  346 	inc	iy
   0023 FD 6E 00      [19]  347 	ld	l, 0 (iy)
   0026 FD 66 01      [19]  348 	ld	h, 1 (iy)
   0029 E5            [11]  349 	push	hl
   002A CDr01r00      [17]  350 	call	__8BP_3D_inv3
   002D F1            [10]  351 	pop	af
   002E F1            [10]  352 	pop	af
   002F F1            [10]  353 	pop	af
                            354 ;8BP_wrapper/8BP.h:155: }
   0030 C9            [10]  355 	ret
                            356 ;8BP_wrapper/8BP.h:157: void _8BP_3D_1(int flag) 
                            357 ;	---------------------------------
                            358 ; Function _8BP_3D_1
                            359 ; ---------------------------------
   0031                     360 __8BP_3D_1::
                            361 ;8BP_wrapper/8BP.h:164: __endasm;			
   0031 3E 01         [ 7]  362 	ld	a, #1
   0033 DD 21 02 00   [14]  363 	ld	ix,#2 ;posicion primer parametro 
   0037 DD 39         [15]  364 	add ix,sp;
   0039 CD 62 64      [17]  365 	call	_3D ;
                            366 ;8BP_wrapper/8BP.h:166: }
   003C C9            [10]  367 	ret
                            368 ;8BP_wrapper/8BP.h:168: void _8BP_anima_1(int sp) 
                            369 ;	---------------------------------
                            370 ; Function _8BP_anima_1
                            371 ; ---------------------------------
   003D                     372 __8BP_anima_1::
                            373 ;8BP_wrapper/8BP.h:175: __endasm;			
   003D 3E 01         [ 7]  374 	ld	a, #1
   003F DD 21 02 00   [14]  375 	ld	ix,#2 ;posicion primer parametro 
   0043 DD 39         [15]  376 	add ix,sp;
   0045 CD C8 6F      [17]  377 	call	ANIMA ;
                            378 ;8BP_wrapper/8BP.h:177: }
   0048 C9            [10]  379 	ret
                            380 ;8BP_wrapper/8BP.h:179: void _8BP_animall() 
                            381 ;	---------------------------------
                            382 ; Function _8BP_animall
                            383 ; ---------------------------------
   0049                     384 __8BP_animall::
                            385 ;8BP_wrapper/8BP.h:184: __endasm;			
   0049 3E 00         [ 7]  386 	ld	a,#0
   004B CD 14 77      [17]  387 	call	ANIMALL ;
                            388 ;8BP_wrapper/8BP.h:186: }
   004E C9            [10]  389 	ret
                            390 ;8BP_wrapper/8BP.h:188: void _8BP_auto_1(int sp) 
                            391 ;	---------------------------------
                            392 ; Function _8BP_auto_1
                            393 ; ---------------------------------
   004F                     394 __8BP_auto_1::
                            395 ;8BP_wrapper/8BP.h:195: __endasm;			
   004F 3E 01         [ 7]  396 	ld	a, #1
   0051 DD 21 02 00   [14]  397 	ld	ix,#2 ;posicion primer parametro 
   0055 DD 39         [15]  398 	add ix,sp;
   0057 CD 80 71      [17]  399 	call	AUTO ;
                            400 ;8BP_wrapper/8BP.h:197: }
   005A C9            [10]  401 	ret
                            402 ;8BP_wrapper/8BP.h:199: void _8BP_autoall_1(int flag) 
                            403 ;	---------------------------------
                            404 ; Function _8BP_autoall_1
                            405 ; ---------------------------------
   005B                     406 __8BP_autoall_1::
                            407 ;8BP_wrapper/8BP.h:206: __endasm;			
   005B 3E 01         [ 7]  408 	ld	a, #1
   005D DD 21 02 00   [14]  409 	ld	ix,#2 ;posicion primer parametro 
   0061 DD 39         [15]  410 	add ix,sp;
   0063 CD CE 71      [17]  411 	call	AUTOALL ;
                            412 ;8BP_wrapper/8BP.h:208: }
   0066 C9            [10]  413 	ret
                            414 ;8BP_wrapper/8BP.h:210: void _8BP_autoall() 
                            415 ;	---------------------------------
                            416 ; Function _8BP_autoall
                            417 ; ---------------------------------
   0067                     418 __8BP_autoall::
                            419 ;8BP_wrapper/8BP.h:215: __endasm;			
   0067 3E 00         [ 7]  420 	ld	a, #0
   0069 CD CE 71      [17]  421 	call	AUTOALL ;
                            422 ;8BP_wrapper/8BP.h:217: }
   006C C9            [10]  423 	ret
                            424 ;8BP_wrapper/8BP.h:219: void _8BP_colay_inv3( int sp,int* colision,int umbral)
                            425 ;	---------------------------------
                            426 ; Function _8BP_colay_inv3
                            427 ; ---------------------------------
   006D                     428 __8BP_colay_inv3::
                            429 ;8BP_wrapper/8BP.h:226: __endasm;		
   006D 3E 03         [ 7]  430 	ld	a, #3
   006F DD 21 02 00   [14]  431 	ld	ix,#2 ;posicion primer parametro 
   0073 DD 39         [15]  432 	add ix,sp;
   0075 CD FD 71      [17]  433 	CALL	COLAY
                            434 ;8BP_wrapper/8BP.h:228: }
   0078 C9            [10]  435 	ret
                            436 ;8BP_wrapper/8BP.h:230: void _8BP_colay()
                            437 ;	---------------------------------
                            438 ; Function _8BP_colay
                            439 ; ---------------------------------
   0079                     440 __8BP_colay::
                            441 ;8BP_wrapper/8BP.h:235: __endasm;		
   0079 3E 00         [ 7]  442 	ld	a, #0
   007B CD FD 71      [17]  443 	CALL	COLAY
                            444 ;8BP_wrapper/8BP.h:237: }
   007E C9            [10]  445 	ret
                            446 ;8BP_wrapper/8BP.h:239: void _8BP_colay_inv2(int sp, int* colision)
                            447 ;	---------------------------------
                            448 ; Function _8BP_colay_inv2
                            449 ; ---------------------------------
   007F                     450 __8BP_colay_inv2::
                            451 ;8BP_wrapper/8BP.h:246: __endasm;		
   007F 3E 02         [ 7]  452 	ld	a, #2
   0081 DD 21 02 00   [14]  453 	ld	ix,#2 ;posicion primer parametro 
   0085 DD 39         [15]  454 	add ix,sp;
   0087 CD FD 71      [17]  455 	CALL	COLAY
                            456 ;8BP_wrapper/8BP.h:248: }
   008A C9            [10]  457 	ret
                            458 ;8BP_wrapper/8BP.h:249: void _8BP_colay_2(int* colision, int sp)
                            459 ;	---------------------------------
                            460 ; Function _8BP_colay_2
                            461 ; ---------------------------------
   008B                     462 __8BP_colay_2::
                            463 ;8BP_wrapper/8BP.h:251: *colision=0;
   008B D1            [10]  464 	pop	de
   008C C1            [10]  465 	pop	bc
   008D C5            [11]  466 	push	bc
   008E D5            [11]  467 	push	de
   008F 69            [ 4]  468 	ld	l, c
   0090 60            [ 4]  469 	ld	h, b
   0091 AF            [ 4]  470 	xor	a, a
   0092 77            [ 7]  471 	ld	(hl), a
   0093 23            [ 6]  472 	inc	hl
   0094 77            [ 7]  473 	ld	(hl), a
                            474 ;8BP_wrapper/8BP.h:252: _8BP_colay_inv2(sp, colision);
   0095 C5            [11]  475 	push	bc
   0096 21 06 00      [10]  476 	ld	hl, #6
   0099 39            [11]  477 	add	hl, sp
   009A 4E            [ 7]  478 	ld	c, (hl)
   009B 23            [ 6]  479 	inc	hl
   009C 46            [ 7]  480 	ld	b, (hl)
   009D C5            [11]  481 	push	bc
   009E CDr7Fr00      [17]  482 	call	__8BP_colay_inv2
   00A1 F1            [10]  483 	pop	af
   00A2 F1            [10]  484 	pop	af
                            485 ;8BP_wrapper/8BP.h:253: }
   00A3 C9            [10]  486 	ret
                            487 ;8BP_wrapper/8BP.h:256: void _8BP_colay_1(int sp)
                            488 ;	---------------------------------
                            489 ; Function _8BP_colay_1
                            490 ; ---------------------------------
   00A4                     491 __8BP_colay_1::
                            492 ;8BP_wrapper/8BP.h:263: __endasm;		
   00A4 3E 01         [ 7]  493 	ld	a, #1
   00A6 DD 21 02 00   [14]  494 	ld	ix,#2 ;posicion primer parametro 
   00AA DD 39         [15]  495 	add ix,sp;
   00AC CD FD 71      [17]  496 	CALL	COLAY
                            497 ;8BP_wrapper/8BP.h:265: }
   00AF C9            [10]  498 	ret
                            499 ;8BP_wrapper/8BP.h:268: void _8BP_colay_3(int umbral, int* colision, int sp)
                            500 ;	---------------------------------
                            501 ; Function _8BP_colay_3
                            502 ; ---------------------------------
   00B0                     503 __8BP_colay_3::
                            504 ;8BP_wrapper/8BP.h:270: *colision=0;
   00B0 FD 21 04 00   [14]  505 	ld	iy, #4
   00B4 FD 39         [15]  506 	add	iy, sp
   00B6 FD 4E 00      [19]  507 	ld	c, 0 (iy)
   00B9 FD 46 01      [19]  508 	ld	b, 1 (iy)
   00BC 69            [ 4]  509 	ld	l, c
   00BD 60            [ 4]  510 	ld	h, b
   00BE AF            [ 4]  511 	xor	a, a
   00BF 77            [ 7]  512 	ld	(hl), a
   00C0 23            [ 6]  513 	inc	hl
   00C1 77            [ 7]  514 	ld	(hl), a
                            515 ;8BP_wrapper/8BP.h:271: _8BP_colay_inv3( sp,colision,umbral);
   00C2 D1            [10]  516 	pop	de
   00C3 E1            [10]  517 	pop	hl
   00C4 E5            [11]  518 	push	hl
   00C5 D5            [11]  519 	push	de
   00C6 E5            [11]  520 	push	hl
   00C7 C5            [11]  521 	push	bc
   00C8 FD 23         [10]  522 	inc	iy
   00CA FD 23         [10]  523 	inc	iy
   00CC FD 6E 00      [19]  524 	ld	l, 0 (iy)
   00CF FD 66 01      [19]  525 	ld	h, 1 (iy)
   00D2 E5            [11]  526 	push	hl
   00D3 CDr6Dr00      [17]  527 	call	__8BP_colay_inv3
   00D6 F1            [10]  528 	pop	af
   00D7 F1            [10]  529 	pop	af
   00D8 F1            [10]  530 	pop	af
                            531 ;8BP_wrapper/8BP.h:272: }
   00D9 C9            [10]  532 	ret
                            533 ;8BP_wrapper/8BP.h:276: void _8BP_colsp_inv3( int b, int a,int operation)
                            534 ;	---------------------------------
                            535 ; Function _8BP_colsp_inv3
                            536 ; ---------------------------------
   00DA                     537 __8BP_colsp_inv3::
                            538 ;8BP_wrapper/8BP.h:285: __endasm;		
   00DA 3E 03         [ 7]  539 	ld	a, #3
   00DC DD 21 02 00   [14]  540 	ld	ix,#2 ;posicion primer parametro 
   00E0 DD 39         [15]  541 	add ix,sp;
   00E2 CD A8 73      [17]  542 	CALL	COLSP
                            543 ;8BP_wrapper/8BP.h:287: }
   00E5 C9            [10]  544 	ret
                            545 ;8BP_wrapper/8BP.h:289: void _8BP_colsp_inv2(int* colision,int sp)
                            546 ;	---------------------------------
                            547 ; Function _8BP_colsp_inv2
                            548 ; ---------------------------------
   00E6                     549 __8BP_colsp_inv2::
                            550 ;8BP_wrapper/8BP.h:297: __endasm;		
   00E6 3E 02         [ 7]  551 	ld	a, #2
   00E8 DD 21 02 00   [14]  552 	ld	ix,#2 ;posicion primer parametro 
   00EC DD 39         [15]  553 	add ix,sp;
   00EE CD A8 73      [17]  554 	CALL	COLSP
                            555 ;8BP_wrapper/8BP.h:299: }
   00F1 C9            [10]  556 	ret
                            557 ;8BP_wrapper/8BP.h:301: void _8BP_colsp_3(int operation, int a, int b)  
                            558 ;	---------------------------------
                            559 ; Function _8BP_colsp_3
                            560 ; ---------------------------------
   00F2                     561 __8BP_colsp_3::
                            562 ;8BP_wrapper/8BP.h:303: _8BP_colsp_inv3(b,a,operation);
   00F2 C1            [10]  563 	pop	bc
   00F3 E1            [10]  564 	pop	hl
   00F4 E5            [11]  565 	push	hl
   00F5 C5            [11]  566 	push	bc
   00F6 E5            [11]  567 	push	hl
   00F7 FD 21 06 00   [14]  568 	ld	iy, #6
   00FB FD 39         [15]  569 	add	iy, sp
   00FD FD 6E 00      [19]  570 	ld	l, 0 (iy)
   0100 FD 66 01      [19]  571 	ld	h, 1 (iy)
   0103 E5            [11]  572 	push	hl
   0104 FD 23         [10]  573 	inc	iy
   0106 FD 23         [10]  574 	inc	iy
   0108 FD 6E 00      [19]  575 	ld	l, 0 (iy)
   010B FD 66 01      [19]  576 	ld	h, 1 (iy)
   010E E5            [11]  577 	push	hl
   010F CDrDAr00      [17]  578 	call	__8BP_colsp_inv3
   0112 F1            [10]  579 	pop	af
   0113 F1            [10]  580 	pop	af
   0114 F1            [10]  581 	pop	af
                            582 ;8BP_wrapper/8BP.h:304: }
   0115 C9            [10]  583 	ret
                            584 ;8BP_wrapper/8BP.h:306: void _8BP_colsp_2(int sp, int* colision)  
                            585 ;	---------------------------------
                            586 ; Function _8BP_colsp_2
                            587 ; ---------------------------------
   0116                     588 __8BP_colsp_2::
                            589 ;8BP_wrapper/8BP.h:308: *colision=32;
   0116 21 04 00      [10]  590 	ld	hl, #4
   0119 39            [11]  591 	add	hl, sp
   011A 4E            [ 7]  592 	ld	c, (hl)
   011B 23            [ 6]  593 	inc	hl
   011C 46            [ 7]  594 	ld	b, (hl)
   011D 69            [ 4]  595 	ld	l, c
   011E 60            [ 4]  596 	ld	h, b
   011F 36 20         [10]  597 	ld	(hl), #0x20
   0121 23            [ 6]  598 	inc	hl
   0122 36 00         [10]  599 	ld	(hl), #0x00
                            600 ;8BP_wrapper/8BP.h:309: _8BP_colsp_inv2(colision, sp);
   0124 D1            [10]  601 	pop	de
   0125 E1            [10]  602 	pop	hl
   0126 E5            [11]  603 	push	hl
   0127 D5            [11]  604 	push	de
   0128 E5            [11]  605 	push	hl
   0129 C5            [11]  606 	push	bc
   012A CDrE6r00      [17]  607 	call	__8BP_colsp_inv2
   012D F1            [10]  608 	pop	af
   012E F1            [10]  609 	pop	af
                            610 ;8BP_wrapper/8BP.h:310: }
   012F C9            [10]  611 	ret
                            612 ;8BP_wrapper/8BP.h:312: void _8BP_colsp_1(int sp)  
                            613 ;	---------------------------------
                            614 ; Function _8BP_colsp_1
                            615 ; ---------------------------------
   0130                     616 __8BP_colsp_1::
                            617 ;8BP_wrapper/8BP.h:321: __endasm;		
   0130 3E 01         [ 7]  618 	ld	a, #1
   0132 DD 21 02 00   [14]  619 	ld	ix,#2 ;posicion primer parametro 
   0136 DD 39         [15]  620 	add ix,sp;
   0138 CD A8 73      [17]  621 	CALL	COLSP
                            622 ;8BP_wrapper/8BP.h:322: }
   013B C9            [10]  623 	ret
                            624 ;8BP_wrapper/8BP.h:324: void _8BP_colspall_inv2(int* collided,int* collider) 
                            625 ;	---------------------------------
                            626 ; Function _8BP_colspall_inv2
                            627 ; ---------------------------------
   013C                     628 __8BP_colspall_inv2::
                            629 ;8BP_wrapper/8BP.h:332: __endasm;
   013C 3E 02         [ 7]  630 	ld	a, #2
   013E DD 21 02 00   [14]  631 	ld	ix,#2 ;posicion primer parametro 
   0142 DD 39         [15]  632 	add ix,sp;
   0144 CD AF 75      [17]  633 	CALL	COLSPALL
                            634 ;8BP_wrapper/8BP.h:333: }
   0147 C9            [10]  635 	ret
                            636 ;8BP_wrapper/8BP.h:335: void _8BP_colspall() 
                            637 ;	---------------------------------
                            638 ; Function _8BP_colspall
                            639 ; ---------------------------------
   0148                     640 __8BP_colspall::
                            641 ;8BP_wrapper/8BP.h:340: __endasm;	
   0148 3E 00         [ 7]  642 	ld	a, #0
   014A CD AF 75      [17]  643 	CALL	COLSPALL
                            644 ;8BP_wrapper/8BP.h:341: }
   014D C9            [10]  645 	ret
                            646 ;8BP_wrapper/8BP.h:343: void _8BP_colspall_1(int collider_ini) __critical
                            647 ;	---------------------------------
                            648 ; Function _8BP_colspall_1
                            649 ; ---------------------------------
   014E                     650 __8BP_colspall_1::
   014E ED 57         [ 9]  651 	ld	a,i
   0150 F3            [ 4]  652 	di
   0151 F5            [11]  653 	push	af
                            654 ;8BP_wrapper/8BP.h:351: __endasm;	
   0152 3E 01         [ 7]  655 	ld	a, #1
   0154 DD 21 02 00   [14]  656 	ld	ix,#2 ;posicion primer parametro 
   0158 DD 39         [15]  657 	add ix,sp;
   015A CD AF 75      [17]  658 	CALL	COLSPALL
                            659 ;8BP_wrapper/8BP.h:352: }
   015D F1            [10]  660 	pop	af
   015E E0            [11]  661 	ret	PO
   015F FB            [ 4]  662 	ei
   0160 C9            [10]  663 	ret
                            664 ;8BP_wrapper/8BP.h:354: void _8BP_colspall_2(int* collider, int* collided) 
                            665 ;	---------------------------------
                            666 ; Function _8BP_colspall_2
                            667 ; ---------------------------------
   0161                     668 __8BP_colspall_2::
                            669 ;8BP_wrapper/8BP.h:356: *collider=32;
   0161 D1            [10]  670 	pop	de
   0162 C1            [10]  671 	pop	bc
   0163 C5            [11]  672 	push	bc
   0164 D5            [11]  673 	push	de
   0165 69            [ 4]  674 	ld	l, c
   0166 60            [ 4]  675 	ld	h, b
   0167 36 20         [10]  676 	ld	(hl), #0x20
   0169 23            [ 6]  677 	inc	hl
   016A 36 00         [10]  678 	ld	(hl), #0x00
                            679 ;8BP_wrapper/8BP.h:357: *collided=32;
   016C 21 04 00      [10]  680 	ld	hl, #4
   016F 39            [11]  681 	add	hl, sp
   0170 7E            [ 7]  682 	ld	a, (hl)
   0171 23            [ 6]  683 	inc	hl
   0172 66            [ 7]  684 	ld	h, (hl)
   0173 6F            [ 4]  685 	ld	l, a
   0174 36 20         [10]  686 	ld	(hl), #0x20
   0176 23            [ 6]  687 	inc	hl
   0177 36 00         [10]  688 	ld	(hl), #0x00
   0179 2B            [ 6]  689 	dec	hl
                            690 ;8BP_wrapper/8BP.h:358: _8BP_colspall_inv2(collided,collider);
   017A C5            [11]  691 	push	bc
   017B E5            [11]  692 	push	hl
   017C CDr3Cr01      [17]  693 	call	__8BP_colspall_inv2
   017F F1            [10]  694 	pop	af
   0180 F1            [10]  695 	pop	af
                            696 ;8BP_wrapper/8BP.h:359: }
   0181 C9            [10]  697 	ret
                            698 ;8BP_wrapper/8BP.h:361: void _8BP_locatesp_inv3(int x, int y, char sp)
                            699 ;	---------------------------------
                            700 ; Function _8BP_locatesp_inv3
                            701 ; ---------------------------------
   0182                     702 __8BP_locatesp_inv3::
                            703 ;8BP_wrapper/8BP.h:370: __endasm;	
   0182 3E 03         [ 7]  704 	ld	a, #3
   0184 DD 21 02 00   [14]  705 	ld	ix,#2 ;posicion primer parametro 
   0188 DD 39         [15]  706 	add ix,sp;
   018A CD 6B 6C      [17]  707 	CALL	LOCATESP
                            708 ;8BP_wrapper/8BP.h:372: }
   018D C9            [10]  709 	ret
                            710 ;8BP_wrapper/8BP.h:374: void _8BP_locatesp_3(char sp, int y, int x) 
                            711 ;	---------------------------------
                            712 ; Function _8BP_locatesp_3
                            713 ; ---------------------------------
   018E                     714 __8BP_locatesp_3::
                            715 ;8BP_wrapper/8BP.h:376: _8BP_locatesp_inv3( x, y, sp);
   018E FD 21 02 00   [14]  716 	ld	iy, #2
   0192 FD 39         [15]  717 	add	iy, sp
   0194 FD 7E 00      [19]  718 	ld	a, 0 (iy)
   0197 F5            [11]  719 	push	af
   0198 33            [ 6]  720 	inc	sp
   0199 FD 23         [10]  721 	inc	iy
   019B FD 6E 00      [19]  722 	ld	l, 0 (iy)
   019E FD 66 01      [19]  723 	ld	h, 1 (iy)
   01A1 E5            [11]  724 	push	hl
   01A2 FD 23         [10]  725 	inc	iy
   01A4 FD 23         [10]  726 	inc	iy
   01A6 FD 6E 00      [19]  727 	ld	l, 0 (iy)
   01A9 FD 66 01      [19]  728 	ld	h, 1 (iy)
   01AC E5            [11]  729 	push	hl
   01AD CDr82r01      [17]  730 	call	__8BP_locatesp_inv3
   01B0 F1            [10]  731 	pop	af
   01B1 F1            [10]  732 	pop	af
   01B2 33            [ 6]  733 	inc	sp
                            734 ;8BP_wrapper/8BP.h:377: }
   01B3 C9            [10]  735 	ret
                            736 ;8BP_wrapper/8BP.h:380: void _8BP_music_inv4(int speed, int song, int flag_repetition, int flag_c) 
                            737 ;	---------------------------------
                            738 ; Function _8BP_music_inv4
                            739 ; ---------------------------------
   01B4                     740 __8BP_music_inv4::
                            741 ;8BP_wrapper/8BP.h:391: __endasm;		
   01B4 3E 04         [ 7]  742 	ld	a, #4
   01B6 DD 21 02 00   [14]  743 	ld	ix,#2 ;posicion primer parametro 
   01BA DD 39         [15]  744 	add ix,sp;
   01BC CD 54 6F      [17]  745 	CALL	MUSIC
                            746 ;8BP_wrapper/8BP.h:392: }
   01BF C9            [10]  747 	ret
                            748 ;8BP_wrapper/8BP.h:394: void _8BP_music_4(int flag_c, int flag_repetition,int song, int speed)  
                            749 ;	---------------------------------
                            750 ; Function _8BP_music_4
                            751 ; ---------------------------------
   01C0                     752 __8BP_music_4::
                            753 ;8BP_wrapper/8BP.h:396: _8BP_music_inv4(speed, song, flag_repetition, flag_c);
   01C0 C1            [10]  754 	pop	bc
   01C1 E1            [10]  755 	pop	hl
   01C2 E5            [11]  756 	push	hl
   01C3 C5            [11]  757 	push	bc
   01C4 E5            [11]  758 	push	hl
   01C5 FD 21 06 00   [14]  759 	ld	iy, #6
   01C9 FD 39         [15]  760 	add	iy, sp
   01CB FD 6E 00      [19]  761 	ld	l, 0 (iy)
   01CE FD 66 01      [19]  762 	ld	h, 1 (iy)
   01D1 E5            [11]  763 	push	hl
   01D2 FD 23         [10]  764 	inc	iy
   01D4 FD 23         [10]  765 	inc	iy
   01D6 FD 6E 00      [19]  766 	ld	l, 0 (iy)
   01D9 FD 66 01      [19]  767 	ld	h, 1 (iy)
   01DC E5            [11]  768 	push	hl
   01DD FD 23         [10]  769 	inc	iy
   01DF FD 23         [10]  770 	inc	iy
   01E1 FD 6E 00      [19]  771 	ld	l, 0 (iy)
   01E4 FD 66 01      [19]  772 	ld	h, 1 (iy)
   01E7 E5            [11]  773 	push	hl
   01E8 CDrB4r01      [17]  774 	call	__8BP_music_inv4
   01EB F1            [10]  775 	pop	af
   01EC F1            [10]  776 	pop	af
   01ED F1            [10]  777 	pop	af
   01EE F1            [10]  778 	pop	af
                            779 ;8BP_wrapper/8BP.h:398: }
   01EF C9            [10]  780 	ret
                            781 ;8BP_wrapper/8BP.h:400: void _8BP_music()
                            782 ;	---------------------------------
                            783 ; Function _8BP_music
                            784 ; ---------------------------------
   01F0                     785 __8BP_music::
                            786 ;8BP_wrapper/8BP.h:405: __endasm;		
   01F0 3E 00         [ 7]  787 	ld	a, #0
   01F2 CD 54 6F      [17]  788 	CALL	MUSIC
                            789 ;8BP_wrapper/8BP.h:406: }
   01F5 C9            [10]  790 	ret
                            791 ;8BP_wrapper/8BP.h:408: void getDescriptor(char* desc,char *cad)
                            792 ;	---------------------------------
                            793 ; Function getDescriptor
                            794 ; ---------------------------------
   01F6                     795 _getDescriptor::
                            796 ;8BP_wrapper/8BP.h:412: char len=strlen(cad);
   01F6 21 04 00      [10]  797 	ld	hl, #4
   01F9 39            [11]  798 	add	hl, sp
   01FA 4E            [ 7]  799 	ld	c, (hl)
   01FB 23            [ 6]  800 	inc	hl
   01FC 46            [ 7]  801 	ld	b, (hl)
   01FD C5            [11]  802 	push	bc
   01FE CDr00r00      [17]  803 	call	_strlen
   0201 F1            [10]  804 	pop	af
   0202 4D            [ 4]  805 	ld	c, l
                            806 ;8BP_wrapper/8BP.h:413: desc[0]=len;
   0203 D1            [10]  807 	pop	de
   0204 E1            [10]  808 	pop	hl
   0205 E5            [11]  809 	push	hl
   0206 D5            [11]  810 	push	de
   0207 71            [ 7]  811 	ld	(hl), c
                            812 ;8BP_wrapper/8BP.h:415: p=desc+1;
   0208 23            [ 6]  813 	inc	hl
                            814 ;8BP_wrapper/8BP.h:416: *p=cad;
   0209 FD 21 04 00   [14]  815 	ld	iy, #4
   020D FD 39         [15]  816 	add	iy, sp
   020F FD 4E 00      [19]  817 	ld	c, 0 (iy)
   0212 FD 7E 01      [19]  818 	ld	a, 1 (iy)
   0215 71            [ 7]  819 	ld	(hl), c
   0216 23            [ 6]  820 	inc	hl
   0217 77            [ 7]  821 	ld	(hl), a
                            822 ;8BP_wrapper/8BP.h:419: }
   0218 C9            [10]  823 	ret
                            824 ;8BP_wrapper/8BP.h:421: void _8BP_printat_inv(char *descriptor , int x, int y,int flag) 
                            825 ;	---------------------------------
                            826 ; Function _8BP_printat_inv
                            827 ; ---------------------------------
   0219                     828 __8BP_printat_inv::
                            829 ;8BP_wrapper/8BP.h:431: __endasm;			
   0219 3E 04         [ 7]  830 	ld	a, #4
   021B DD 21 02 00   [14]  831 	ld	ix,#2 ;posicion primer parametro 
   021F DD 39         [15]  832 	add ix,sp;
   0221 CD 69 60      [17]  833 	CALL	PRINTAT
                            834 ;8BP_wrapper/8BP.h:433: }
   0224 C9            [10]  835 	ret
                            836 ;8BP_wrapper/8BP.h:435: void _8BP_printat_4(int flag,int y,int x, char* cad)  
                            837 ;	---------------------------------
                            838 ; Function _8BP_printat_4
                            839 ; ---------------------------------
   0225                     840 __8BP_printat_4::
   0225 F5            [11]  841 	push	af
   0226 3B            [ 6]  842 	dec	sp
                            843 ;8BP_wrapper/8BP.h:438: char descriptor[3]={0,0,0};
   0227 21 00 00      [10]  844 	ld	hl, #0
   022A 39            [11]  845 	add	hl, sp
   022B EB            [ 4]  846 	ex	de, hl
   022C AF            [ 4]  847 	xor	a, a
   022D 12            [ 7]  848 	ld	(de), a
   022E 4B            [ 4]  849 	ld	c, e
   022F 42            [ 4]  850 	ld	b, d
   0230 03            [ 6]  851 	inc	bc
   0231 AF            [ 4]  852 	xor	a, a
   0232 02            [ 7]  853 	ld	(bc), a
   0233 6B            [ 4]  854 	ld	l, e
   0234 62            [ 4]  855 	ld	h, d
   0235 23            [ 6]  856 	inc	hl
   0236 23            [ 6]  857 	inc	hl
   0237 36 00         [10]  858 	ld	(hl), #0x00
                            859 ;8BP_wrapper/8BP.h:439: char len=strlen(cad);
   0239 C5            [11]  860 	push	bc
   023A 21 0D 00      [10]  861 	ld	hl, #13
   023D 39            [11]  862 	add	hl, sp
   023E 4E            [ 7]  863 	ld	c, (hl)
   023F 23            [ 6]  864 	inc	hl
   0240 46            [ 7]  865 	ld	b, (hl)
   0241 C5            [11]  866 	push	bc
   0242 CDr00r00      [17]  867 	call	_strlen
   0245 F1            [10]  868 	pop	af
   0246 C1            [10]  869 	pop	bc
   0247 7D            [ 4]  870 	ld	a, l
                            871 ;8BP_wrapper/8BP.h:440: descriptor[0]=len;
   0248 12            [ 7]  872 	ld	(de), a
                            873 ;8BP_wrapper/8BP.h:442: p=descriptor+1;
   0249 69            [ 4]  874 	ld	l, c
   024A 60            [ 4]  875 	ld	h, b
                            876 ;8BP_wrapper/8BP.h:443: *p=cad;  
   024B FD 21 0B 00   [14]  877 	ld	iy, #11
   024F FD 39         [15]  878 	add	iy, sp
   0251 FD 4E 00      [19]  879 	ld	c, 0 (iy)
   0254 FD 7E 01      [19]  880 	ld	a, 1 (iy)
   0257 71            [ 7]  881 	ld	(hl), c
   0258 23            [ 6]  882 	inc	hl
   0259 77            [ 7]  883 	ld	(hl), a
                            884 ;8BP_wrapper/8BP.h:446: _8BP_printat_inv(descriptor, x, y, flag);   
   025A FD 21 05 00   [14]  885 	ld	iy, #5
   025E FD 39         [15]  886 	add	iy, sp
   0260 FD 6E 00      [19]  887 	ld	l, 0 (iy)
   0263 FD 66 01      [19]  888 	ld	h, 1 (iy)
   0266 E5            [11]  889 	push	hl
   0267 FD 23         [10]  890 	inc	iy
   0269 FD 23         [10]  891 	inc	iy
   026B FD 6E 00      [19]  892 	ld	l, 0 (iy)
   026E FD 66 01      [19]  893 	ld	h, 1 (iy)
   0271 E5            [11]  894 	push	hl
   0272 FD 23         [10]  895 	inc	iy
   0274 FD 23         [10]  896 	inc	iy
   0276 FD 6E 00      [19]  897 	ld	l, 0 (iy)
   0279 FD 66 01      [19]  898 	ld	h, 1 (iy)
   027C E5            [11]  899 	push	hl
   027D D5            [11]  900 	push	de
   027E CDr19r02      [17]  901 	call	__8BP_printat_inv
   0281 F1            [10]  902 	pop	af
   0282 F1            [10]  903 	pop	af
   0283 F1            [10]  904 	pop	af
   0284 F1            [10]  905 	pop	af
                            906 ;8BP_wrapper/8BP.h:448: } 
   0285 F1            [10]  907 	pop	af
   0286 33            [ 6]  908 	inc	sp
   0287 C9            [10]  909 	ret
                            910 ;8BP_wrapper/8BP.h:450: void _8BP_printsp_inv3(int x,int y, int sp)  
                            911 ;	---------------------------------
                            912 ; Function _8BP_printsp_inv3
                            913 ; ---------------------------------
   0288                     914 __8BP_printsp_inv3::
                            915 ;8BP_wrapper/8BP.h:460: __endasm;	
   0288 3E 03         [ 7]  916 	ld	a, #3 ; se envian 3 parametros
   028A DD 21 02 00   [14]  917 	ld	ix,#2 ;posicion primer parametro 
   028E DD 39         [15]  918 	add ix,sp;
   0290 CD 8E 6C      [17]  919 	CALL	PRINTSP
                            920 ;8BP_wrapper/8BP.h:461: }
   0293 C9            [10]  921 	ret
                            922 ;8BP_wrapper/8BP.h:463: void _8BP_printsp_inv2(int bits, int sp) 
                            923 ;	---------------------------------
                            924 ; Function _8BP_printsp_inv2
                            925 ; ---------------------------------
   0294                     926 __8BP_printsp_inv2::
                            927 ;8BP_wrapper/8BP.h:472: __endasm;	
   0294 3E 02         [ 7]  928 	ld	a, #2
   0296 DD 21 02 00   [14]  929 	ld	ix,#2 ;posicion primer parametro 
   029A DD 39         [15]  930 	add ix,sp;
   029C CD 8E 6C      [17]  931 	call	PRINTSP ;
                            932 ;8BP_wrapper/8BP.h:474: }
   029F C9            [10]  933 	ret
                            934 ;8BP_wrapper/8BP.h:476: void _8BP_printsp_3(int sp, int y, int x)  
                            935 ;	---------------------------------
                            936 ; Function _8BP_printsp_3
                            937 ; ---------------------------------
   02A0                     938 __8BP_printsp_3::
                            939 ;8BP_wrapper/8BP.h:478: _8BP_printsp_inv3( x, y,  sp);
   02A0 C1            [10]  940 	pop	bc
   02A1 E1            [10]  941 	pop	hl
   02A2 E5            [11]  942 	push	hl
   02A3 C5            [11]  943 	push	bc
   02A4 E5            [11]  944 	push	hl
   02A5 FD 21 06 00   [14]  945 	ld	iy, #6
   02A9 FD 39         [15]  946 	add	iy, sp
   02AB FD 6E 00      [19]  947 	ld	l, 0 (iy)
   02AE FD 66 01      [19]  948 	ld	h, 1 (iy)
   02B1 E5            [11]  949 	push	hl
   02B2 FD 23         [10]  950 	inc	iy
   02B4 FD 23         [10]  951 	inc	iy
   02B6 FD 6E 00      [19]  952 	ld	l, 0 (iy)
   02B9 FD 66 01      [19]  953 	ld	h, 1 (iy)
   02BC E5            [11]  954 	push	hl
   02BD CDr88r02      [17]  955 	call	__8BP_printsp_inv3
   02C0 F1            [10]  956 	pop	af
   02C1 F1            [10]  957 	pop	af
   02C2 F1            [10]  958 	pop	af
                            959 ;8BP_wrapper/8BP.h:479: }
   02C3 C9            [10]  960 	ret
                            961 ;8BP_wrapper/8BP.h:481: void _8BP_printsp_2(int sp,int bits_background)  
                            962 ;	---------------------------------
                            963 ; Function _8BP_printsp_2
                            964 ; ---------------------------------
   02C4                     965 __8BP_printsp_2::
                            966 ;8BP_wrapper/8BP.h:483: _8BP_printsp_inv2( bits_background,  sp);
   02C4 C1            [10]  967 	pop	bc
   02C5 E1            [10]  968 	pop	hl
   02C6 E5            [11]  969 	push	hl
   02C7 C5            [11]  970 	push	bc
   02C8 E5            [11]  971 	push	hl
   02C9 21 06 00      [10]  972 	ld	hl, #6
   02CC 39            [11]  973 	add	hl, sp
   02CD 4E            [ 7]  974 	ld	c, (hl)
   02CE 23            [ 6]  975 	inc	hl
   02CF 46            [ 7]  976 	ld	b, (hl)
   02D0 C5            [11]  977 	push	bc
   02D1 CDr94r02      [17]  978 	call	__8BP_printsp_inv2
   02D4 F1            [10]  979 	pop	af
   02D5 F1            [10]  980 	pop	af
                            981 ;8BP_wrapper/8BP.h:484: }
   02D6 C9            [10]  982 	ret
                            983 ;8BP_wrapper/8BP.h:486: void _8BP_printsp_1(int sp)  
                            984 ;	---------------------------------
                            985 ; Function _8BP_printsp_1
                            986 ; ---------------------------------
   02D7                     987 __8BP_printsp_1::
                            988 ;8BP_wrapper/8BP.h:494: __endasm;	
   02D7 3E 01         [ 7]  989 	ld	a, #1
   02D9 DD 21 02 00   [14]  990 	ld	ix,#2 ;posicion primer parametro 
   02DD DD 39         [15]  991 	add ix,sp;
   02DF CD 8E 6C      [17]  992 	CALL	PRINTSP
                            993 ;8BP_wrapper/8BP.h:497: }
   02E2 C9            [10]  994 	ret
                            995 ;8BP_wrapper/8BP.h:499: void _8BP_printspall_inv4(int flag_sync,int flag_anima, int fin, int ini)
                            996 ;	---------------------------------
                            997 ; Function _8BP_printspall_inv4
                            998 ; ---------------------------------
   02E3                     999 __8BP_printspall_inv4::
                           1000 ;8BP_wrapper/8BP.h:509: __endasm;	
   02E3 3E 04         [ 7] 1001 	ld	a, #4
   02E5 DD 21 02 00   [14] 1002 	ld	ix,#2 ;posicion primer parametro 
   02E9 DD 39         [15] 1003 	add ix,sp;
   02EB CD A6 62      [17] 1004 	CALL	PRINTSPALL
                           1005 ;8BP_wrapper/8BP.h:510: }
   02EE C9            [10] 1006 	ret
                           1007 ;8BP_wrapper/8BP.h:512: void _8BP_printspall_4(int ini, int fin, int flag_anima, int flag_sync)  
                           1008 ;	---------------------------------
                           1009 ; Function _8BP_printspall_4
                           1010 ; ---------------------------------
   02EF                    1011 __8BP_printspall_4::
                           1012 ;8BP_wrapper/8BP.h:514: _8BP_printspall_inv4(flag_sync, flag_anima, fin, ini);
   02EF C1            [10] 1013 	pop	bc
   02F0 E1            [10] 1014 	pop	hl
   02F1 E5            [11] 1015 	push	hl
   02F2 C5            [11] 1016 	push	bc
   02F3 E5            [11] 1017 	push	hl
   02F4 FD 21 06 00   [14] 1018 	ld	iy, #6
   02F8 FD 39         [15] 1019 	add	iy, sp
   02FA FD 6E 00      [19] 1020 	ld	l, 0 (iy)
   02FD FD 66 01      [19] 1021 	ld	h, 1 (iy)
   0300 E5            [11] 1022 	push	hl
   0301 FD 23         [10] 1023 	inc	iy
   0303 FD 23         [10] 1024 	inc	iy
   0305 FD 6E 00      [19] 1025 	ld	l, 0 (iy)
   0308 FD 66 01      [19] 1026 	ld	h, 1 (iy)
   030B E5            [11] 1027 	push	hl
   030C FD 23         [10] 1028 	inc	iy
   030E FD 23         [10] 1029 	inc	iy
   0310 FD 6E 00      [19] 1030 	ld	l, 0 (iy)
   0313 FD 66 01      [19] 1031 	ld	h, 1 (iy)
   0316 E5            [11] 1032 	push	hl
   0317 CDrE3r02      [17] 1033 	call	__8BP_printspall_inv4
   031A F1            [10] 1034 	pop	af
   031B F1            [10] 1035 	pop	af
   031C F1            [10] 1036 	pop	af
   031D F1            [10] 1037 	pop	af
                           1038 ;8BP_wrapper/8BP.h:515: }
   031E C9            [10] 1039 	ret
                           1040 ;8BP_wrapper/8BP.h:517: void _8BP_printspall_1(int order_type)  
                           1041 ;	---------------------------------
                           1042 ; Function _8BP_printspall_1
                           1043 ; ---------------------------------
   031F                    1044 __8BP_printspall_1::
                           1045 ;8BP_wrapper/8BP.h:524: __endasm;	
   031F 3E 01         [ 7] 1046 	ld	a, #1
   0321 DD 21 02 00   [14] 1047 	ld	ix,#2 ;posicion primer parametro 
   0325 DD 39         [15] 1048 	add ix,sp;
   0327 CD A6 62      [17] 1049 	CALL	PRINTSPALL
                           1050 ;8BP_wrapper/8BP.h:525: }
   032A C9            [10] 1051 	ret
                           1052 ;8BP_wrapper/8BP.h:527: void _8BP_printspall() 
                           1053 ;	---------------------------------
                           1054 ; Function _8BP_printspall
                           1055 ; ---------------------------------
   032B                    1056 __8BP_printspall::
                           1057 ;8BP_wrapper/8BP.h:532: __endasm;	
   032B 3E 00         [ 7] 1058 	ld	a, #0
   032D CD A6 62      [17] 1059 	CALL	PRINTSPALL
                           1060 ;8BP_wrapper/8BP.h:533: }
   0330 C9            [10] 1061 	ret
                           1062 ;8BP_wrapper/8BP.h:535: void _8BP_routeall()
                           1063 ;	---------------------------------
                           1064 ; Function _8BP_routeall
                           1065 ; ---------------------------------
   0331                    1066 __8BP_routeall::
                           1067 ;8BP_wrapper/8BP.h:540: __endasm;	
   0331 3E 00         [ 7] 1068 	ld	a, #0;
   0333 CD DB 65      [17] 1069 	CALL	ROUTEALL
                           1070 ;8BP_wrapper/8BP.h:542: }
   0336 C9            [10] 1071 	ret
                           1072 ;8BP_wrapper/8BP.h:545: void _8BP_routesp_inv2(int pasos, int sp) 
                           1073 ;	---------------------------------
                           1074 ; Function _8BP_routesp_inv2
                           1075 ; ---------------------------------
   0337                    1076 __8BP_routesp_inv2::
                           1077 ;8BP_wrapper/8BP.h:553: __endasm;	
   0337 3E 02         [ 7] 1078 	ld	a, #2 ;
   0339 DD 21 02 00   [14] 1079 	ld	ix,#2 ;posicion primer parametro 
   033D DD 39         [15] 1080 	add ix,sp;
   033F CD FC 65      [17] 1081 	CALL	ROUTESP
                           1082 ;8BP_wrapper/8BP.h:554: }
   0342 C9            [10] 1083 	ret
                           1084 ;8BP_wrapper/8BP.h:556: void _8BP_routesp_2(int sp, int pasos)  
                           1085 ;	---------------------------------
                           1086 ; Function _8BP_routesp_2
                           1087 ; ---------------------------------
   0343                    1088 __8BP_routesp_2::
                           1089 ;8BP_wrapper/8BP.h:558: _8BP_routesp_inv2(pasos,sp) ;
   0343 C1            [10] 1090 	pop	bc
   0344 E1            [10] 1091 	pop	hl
   0345 E5            [11] 1092 	push	hl
   0346 C5            [11] 1093 	push	bc
   0347 E5            [11] 1094 	push	hl
   0348 21 06 00      [10] 1095 	ld	hl, #6
   034B 39            [11] 1096 	add	hl, sp
   034C 4E            [ 7] 1097 	ld	c, (hl)
   034D 23            [ 6] 1098 	inc	hl
   034E 46            [ 7] 1099 	ld	b, (hl)
   034F C5            [11] 1100 	push	bc
   0350 CDr37r03      [17] 1101 	call	__8BP_routesp_inv2
   0353 F1            [10] 1102 	pop	af
   0354 F1            [10] 1103 	pop	af
                           1104 ;8BP_wrapper/8BP.h:559: }
   0355 C9            [10] 1105 	ret
                           1106 ;8BP_wrapper/8BP.h:561: void _8BP_routesp_1(int sp)  
                           1107 ;	---------------------------------
                           1108 ; Function _8BP_routesp_1
                           1109 ; ---------------------------------
   0356                    1110 __8BP_routesp_1::
                           1111 ;8BP_wrapper/8BP.h:568: __endasm;	
   0356 3E 01         [ 7] 1112 	ld	a, #1 ;
   0358 DD 21 02 00   [14] 1113 	ld	ix,#2 ;posicion primer parametro 
   035C DD 39         [15] 1114 	add ix,sp;
   035E CD FC 65      [17] 1115 	CALL	ROUTESP
                           1116 ;8BP_wrapper/8BP.h:570: }
   0361 C9            [10] 1117 	ret
                           1118 ;8BP_wrapper/8BP.h:572: void _8BP_setlimits_inv4(int ymax, int ymin, int xmax,int xmin)
                           1119 ;	---------------------------------
                           1120 ; Function _8BP_setlimits_inv4
                           1121 ; ---------------------------------
   0362                    1122 __8BP_setlimits_inv4::
                           1123 ;8BP_wrapper/8BP.h:579: __endasm;	
   0362 3E 04         [ 7] 1124 	ld	a, #4 ;
   0364 DD 21 02 00   [14] 1125 	ld	ix,#2 ;posicion primer parametro 
   0368 DD 39         [15] 1126 	add ix,sp;
   036A CD 75 68      [17] 1127 	CALL	SETLIMITS
                           1128 ;8BP_wrapper/8BP.h:582: }
   036D C9            [10] 1129 	ret
                           1130 ;8BP_wrapper/8BP.h:584: void _8BP_setlimits_4(int xmin,int xmax, int ymin, int ymax)
                           1131 ;	---------------------------------
                           1132 ; Function _8BP_setlimits_4
                           1133 ; ---------------------------------
   036E                    1134 __8BP_setlimits_4::
                           1135 ;8BP_wrapper/8BP.h:586: _8BP_setlimits_inv4( ymax,  ymin,  xmax, xmin);
   036E C1            [10] 1136 	pop	bc
   036F E1            [10] 1137 	pop	hl
   0370 E5            [11] 1138 	push	hl
   0371 C5            [11] 1139 	push	bc
   0372 E5            [11] 1140 	push	hl
   0373 FD 21 06 00   [14] 1141 	ld	iy, #6
   0377 FD 39         [15] 1142 	add	iy, sp
   0379 FD 6E 00      [19] 1143 	ld	l, 0 (iy)
   037C FD 66 01      [19] 1144 	ld	h, 1 (iy)
   037F E5            [11] 1145 	push	hl
   0380 FD 23         [10] 1146 	inc	iy
   0382 FD 23         [10] 1147 	inc	iy
   0384 FD 6E 00      [19] 1148 	ld	l, 0 (iy)
   0387 FD 66 01      [19] 1149 	ld	h, 1 (iy)
   038A E5            [11] 1150 	push	hl
   038B FD 23         [10] 1151 	inc	iy
   038D FD 23         [10] 1152 	inc	iy
   038F FD 6E 00      [19] 1153 	ld	l, 0 (iy)
   0392 FD 66 01      [19] 1154 	ld	h, 1 (iy)
   0395 E5            [11] 1155 	push	hl
   0396 CDr62r03      [17] 1156 	call	__8BP_setlimits_inv4
   0399 F1            [10] 1157 	pop	af
   039A F1            [10] 1158 	pop	af
   039B F1            [10] 1159 	pop	af
   039C F1            [10] 1160 	pop	af
                           1161 ;8BP_wrapper/8BP.h:587: }
   039D C9            [10] 1162 	ret
                           1163 ;8BP_wrapper/8BP.h:589: void _8BP_setupsp_inv3(int value,int param, int sp) 
                           1164 ;	---------------------------------
                           1165 ; Function _8BP_setupsp_inv3
                           1166 ; ---------------------------------
   039E                    1167 __8BP_setupsp_inv3::
                           1168 ;8BP_wrapper/8BP.h:598: __endasm;	
   039E 3E 03         [ 7] 1169 	ld	a, #3 ; se envian 3 parametros
   03A0 DD 21 02 00   [14] 1170 	ld	ix,#2 ;posicion primer parametro 
   03A4 DD 39         [15] 1171 	add ix,sp;
   03A6 CD FD 70      [17] 1172 	CALL	SETUPSP
                           1173 ;8BP_wrapper/8BP.h:599: }
   03A9 C9            [10] 1174 	ret
                           1175 ;8BP_wrapper/8BP.h:601: void _8BP_setupsp_inv4(int value2,int value1,int param, int sp) 
                           1176 ;	---------------------------------
                           1177 ; Function _8BP_setupsp_inv4
                           1178 ; ---------------------------------
   03AA                    1179 __8BP_setupsp_inv4::
                           1180 ;8BP_wrapper/8BP.h:611: __endasm;	
   03AA 3E 04         [ 7] 1181 	ld	a, #4 ;
   03AC DD 21 02 00   [14] 1182 	ld	ix,#2 ;posicion primer parametro 
   03B0 DD 39         [15] 1183 	add ix,sp;
   03B2 CD FD 70      [17] 1184 	CALL	SETUPSP
                           1185 ;8BP_wrapper/8BP.h:612: }
   03B5 C9            [10] 1186 	ret
                           1187 ;8BP_wrapper/8BP.h:614: void _8BP_setupsp_3(int sp,int param, int value)  
                           1188 ;	---------------------------------
                           1189 ; Function _8BP_setupsp_3
                           1190 ; ---------------------------------
   03B6                    1191 __8BP_setupsp_3::
                           1192 ;8BP_wrapper/8BP.h:616: _8BP_setupsp_inv3(value,param, sp);
   03B6 C1            [10] 1193 	pop	bc
   03B7 E1            [10] 1194 	pop	hl
   03B8 E5            [11] 1195 	push	hl
   03B9 C5            [11] 1196 	push	bc
   03BA E5            [11] 1197 	push	hl
   03BB FD 21 06 00   [14] 1198 	ld	iy, #6
   03BF FD 39         [15] 1199 	add	iy, sp
   03C1 FD 6E 00      [19] 1200 	ld	l, 0 (iy)
   03C4 FD 66 01      [19] 1201 	ld	h, 1 (iy)
   03C7 E5            [11] 1202 	push	hl
   03C8 FD 23         [10] 1203 	inc	iy
   03CA FD 23         [10] 1204 	inc	iy
   03CC FD 6E 00      [19] 1205 	ld	l, 0 (iy)
   03CF FD 66 01      [19] 1206 	ld	h, 1 (iy)
   03D2 E5            [11] 1207 	push	hl
   03D3 CDr9Er03      [17] 1208 	call	__8BP_setupsp_inv3
   03D6 F1            [10] 1209 	pop	af
   03D7 F1            [10] 1210 	pop	af
   03D8 F1            [10] 1211 	pop	af
                           1212 ;8BP_wrapper/8BP.h:617: }
   03D9 C9            [10] 1213 	ret
                           1214 ;8BP_wrapper/8BP.h:619: void _8BP_setupsp_4(int sp,int param, int value1,int value2) 
                           1215 ;	---------------------------------
                           1216 ; Function _8BP_setupsp_4
                           1217 ; ---------------------------------
   03DA                    1218 __8BP_setupsp_4::
                           1219 ;8BP_wrapper/8BP.h:621: _8BP_setupsp_inv4(value2,value1,param, sp);
   03DA C1            [10] 1220 	pop	bc
   03DB E1            [10] 1221 	pop	hl
   03DC E5            [11] 1222 	push	hl
   03DD C5            [11] 1223 	push	bc
   03DE E5            [11] 1224 	push	hl
   03DF FD 21 06 00   [14] 1225 	ld	iy, #6
   03E3 FD 39         [15] 1226 	add	iy, sp
   03E5 FD 6E 00      [19] 1227 	ld	l, 0 (iy)
   03E8 FD 66 01      [19] 1228 	ld	h, 1 (iy)
   03EB E5            [11] 1229 	push	hl
   03EC FD 23         [10] 1230 	inc	iy
   03EE FD 23         [10] 1231 	inc	iy
   03F0 FD 6E 00      [19] 1232 	ld	l, 0 (iy)
   03F3 FD 66 01      [19] 1233 	ld	h, 1 (iy)
   03F6 E5            [11] 1234 	push	hl
   03F7 FD 23         [10] 1235 	inc	iy
   03F9 FD 23         [10] 1236 	inc	iy
   03FB FD 6E 00      [19] 1237 	ld	l, 0 (iy)
   03FE FD 66 01      [19] 1238 	ld	h, 1 (iy)
   0401 E5            [11] 1239 	push	hl
   0402 CDrAAr03      [17] 1240 	call	__8BP_setupsp_inv4
   0405 F1            [10] 1241 	pop	af
   0406 F1            [10] 1242 	pop	af
   0407 F1            [10] 1243 	pop	af
   0408 F1            [10] 1244 	pop	af
                           1245 ;8BP_wrapper/8BP.h:622: }
   0409 C9            [10] 1246 	ret
                           1247 ;8BP_wrapper/8BP.h:625: void _8BP_stars_inv5(int dx, int dy, int color, int num_stars,int star_ini)
                           1248 ;	---------------------------------
                           1249 ; Function _8BP_stars_inv5
                           1250 ; ---------------------------------
   040A                    1251 __8BP_stars_inv5::
                           1252 ;8BP_wrapper/8BP.h:636: __endasm;	
   040A 3E 05         [ 7] 1253 	ld	a, #5
   040C DD 21 02 00   [14] 1254 	ld	ix,#2 ;posicion primer parametro 
   0410 DD 39         [15] 1255 	add ix,sp;
   0412 CD 3A 74      [17] 1256 	CALL	STARS
                           1257 ;8BP_wrapper/8BP.h:637: }
   0415 C9            [10] 1258 	ret
                           1259 ;8BP_wrapper/8BP.h:639: void _8BP_stars_5(int star_ini, int num_stars,int color, int dy, int dx)  
                           1260 ;	---------------------------------
                           1261 ; Function _8BP_stars_5
                           1262 ; ---------------------------------
   0416                    1263 __8BP_stars_5::
                           1264 ;8BP_wrapper/8BP.h:641: _8BP_stars_inv5(dx, dy, color, num_stars,star_ini);
   0416 C1            [10] 1265 	pop	bc
   0417 E1            [10] 1266 	pop	hl
   0418 E5            [11] 1267 	push	hl
   0419 C5            [11] 1268 	push	bc
   041A E5            [11] 1269 	push	hl
   041B FD 21 06 00   [14] 1270 	ld	iy, #6
   041F FD 39         [15] 1271 	add	iy, sp
   0421 FD 6E 00      [19] 1272 	ld	l, 0 (iy)
   0424 FD 66 01      [19] 1273 	ld	h, 1 (iy)
   0427 E5            [11] 1274 	push	hl
   0428 FD 23         [10] 1275 	inc	iy
   042A FD 23         [10] 1276 	inc	iy
   042C FD 6E 00      [19] 1277 	ld	l, 0 (iy)
   042F FD 66 01      [19] 1278 	ld	h, 1 (iy)
   0432 E5            [11] 1279 	push	hl
   0433 FD 23         [10] 1280 	inc	iy
   0435 FD 23         [10] 1281 	inc	iy
   0437 FD 6E 00      [19] 1282 	ld	l, 0 (iy)
   043A FD 66 01      [19] 1283 	ld	h, 1 (iy)
   043D E5            [11] 1284 	push	hl
   043E FD 23         [10] 1285 	inc	iy
   0440 FD 23         [10] 1286 	inc	iy
   0442 FD 6E 00      [19] 1287 	ld	l, 0 (iy)
   0445 FD 66 01      [19] 1288 	ld	h, 1 (iy)
   0448 E5            [11] 1289 	push	hl
   0449 CDr0Ar04      [17] 1290 	call	__8BP_stars_inv5
   044C 21 0A 00      [10] 1291 	ld	hl, #10
   044F 39            [11] 1292 	add	hl, sp
   0450 F9            [ 6] 1293 	ld	sp, hl
                           1294 ;8BP_wrapper/8BP.h:642: }	
   0451 C9            [10] 1295 	ret
                           1296 ;8BP_wrapper/8BP.h:644: void _8BP_stars() 
                           1297 ;	---------------------------------
                           1298 ; Function _8BP_stars
                           1299 ; ---------------------------------
   0452                    1300 __8BP_stars::
                           1301 ;8BP_wrapper/8BP.h:649: __endasm;	
   0452 3E 00         [ 7] 1302 	ld	a, #0
   0454 CD 3A 74      [17] 1303 	CALL	STARS
                           1304 ;8BP_wrapper/8BP.h:651: }
   0457 C9            [10] 1305 	ret
                           1306 ;8BP_wrapper/8BP.h:653: void _8BP_layout_inv3(char* descriptor, int x,int y)
                           1307 ;	---------------------------------
                           1308 ; Function _8BP_layout_inv3
                           1309 ; ---------------------------------
   0458                    1310 __8BP_layout_inv3::
                           1311 ;8BP_wrapper/8BP.h:660: __endasm;
   0458 3E 03         [ 7] 1312 	ld	a,#3
   045A DD 21 02 00   [14] 1313 	ld	ix,#2 ;posicion primer parametro 
   045E DD 39         [15] 1314 	add ix,sp;
   0460 CD 5E 70      [17] 1315 	CALL	LAYOUT
                           1316 ;8BP_wrapper/8BP.h:662: }
   0463 C9            [10] 1317 	ret
                           1318 ;8BP_wrapper/8BP.h:664: void _8BP_layout_3(int y, int x, char* cad)
                           1319 ;	---------------------------------
                           1320 ; Function _8BP_layout_3
                           1321 ; ---------------------------------
   0464                    1322 __8BP_layout_3::
   0464 F5            [11] 1323 	push	af
   0465 3B            [ 6] 1324 	dec	sp
                           1325 ;8BP_wrapper/8BP.h:667: char descriptor[3]={0,0,0};
   0466 21 00 00      [10] 1326 	ld	hl, #0
   0469 39            [11] 1327 	add	hl, sp
   046A EB            [ 4] 1328 	ex	de, hl
   046B AF            [ 4] 1329 	xor	a, a
   046C 12            [ 7] 1330 	ld	(de), a
   046D 4B            [ 4] 1331 	ld	c, e
   046E 42            [ 4] 1332 	ld	b, d
   046F 03            [ 6] 1333 	inc	bc
   0470 AF            [ 4] 1334 	xor	a, a
   0471 02            [ 7] 1335 	ld	(bc), a
   0472 6B            [ 4] 1336 	ld	l, e
   0473 62            [ 4] 1337 	ld	h, d
   0474 23            [ 6] 1338 	inc	hl
   0475 23            [ 6] 1339 	inc	hl
   0476 36 00         [10] 1340 	ld	(hl), #0x00
                           1341 ;8BP_wrapper/8BP.h:668: char len=strlen(cad);
   0478 C5            [11] 1342 	push	bc
   0479 21 0B 00      [10] 1343 	ld	hl, #11
   047C 39            [11] 1344 	add	hl, sp
   047D 4E            [ 7] 1345 	ld	c, (hl)
   047E 23            [ 6] 1346 	inc	hl
   047F 46            [ 7] 1347 	ld	b, (hl)
   0480 C5            [11] 1348 	push	bc
   0481 CDr00r00      [17] 1349 	call	_strlen
   0484 F1            [10] 1350 	pop	af
   0485 C1            [10] 1351 	pop	bc
   0486 7D            [ 4] 1352 	ld	a, l
                           1353 ;8BP_wrapper/8BP.h:669: descriptor[0]=len;
   0487 12            [ 7] 1354 	ld	(de), a
                           1355 ;8BP_wrapper/8BP.h:671: p=descriptor+1;
   0488 69            [ 4] 1356 	ld	l, c
   0489 60            [ 4] 1357 	ld	h, b
                           1358 ;8BP_wrapper/8BP.h:672: *p=cad;  
   048A FD 21 09 00   [14] 1359 	ld	iy, #9
   048E FD 39         [15] 1360 	add	iy, sp
   0490 FD 4E 00      [19] 1361 	ld	c, 0 (iy)
   0493 FD 7E 01      [19] 1362 	ld	a, 1 (iy)
   0496 71            [ 7] 1363 	ld	(hl), c
   0497 23            [ 6] 1364 	inc	hl
   0498 77            [ 7] 1365 	ld	(hl), a
                           1366 ;8BP_wrapper/8BP.h:674: _8BP_layout_inv3(descriptor, x,  y );
   0499 FD 21 05 00   [14] 1367 	ld	iy, #5
   049D FD 39         [15] 1368 	add	iy, sp
   049F FD 6E 00      [19] 1369 	ld	l, 0 (iy)
   04A2 FD 66 01      [19] 1370 	ld	h, 1 (iy)
   04A5 E5            [11] 1371 	push	hl
   04A6 FD 23         [10] 1372 	inc	iy
   04A8 FD 23         [10] 1373 	inc	iy
   04AA FD 6E 00      [19] 1374 	ld	l, 0 (iy)
   04AD FD 66 01      [19] 1375 	ld	h, 1 (iy)
   04B0 E5            [11] 1376 	push	hl
   04B1 D5            [11] 1377 	push	de
   04B2 CDr58r04      [17] 1378 	call	__8BP_layout_inv3
   04B5 F1            [10] 1379 	pop	af
   04B6 F1            [10] 1380 	pop	af
   04B7 F1            [10] 1381 	pop	af
                           1382 ;8BP_wrapper/8BP.h:676: }
   04B8 F1            [10] 1383 	pop	af
   04B9 33            [ 6] 1384 	inc	sp
   04BA C9            [10] 1385 	ret
                           1386 ;8BP_wrapper/8BP.h:678: void _8BP_map2sp_inv2(int x, int y)
                           1387 ;	---------------------------------
                           1388 ; Function _8BP_map2sp_inv2
                           1389 ; ---------------------------------
   04BB                    1390 __8BP_map2sp_inv2::
                           1391 ;8BP_wrapper/8BP.h:685: __endasm;	
   04BB 3E 02         [ 7] 1392 	ld	a,#2
   04BD DD 21 02 00   [14] 1393 	ld	ix,#2 ;posicion primer parametro 
   04C1 DD 39         [15] 1394 	add ix,sp;
   04C3 CD 9E 64      [17] 1395 	CALL	MAP2SP
                           1396 ;8BP_wrapper/8BP.h:686: }
   04C6 C9            [10] 1397 	ret
                           1398 ;8BP_wrapper/8BP.h:687: void _8BP_map2sp_2(int y, int x)
                           1399 ;	---------------------------------
                           1400 ; Function _8BP_map2sp_2
                           1401 ; ---------------------------------
   04C7                    1402 __8BP_map2sp_2::
                           1403 ;8BP_wrapper/8BP.h:690: _8BP_map2sp_inv2(x,y);
   04C7 C1            [10] 1404 	pop	bc
   04C8 E1            [10] 1405 	pop	hl
   04C9 E5            [11] 1406 	push	hl
   04CA C5            [11] 1407 	push	bc
   04CB E5            [11] 1408 	push	hl
   04CC 21 06 00      [10] 1409 	ld	hl, #6
   04CF 39            [11] 1410 	add	hl, sp
   04D0 4E            [ 7] 1411 	ld	c, (hl)
   04D1 23            [ 6] 1412 	inc	hl
   04D2 46            [ 7] 1413 	ld	b, (hl)
   04D3 C5            [11] 1414 	push	bc
   04D4 CDrBBr04      [17] 1415 	call	__8BP_map2sp_inv2
   04D7 F1            [10] 1416 	pop	af
   04D8 F1            [10] 1417 	pop	af
                           1418 ;8BP_wrapper/8BP.h:691: }
   04D9 C9            [10] 1419 	ret
                           1420 ;8BP_wrapper/8BP.h:693: void _8BP_map2sp_1(unsigned char status)
                           1421 ;	---------------------------------
                           1422 ; Function _8BP_map2sp_1
                           1423 ; ---------------------------------
   04DA                    1424 __8BP_map2sp_1::
                           1425 ;8BP_wrapper/8BP.h:700: __endasm;	
   04DA 3E 01         [ 7] 1426 	ld	a,#1
   04DC DD 21 02 00   [14] 1427 	ld	ix,#2 ;posicion primer parametro 
   04E0 DD 39         [15] 1428 	add ix,sp;
   04E2 CD 9E 64      [17] 1429 	CALL	MAP2SP
                           1430 ;8BP_wrapper/8BP.h:702: }
   04E5 C9            [10] 1431 	ret
                           1432 ;8BP_wrapper/8BP.h:704: void _8BP_mover_inv3(int dx,int dy,int sp)
                           1433 ;	---------------------------------
                           1434 ; Function _8BP_mover_inv3
                           1435 ; ---------------------------------
   04E6                    1436 __8BP_mover_inv3::
                           1437 ;8BP_wrapper/8BP.h:711: __endasm;	
   04E6 3E 03         [ 7] 1438 	ld	a,#3
   04E8 DD 21 02 00   [14] 1439 	ld	ix,#2 ;posicion primer parametro 
   04EC DD 39         [15] 1440 	add ix,sp;
   04EE CD 3C 75      [17] 1441 	CALL	MOVER
                           1442 ;8BP_wrapper/8BP.h:713: }
   04F1 C9            [10] 1443 	ret
                           1444 ;8BP_wrapper/8BP.h:714: void _8BP_mover_3(int sp, int dy,int dx)
                           1445 ;	---------------------------------
                           1446 ; Function _8BP_mover_3
                           1447 ; ---------------------------------
   04F2                    1448 __8BP_mover_3::
                           1449 ;8BP_wrapper/8BP.h:716: _8BP_mover_inv3(dx,dy,sp);
   04F2 C1            [10] 1450 	pop	bc
   04F3 E1            [10] 1451 	pop	hl
   04F4 E5            [11] 1452 	push	hl
   04F5 C5            [11] 1453 	push	bc
   04F6 E5            [11] 1454 	push	hl
   04F7 FD 21 06 00   [14] 1455 	ld	iy, #6
   04FB FD 39         [15] 1456 	add	iy, sp
   04FD FD 6E 00      [19] 1457 	ld	l, 0 (iy)
   0500 FD 66 01      [19] 1458 	ld	h, 1 (iy)
   0503 E5            [11] 1459 	push	hl
   0504 FD 23         [10] 1460 	inc	iy
   0506 FD 23         [10] 1461 	inc	iy
   0508 FD 6E 00      [19] 1462 	ld	l, 0 (iy)
   050B FD 66 01      [19] 1463 	ld	h, 1 (iy)
   050E E5            [11] 1464 	push	hl
   050F CDrE6r04      [17] 1465 	call	__8BP_mover_inv3
   0512 F1            [10] 1466 	pop	af
   0513 F1            [10] 1467 	pop	af
   0514 F1            [10] 1468 	pop	af
                           1469 ;8BP_wrapper/8BP.h:717: }
   0515 C9            [10] 1470 	ret
                           1471 ;8BP_wrapper/8BP.h:718: void _8BP_mover_1(int sp)
                           1472 ;	---------------------------------
                           1473 ; Function _8BP_mover_1
                           1474 ; ---------------------------------
   0516                    1475 __8BP_mover_1::
                           1476 ;8BP_wrapper/8BP.h:725: __endasm;	
   0516 3E 01         [ 7] 1477 	ld	a,#1
   0518 DD 21 02 00   [14] 1478 	ld	ix,#2 ;posicion primer parametro 
   051C DD 39         [15] 1479 	add ix,sp;
   051E CD 3C 75      [17] 1480 	CALL	MOVER
                           1481 ;8BP_wrapper/8BP.h:728: }
   0521 C9            [10] 1482 	ret
                           1483 ;8BP_wrapper/8BP.h:729: void _8BP_moverall_inv2(int dx, int dy)
                           1484 ;	---------------------------------
                           1485 ; Function _8BP_moverall_inv2
                           1486 ; ---------------------------------
   0522                    1487 __8BP_moverall_inv2::
                           1488 ;8BP_wrapper/8BP.h:736: __endasm;	
   0522 3E 02         [ 7] 1489 	ld	a,#2
   0524 DD 21 02 00   [14] 1490 	ld	ix,#2 ;posicion primer parametro 
   0528 DD 39         [15] 1491 	add ix,sp;
   052A CD EE 76      [17] 1492 	CALL	MOVERALL
                           1493 ;8BP_wrapper/8BP.h:738: }
   052D C9            [10] 1494 	ret
                           1495 ;8BP_wrapper/8BP.h:739: void _8BP_moverall_2(int dy, int dx)
                           1496 ;	---------------------------------
                           1497 ; Function _8BP_moverall_2
                           1498 ; ---------------------------------
   052E                    1499 __8BP_moverall_2::
                           1500 ;8BP_wrapper/8BP.h:741: _8BP_moverall_inv2(dx,dy);
   052E C1            [10] 1501 	pop	bc
   052F E1            [10] 1502 	pop	hl
   0530 E5            [11] 1503 	push	hl
   0531 C5            [11] 1504 	push	bc
   0532 E5            [11] 1505 	push	hl
   0533 21 06 00      [10] 1506 	ld	hl, #6
   0536 39            [11] 1507 	add	hl, sp
   0537 4E            [ 7] 1508 	ld	c, (hl)
   0538 23            [ 6] 1509 	inc	hl
   0539 46            [ 7] 1510 	ld	b, (hl)
   053A C5            [11] 1511 	push	bc
   053B CDr22r05      [17] 1512 	call	__8BP_moverall_inv2
   053E F1            [10] 1513 	pop	af
   053F F1            [10] 1514 	pop	af
                           1515 ;8BP_wrapper/8BP.h:742: }
   0540 C9            [10] 1516 	ret
                           1517 ;8BP_wrapper/8BP.h:744: void _8BP_moverall()
                           1518 ;	---------------------------------
                           1519 ; Function _8BP_moverall
                           1520 ; ---------------------------------
   0541                    1521 __8BP_moverall::
                           1522 ;8BP_wrapper/8BP.h:749: __endasm;	
   0541 3E 00         [ 7] 1523 	ld	a,#0
   0543 CD EE 76      [17] 1524 	CALL	MOVERALL
                           1525 ;8BP_wrapper/8BP.h:751: }
   0546 C9            [10] 1526 	ret
                           1527 ;8BP_wrapper/8BP.h:753: void _8BP_peek_2(int address, int* dato)
                           1528 ;	---------------------------------
                           1529 ; Function _8BP_peek_2
                           1530 ; ---------------------------------
   0547                    1531 __8BP_peek_2::
                           1532 ;8BP_wrapper/8BP.h:756: p=(int *)address;	
   0547 C1            [10] 1533 	pop	bc
   0548 E1            [10] 1534 	pop	hl
   0549 E5            [11] 1535 	push	hl
   054A C5            [11] 1536 	push	bc
                           1537 ;8BP_wrapper/8BP.h:757: *dato=*p; //mas facil imposible
   054B FD 21 04 00   [14] 1538 	ld	iy, #4
   054F FD 39         [15] 1539 	add	iy, sp
   0551 FD 4E 00      [19] 1540 	ld	c, 0 (iy)
   0554 FD 46 01      [19] 1541 	ld	b, 1 (iy)
   0557 5E            [ 7] 1542 	ld	e, (hl)
   0558 23            [ 6] 1543 	inc	hl
   0559 56            [ 7] 1544 	ld	d, (hl)
   055A 7B            [ 4] 1545 	ld	a, e
   055B 02            [ 7] 1546 	ld	(bc), a
   055C 03            [ 6] 1547 	inc	bc
   055D 7A            [ 4] 1548 	ld	a, d
   055E 02            [ 7] 1549 	ld	(bc), a
                           1550 ;8BP_wrapper/8BP.h:758: }
   055F C9            [10] 1551 	ret
                           1552 ;8BP_wrapper/8BP.h:760: void _8BP_poke_2(int address,int dato)
                           1553 ;	---------------------------------
                           1554 ; Function _8BP_poke_2
                           1555 ; ---------------------------------
   0560                    1556 __8BP_poke_2::
                           1557 ;8BP_wrapper/8BP.h:763: p=(int *)address;
   0560 D1            [10] 1558 	pop	de
   0561 C1            [10] 1559 	pop	bc
   0562 C5            [11] 1560 	push	bc
   0563 D5            [11] 1561 	push	de
                           1562 ;8BP_wrapper/8BP.h:764: *p=dato; //mas facil imposible
   0564 FD 21 04 00   [14] 1563 	ld	iy, #4
   0568 FD 39         [15] 1564 	add	iy, sp
   056A FD 7E 00      [19] 1565 	ld	a, 0 (iy)
   056D 02            [ 7] 1566 	ld	(bc), a
   056E 03            [ 6] 1567 	inc	bc
   056F FD 7E 01      [19] 1568 	ld	a, 1 (iy)
   0572 02            [ 7] 1569 	ld	(bc), a
                           1570 ;8BP_wrapper/8BP.h:765: }
   0573 C9            [10] 1571 	ret
                           1572 ;8BP_wrapper/8BP.h:768: void _8BP_rink_1(int step)
                           1573 ;	---------------------------------
                           1574 ; Function _8BP_rink_1
                           1575 ; ---------------------------------
   0574                    1576 __8BP_rink_1::
                           1577 ;8BP_wrapper/8BP.h:775: __endasm;	
   0574 3E 01         [ 7] 1578 	ld	a,#1
   0576 DD 21 02 00   [14] 1579 	ld	ix,#2 ;posicion primer parametro 
   057A DD 39         [15] 1580 	add ix,sp;
   057C CD 2E 76      [17] 1581 	CALL	RINK
                           1582 ;8BP_wrapper/8BP.h:776: }
   057F C9            [10] 1583 	ret
                           1584 ;8BP_wrapper/8BP.h:780: void _8BP_rink_N(int num_params,int* ink_list)
                           1585 ;	---------------------------------
                           1586 ; Function _8BP_rink_N
                           1587 ; ---------------------------------
   0580                    1588 __8BP_rink_N::
   0580 F5            [11] 1589 	push	af
                           1590 ;8BP_wrapper/8BP.h:786: _8BP_rink_N_color1=num_params;
   0581 FD 21 04 00   [14] 1591 	ld	iy, #4
   0585 FD 39         [15] 1592 	add	iy, sp
   0587 FD 7E 00      [19] 1593 	ld	a, 0 (iy)
   058A 32r00r00      [13] 1594 	ld	(__8BP_rink_N_color1+0), a
                           1595 ;8BP_wrapper/8BP.h:789: for (i=0;i<num_params;i++)
   058D 01 00 00      [10] 1596 	ld	bc, #0x0000
   0590                    1597 00103$:
   0590 21 04 00      [10] 1598 	ld	hl, #4
   0593 39            [11] 1599 	add	hl, sp
   0594 79            [ 4] 1600 	ld	a, c
   0595 96            [ 7] 1601 	sub	a, (hl)
   0596 78            [ 4] 1602 	ld	a, b
   0597 23            [ 6] 1603 	inc	hl
   0598 9E            [ 7] 1604 	sbc	a, (hl)
   0599 E2r9Er05      [10] 1605 	jp	PO, 00118$
   059C EE 80         [ 7] 1606 	xor	a, #0x80
   059E                    1607 00118$:
   059E F2rD5r05      [10] 1608 	jp	P, 00101$
                           1609 ;8BP_wrapper/8BP.h:790: _8BP_rink_N_inverse_list[i]=ink_list[num_params-i-1];
   05A1 69            [ 4] 1610 	ld	l, c
   05A2 60            [ 4] 1611 	ld	h, b
   05A3 29            [11] 1612 	add	hl, hl
   05A4 11r01r00      [10] 1613 	ld	de, #__8BP_rink_N_inverse_list
   05A7 19            [11] 1614 	add	hl, de
   05A8 E3            [19] 1615 	ex	(sp), hl
   05A9 FD 21 04 00   [14] 1616 	ld	iy, #4
   05AD FD 39         [15] 1617 	add	iy, sp
   05AF FD 7E 00      [19] 1618 	ld	a, 0 (iy)
   05B2 91            [ 4] 1619 	sub	a, c
   05B3 5F            [ 4] 1620 	ld	e, a
   05B4 FD 7E 01      [19] 1621 	ld	a, 1 (iy)
   05B7 98            [ 4] 1622 	sbc	a, b
   05B8 57            [ 4] 1623 	ld	d, a
   05B9 1B            [ 6] 1624 	dec	de
   05BA CB 23         [ 8] 1625 	sla	e
   05BC CB 12         [ 8] 1626 	rl	d
   05BE 7B            [ 4] 1627 	ld	a, e
   05BF 21 06 00      [10] 1628 	ld	hl, #6
   05C2 39            [11] 1629 	add	hl, sp
   05C3 86            [ 7] 1630 	add	a, (hl)
   05C4 5F            [ 4] 1631 	ld	e, a
   05C5 7A            [ 4] 1632 	ld	a, d
   05C6 23            [ 6] 1633 	inc	hl
   05C7 8E            [ 7] 1634 	adc	a, (hl)
   05C8 57            [ 4] 1635 	ld	d, a
   05C9 EB            [ 4] 1636 	ex	de,hl
   05CA 5E            [ 7] 1637 	ld	e, (hl)
   05CB 23            [ 6] 1638 	inc	hl
   05CC 56            [ 7] 1639 	ld	d, (hl)
   05CD E1            [10] 1640 	pop	hl
   05CE E5            [11] 1641 	push	hl
   05CF 73            [ 7] 1642 	ld	(hl), e
   05D0 23            [ 6] 1643 	inc	hl
   05D1 72            [ 7] 1644 	ld	(hl), d
                           1645 ;8BP_wrapper/8BP.h:789: for (i=0;i<num_params;i++)
   05D2 03            [ 6] 1646 	inc	bc
   05D3 18 BB         [12] 1647 	jr	00103$
   05D5                    1648 00101$:
                           1649 ;8BP_wrapper/8BP.h:799: __endasm;	
   05D5 21r00r00      [10] 1650 	ld	hl, #__8BP_rink_N_color1;
   05D8 7E            [ 7] 1651 	ld	a,(hl)
   05D9 DD 21r01r00   [14] 1652 	ld	ix, #__8BP_rink_N_inverse_list;
   05DD CD 2E 76      [17] 1653 	CALL	RINK
                           1654 ;8BP_wrapper/8BP.h:800: }
   05E0 F1            [10] 1655 	pop	af
   05E1 C9            [10] 1656 	ret
                           1657 ;8BP_wrapper/8BP.h:802: void _8BP_umap_inv6(int x_fin,int x_ini, int y_fin, int y_ini, int map_fin, int map_ini)
                           1658 ;	---------------------------------
                           1659 ; Function _8BP_umap_inv6
                           1660 ; ---------------------------------
   05E2                    1661 __8BP_umap_inv6::
                           1662 ;8BP_wrapper/8BP.h:809: __endasm;	
   05E2 3E 06         [ 7] 1663 	ld	a,#6
   05E4 DD 21 02 00   [14] 1664 	ld	ix,#2 ;posicion primer parametro 
   05E8 DD 39         [15] 1665 	add ix,sp;
   05EA CD 34 5F      [17] 1666 	CALL	UMAP
                           1667 ;8BP_wrapper/8BP.h:812: }
   05ED C9            [10] 1668 	ret
                           1669 ;8BP_wrapper/8BP.h:814: void _8BP_umap_6(int map_ini, int map_fin, int y_ini, int y_fin, int x_ini, int x_fin)
                           1670 ;	---------------------------------
                           1671 ; Function _8BP_umap_6
                           1672 ; ---------------------------------
   05EE                    1673 __8BP_umap_6::
                           1674 ;8BP_wrapper/8BP.h:816: _8BP_umap_inv6(x_fin,x_ini,y_fin,y_ini, map_fin, map_ini);
   05EE C1            [10] 1675 	pop	bc
   05EF E1            [10] 1676 	pop	hl
   05F0 E5            [11] 1677 	push	hl
   05F1 C5            [11] 1678 	push	bc
   05F2 E5            [11] 1679 	push	hl
   05F3 FD 21 06 00   [14] 1680 	ld	iy, #6
   05F7 FD 39         [15] 1681 	add	iy, sp
   05F9 FD 6E 00      [19] 1682 	ld	l, 0 (iy)
   05FC FD 66 01      [19] 1683 	ld	h, 1 (iy)
   05FF E5            [11] 1684 	push	hl
   0600 FD 23         [10] 1685 	inc	iy
   0602 FD 23         [10] 1686 	inc	iy
   0604 FD 6E 00      [19] 1687 	ld	l, 0 (iy)
   0607 FD 66 01      [19] 1688 	ld	h, 1 (iy)
   060A E5            [11] 1689 	push	hl
   060B FD 23         [10] 1690 	inc	iy
   060D FD 23         [10] 1691 	inc	iy
   060F FD 6E 00      [19] 1692 	ld	l, 0 (iy)
   0612 FD 66 01      [19] 1693 	ld	h, 1 (iy)
   0615 E5            [11] 1694 	push	hl
   0616 FD 23         [10] 1695 	inc	iy
   0618 FD 23         [10] 1696 	inc	iy
   061A FD 6E 00      [19] 1697 	ld	l, 0 (iy)
   061D FD 66 01      [19] 1698 	ld	h, 1 (iy)
   0620 E5            [11] 1699 	push	hl
   0621 FD 23         [10] 1700 	inc	iy
   0623 FD 23         [10] 1701 	inc	iy
   0625 FD 6E 00      [19] 1702 	ld	l, 0 (iy)
   0628 FD 66 01      [19] 1703 	ld	h, 1 (iy)
   062B E5            [11] 1704 	push	hl
   062C CDrE2r05      [17] 1705 	call	__8BP_umap_inv6
   062F 21 0C 00      [10] 1706 	ld	hl, #12
   0632 39            [11] 1707 	add	hl, sp
   0633 F9            [ 6] 1708 	ld	sp, hl
                           1709 ;8BP_wrapper/8BP.h:818: }
   0634 C9            [10] 1710 	ret
                           1711 ;mini_BASIC/minibasic.h:55: unsigned int _basic_time()
                           1712 ;	---------------------------------
                           1713 ; Function _basic_time
                           1714 ; ---------------------------------
   0635                    1715 __basic_time::
                           1716 ;mini_BASIC/minibasic.h:60: __endasm;
   0635 CD 0D BD      [17] 1717 	call	0xbd0d
   0638 C9            [10] 1718 	ret
                           1719 ;mini_BASIC/minibasic.h:62: return 0;
   0639 21 00 00      [10] 1720 	ld	hl, #0x0000
                           1721 ;mini_BASIC/minibasic.h:64: }
   063C C9            [10] 1722 	ret
                           1723 ;mini_BASIC/minibasic.h:67: unsigned int _basic_rnd(int max)
                           1724 ;	---------------------------------
                           1725 ; Function _basic_rnd
                           1726 ; ---------------------------------
   063D                    1727 __basic_rnd::
                           1728 ;mini_BASIC/minibasic.h:80: __endasm;
   063D CD 0D BD      [17] 1729 	call	0xbd0d
   0640 44            [ 4] 1730 	ld	b,h
   0641 4D            [ 4] 1731 	ld	c, l
   0642 21r00r00      [10] 1732 	ld	hl,#__basic_rnd_x; con el # es direccion, el _ es imprescindible en cualquier caso
   0645 71            [ 7] 1733 	ld	(hl),c
   0646 23            [ 6] 1734 	inc	hl
   0647 70            [ 7] 1735 	ld	(hl),b
                           1736 ;mini_BASIC/minibasic.h:82: return _basic_rnd_x % max;	
   0648 D1            [10] 1737 	pop	de
   0649 C1            [10] 1738 	pop	bc
   064A C5            [11] 1739 	push	bc
   064B D5            [11] 1740 	push	de
   064C C5            [11] 1741 	push	bc
   064D 2Ar00r00      [16] 1742 	ld	hl, (__basic_rnd_x)
   0650 E5            [11] 1743 	push	hl
   0651 CDr00r00      [17] 1744 	call	__moduint
   0654 F1            [10] 1745 	pop	af
   0655 F1            [10] 1746 	pop	af
                           1747 ;mini_BASIC/minibasic.h:86: }
   0656 C9            [10] 1748 	ret
                           1749 ;mini_BASIC/minibasic.h:88: void _basic_border(char color) 
                           1750 ;	---------------------------------
                           1751 ; Function _basic_border
                           1752 ; ---------------------------------
   0657                    1753 __basic_border::
                           1754 ;mini_BASIC/minibasic.h:101: __endasm;	
                           1755 ;	recoge primer parametro
                           1756 ;------------------------
   0657 DD 21 02 00   [14] 1757 	ld	ix,#2; posicion primer parametro 
   065B DD 39         [15] 1758 	add ix,sp;
   065D DD 7E 00      [19] 1759 	ld	a,(ix)
   0660 47            [ 4] 1760 	ld	b, a
   0661 4F            [ 4] 1761 	ld	c, a
   0662 CD 38 BC      [17] 1762 	call	0xbc38
                           1763 ;mini_BASIC/minibasic.h:102: }
   0665 C9            [10] 1764 	ret
                           1765 ;mini_BASIC/minibasic.h:106: void DisplayChar( char c )
                           1766 ;	---------------------------------
                           1767 ; Function DisplayChar
                           1768 ; ---------------------------------
   0666                    1769 _DisplayChar::
                           1770 ;mini_BASIC/minibasic.h:118: __endasm;
   0666 21 02 00      [10] 1771 	ld	hl,#2; recoge primer parametro
   0669 39            [11] 1772 	add	hl,sp
   066A 7E            [ 7] 1773 	ld	a,(hl)
   066B CD 5A BB      [17] 1774 	call	0xbb5a
                           1775 ;mini_BASIC/minibasic.h:119: }
   066E C9            [10] 1776 	ret
                           1777 ;mini_BASIC/minibasic.h:122: void _basic_print(char *cad)
                           1778 ;	---------------------------------
                           1779 ; Function _basic_print
                           1780 ; ---------------------------------
   066F                    1781 __basic_print::
                           1782 ;mini_BASIC/minibasic.h:125: textPtr=cad;
   066F D1            [10] 1783 	pop	de
   0670 C1            [10] 1784 	pop	bc
   0671 C5            [11] 1785 	push	bc
   0672 D5            [11] 1786 	push	de
                           1787 ;mini_BASIC/minibasic.h:127: while( *textPtr != 0 )
   0673                    1788 00101$:
   0673 0A            [ 7] 1789 	ld	a, (bc)
   0674 B7            [ 4] 1790 	or	a, a
   0675 C8            [11] 1791 	ret	Z
                           1792 ;mini_BASIC/minibasic.h:129: DisplayChar( *textPtr);
   0676 C5            [11] 1793 	push	bc
   0677 F5            [11] 1794 	push	af
   0678 33            [ 6] 1795 	inc	sp
   0679 CDr66r06      [17] 1796 	call	_DisplayChar
   067C 33            [ 6] 1797 	inc	sp
   067D C1            [10] 1798 	pop	bc
                           1799 ;mini_BASIC/minibasic.h:130: textPtr++;
   067E 03            [ 6] 1800 	inc	bc
                           1801 ;mini_BASIC/minibasic.h:132: } 
   067F 18 F2         [12] 1802 	jr	00101$
                           1803 ;mini_BASIC/minibasic.h:134: char _basic_inkey(char key) __naked 
                           1804 ;	---------------------------------
                           1805 ; Function _basic_inkey
                           1806 ; ---------------------------------
   0681                    1807 __basic_inkey::
                           1808 ;mini_BASIC/minibasic.h:153: __endasm;
   0681 DD 21 02 00   [14] 1809 	ld	ix,#2; posicion primer parametro 
   0685 DD 39         [15] 1810 	add ix,sp;
   0687 DD 7E 00      [19] 1811 	ld	a, (ix)
   068A CD 1E BB      [17] 1812 	CALL	0xBB1E
   068D 20 03         [12] 1813 	jr	nz, pressed
   068F 2E 01         [ 7] 1814 	ld	l,#1
   0691 C9            [10] 1815 	ret
   0692                    1816 	  pressed:
   0692 2E 00         [ 7] 1817 	ld	l,#0
   0694 C9            [10] 1818 	ret
                           1819 ;mini_BASIC/minibasic.h:155: return 0;
   0695 2E 00         [ 7] 1820 	ld	l, #0x00
                           1821 ;mini_BASIC/minibasic.h:158: }
                           1822 ;mini_BASIC/minibasic.h:166: char* reverse(char *buffer, int i, int j)
                           1823 ;	---------------------------------
                           1824 ; Function reverse
                           1825 ; ---------------------------------
   0697                    1826 _reverse::
   0697 F5            [11] 1827 	push	af
   0698 F5            [11] 1828 	push	af
   0699 3B            [ 6] 1829 	dec	sp
                           1830 ;mini_BASIC/minibasic.h:168: while (i < j)
   069A FD 21 0B 00   [14] 1831 	ld	iy, #11
   069E FD 39         [15] 1832 	add	iy, sp
   06A0 FD 4E 00      [19] 1833 	ld	c, 0 (iy)
   06A3 FD 46 01      [19] 1834 	ld	b, 1 (iy)
   06A6 FD 2B         [10] 1835 	dec	iy
   06A8 FD 2B         [10] 1836 	dec	iy
   06AA FD 7E 00      [19] 1837 	ld	a, 0 (iy)
   06AD FD 21 03 00   [14] 1838 	ld	iy, #3
   06B1 FD 39         [15] 1839 	add	iy, sp
   06B3 FD 77 00      [19] 1840 	ld	0 (iy), a
   06B6 21 0A 00      [10] 1841 	ld	hl, #9+1
   06B9 39            [11] 1842 	add	hl, sp
   06BA 7E            [ 7] 1843 	ld	a, (hl)
   06BB FD 21 03 00   [14] 1844 	ld	iy, #3
   06BF FD 39         [15] 1845 	add	iy, sp
   06C1 FD 77 01      [19] 1846 	ld	1 (iy), a
   06C4                    1847 00101$:
   06C4 FD 21 03 00   [14] 1848 	ld	iy, #3
   06C8 FD 39         [15] 1849 	add	iy, sp
   06CA FD 7E 00      [19] 1850 	ld	a, 0 (iy)
   06CD 91            [ 4] 1851 	sub	a, c
   06CE FD 7E 01      [19] 1852 	ld	a, 1 (iy)
   06D1 98            [ 4] 1853 	sbc	a, b
   06D2 E2rD7r06      [10] 1854 	jp	PO, 00118$
   06D5 EE 80         [ 7] 1855 	xor	a, #0x80
   06D7                    1856 00118$:
   06D7 F2r1Dr07      [10] 1857 	jp	P, 00103$
                           1858 ;mini_BASIC/minibasic.h:169: swap(&buffer[i++], &buffer[j--]);
   06DA FD 21 07 00   [14] 1859 	ld	iy, #7
   06DE FD 39         [15] 1860 	add	iy, sp
   06E0 FD 7E 00      [19] 1861 	ld	a, 0 (iy)
   06E3 81            [ 4] 1862 	add	a, c
   06E4 5F            [ 4] 1863 	ld	e, a
   06E5 FD 7E 01      [19] 1864 	ld	a, 1 (iy)
   06E8 88            [ 4] 1865 	adc	a, b
   06E9 57            [ 4] 1866 	ld	d, a
   06EA 0B            [ 6] 1867 	dec	bc
   06EB 33            [ 6] 1868 	inc	sp
   06EC 33            [ 6] 1869 	inc	sp
   06ED D5            [11] 1870 	push	de
   06EE 21 03 00      [10] 1871 	ld	hl, #3
   06F1 39            [11] 1872 	add	hl, sp
   06F2 FD 7E 00      [19] 1873 	ld	a, 0 (iy)
   06F5 86            [ 7] 1874 	add	a, (hl)
   06F6 5F            [ 4] 1875 	ld	e, a
   06F7 FD 7E 01      [19] 1876 	ld	a, 1 (iy)
   06FA 23            [ 6] 1877 	inc	hl
   06FB 8E            [ 7] 1878 	adc	a, (hl)
   06FC 57            [ 4] 1879 	ld	d, a
   06FD FD 21 03 00   [14] 1880 	ld	iy, #3
   0701 FD 39         [15] 1881 	add	iy, sp
   0703 FD 34 00      [23] 1882 	inc	0 (iy)
   0706 20 03         [12] 1883 	jr	NZ,00119$
   0708 FD 34 01      [23] 1884 	inc	1 (iy)
   070B                    1885 00119$:
                           1886 ;mini_BASIC/minibasic.h:162: char t = *x; *x = *y; *y = t;
   070B 1A            [ 7] 1887 	ld	a, (de)
   070C FD 2B         [10] 1888 	dec	iy
   070E FD 77 00      [19] 1889 	ld	0 (iy), a
   0711 E1            [10] 1890 	pop	hl
   0712 E5            [11] 1891 	push	hl
   0713 7E            [ 7] 1892 	ld	a, (hl)
   0714 12            [ 7] 1893 	ld	(de), a
   0715 E1            [10] 1894 	pop	hl
   0716 E5            [11] 1895 	push	hl
   0717 FD 7E 00      [19] 1896 	ld	a, 0 (iy)
   071A 77            [ 7] 1897 	ld	(hl), a
                           1898 ;mini_BASIC/minibasic.h:169: swap(&buffer[i++], &buffer[j--]);
   071B 18 A7         [12] 1899 	jr	00101$
   071D                    1900 00103$:
                           1901 ;mini_BASIC/minibasic.h:171: return buffer;
   071D 21 07 00      [10] 1902 	ld	hl, #7
   0720 39            [11] 1903 	add	hl, sp
   0721 7E            [ 7] 1904 	ld	a, (hl)
   0722 23            [ 6] 1905 	inc	hl
   0723 66            [ 7] 1906 	ld	h, (hl)
   0724 6F            [ 4] 1907 	ld	l, a
                           1908 ;mini_BASIC/minibasic.h:172: }
   0725 F1            [10] 1909 	pop	af
   0726 F1            [10] 1910 	pop	af
   0727 33            [ 6] 1911 	inc	sp
   0728 C9            [10] 1912 	ret
                           1913 ;mini_BASIC/minibasic.h:174: char* _basic_str(int value) 
                           1914 ;	---------------------------------
                           1915 ; Function _basic_str
                           1916 ; ---------------------------------
   0729                    1917 __basic_str::
   0729 F5            [11] 1918 	push	af
   072A F5            [11] 1919 	push	af
                           1920 ;mini_BASIC/minibasic.h:179: int n = abs(value);
   072B 21 06 00      [10] 1921 	ld	hl, #6
   072E 39            [11] 1922 	add	hl, sp
   072F 4E            [ 7] 1923 	ld	c, (hl)
   0730 23            [ 6] 1924 	inc	hl
   0731 46            [ 7] 1925 	ld	b, (hl)
   0732 C5            [11] 1926 	push	bc
   0733 CDr00r00      [17] 1927 	call	_abs
   0736 F1            [10] 1928 	pop	af
   0737 4D            [ 4] 1929 	ld	c, l
   0738 44            [ 4] 1930 	ld	b, h
                           1931 ;mini_BASIC/minibasic.h:182: while (n)
   0739 11 00 00      [10] 1932 	ld	de, #0x0000
   073C                    1933 00101$:
                           1934 ;mini_BASIC/minibasic.h:186: buffer[i++] = 48 + r ;
   073C 21 01 00      [10] 1935 	ld	hl, #0x0001
   073F 19            [11] 1936 	add	hl, de
   0740 E3            [19] 1937 	ex	(sp), hl
   0741 21r23r00      [10] 1938 	ld	hl, #__basic_str_buffer_65536_273
   0744 19            [11] 1939 	add	hl, de
                           1940 ;mini_BASIC/minibasic.h:182: while (n)
   0745 78            [ 4] 1941 	ld	a, b
   0746 B1            [ 4] 1942 	or	a, c
   0747 28 33         [12] 1943 	jr	Z,00114$
                           1944 ;mini_BASIC/minibasic.h:184: int r = n % 10;
   0749 E5            [11] 1945 	push	hl
   074A C5            [11] 1946 	push	bc
   074B 11 0A 00      [10] 1947 	ld	de, #0x000a
   074E D5            [11] 1948 	push	de
   074F C5            [11] 1949 	push	bc
   0750 CDr00r00      [17] 1950 	call	__modsint
   0753 F1            [10] 1951 	pop	af
   0754 F1            [10] 1952 	pop	af
   0755 EB            [ 4] 1953 	ex	de,hl
   0756 C1            [10] 1954 	pop	bc
   0757 E1            [10] 1955 	pop	hl
   0758 FD 21 02 00   [14] 1956 	ld	iy, #2
   075C FD 39         [15] 1957 	add	iy, sp
   075E FD 73 00      [19] 1958 	ld	0 (iy), e
   0761 FD 72 01      [19] 1959 	ld	1 (iy), d
                           1960 ;mini_BASIC/minibasic.h:186: buffer[i++] = 48 + r ;
   0764 D1            [10] 1961 	pop	de
   0765 D5            [11] 1962 	push	de
   0766 FD 7E 00      [19] 1963 	ld	a, 0 (iy)
   0769 C6 30         [ 7] 1964 	add	a, #0x30
   076B 77            [ 7] 1965 	ld	(hl), a
                           1966 ;mini_BASIC/minibasic.h:188: n = n / 10;
   076C D5            [11] 1967 	push	de
   076D 21 0A 00      [10] 1968 	ld	hl, #0x000a
   0770 E5            [11] 1969 	push	hl
   0771 C5            [11] 1970 	push	bc
   0772 CDr00r00      [17] 1971 	call	__divsint
   0775 F1            [10] 1972 	pop	af
   0776 F1            [10] 1973 	pop	af
   0777 D1            [10] 1974 	pop	de
   0778 4D            [ 4] 1975 	ld	c, l
   0779 44            [ 4] 1976 	ld	b, h
   077A 18 C0         [12] 1977 	jr	00101$
   077C                    1978 00114$:
   077C 4B            [ 4] 1979 	ld	c, e
                           1980 ;mini_BASIC/minibasic.h:192: if (i == 0)
   077D 7A            [ 4] 1981 	ld	a,d
   077E 47            [ 4] 1982 	ld	b,a
   077F B3            [ 4] 1983 	or	a, e
   0780 20 04         [12] 1984 	jr	NZ,00105$
                           1985 ;mini_BASIC/minibasic.h:193: buffer[i++] = '0';
   0782 C1            [10] 1986 	pop	bc
   0783 C5            [11] 1987 	push	bc
   0784 36 30         [10] 1988 	ld	(hl), #0x30
   0786                    1989 00105$:
                           1990 ;mini_BASIC/minibasic.h:197: if (value < 0 )
   0786 21 07 00      [10] 1991 	ld	hl, #6+1
   0789 39            [11] 1992 	add	hl, sp
   078A CB 7E         [12] 1993 	bit	7, (hl)
   078C 28 09         [12] 1994 	jr	Z,00107$
                           1995 ;mini_BASIC/minibasic.h:198: buffer[i++] = '-';
   078E 59            [ 4] 1996 	ld	e, c
   078F 50            [ 4] 1997 	ld	d, b
   0790 03            [ 6] 1998 	inc	bc
   0791 21r23r00      [10] 1999 	ld	hl, #__basic_str_buffer_65536_273
   0794 19            [11] 2000 	add	hl, de
   0795 36 2D         [10] 2001 	ld	(hl), #0x2d
   0797                    2002 00107$:
                           2003 ;mini_BASIC/minibasic.h:200: buffer[i] = 0; // null terminate string
   0797 21r23r00      [10] 2004 	ld	hl, #__basic_str_buffer_65536_273
   079A 09            [11] 2005 	add	hl, bc
   079B 36 00         [10] 2006 	ld	(hl), #0x00
                           2007 ;mini_BASIC/minibasic.h:203: return reverse(buffer, 0, i - 1);
   079D 0B            [ 6] 2008 	dec	bc
   079E C5            [11] 2009 	push	bc
   079F 21 00 00      [10] 2010 	ld	hl, #0x0000
   07A2 E5            [11] 2011 	push	hl
   07A3 21r23r00      [10] 2012 	ld	hl, #__basic_str_buffer_65536_273
   07A6 E5            [11] 2013 	push	hl
   07A7 CDr97r06      [17] 2014 	call	_reverse
   07AA F1            [10] 2015 	pop	af
   07AB F1            [10] 2016 	pop	af
   07AC F1            [10] 2017 	pop	af
                           2018 ;mini_BASIC/minibasic.h:204: }
   07AD F1            [10] 2019 	pop	af
   07AE F1            [10] 2020 	pop	af
   07AF C9            [10] 2021 	ret
                           2022 ;mini_BASIC/minibasic.h:206: void _basic_call (unsigned int address) 
                           2023 ;	---------------------------------
                           2024 ; Function _basic_call
                           2025 ; ---------------------------------
   07B0                    2026 __basic_call::
                           2027 ;mini_BASIC/minibasic.h:216: __endasm;	
   07B0 DD 21 02 00   [14] 2028 	ld	ix,#2; posicion primer parametro 
   07B4 DD 39         [15] 2029 	add ix,sp;
   07B6 DD 6E 00      [19] 2030 	ld	l, (ix)
   07B9 DD 66 01      [19] 2031 	ld	h, 1(ix)
   07BC 22rC0r07      [16] 2032 	ld	(dir+1),hl
   07BF                    2033 	  dir:
   07BF CD 19 BD      [17] 2034 	CALL 0xbd19 ; la direccion 0xbd19 se machaca con la que venga
                           2035 ;mini_BASIC/minibasic.h:218: }
   07C2 C9            [10] 2036 	ret
                           2037 ;mini_BASIC/minibasic.h:220: void _basic_locate (unsigned int x, unsigned int y) 
                           2038 ;	---------------------------------
                           2039 ; Function _basic_locate
                           2040 ; ---------------------------------
   07C3                    2041 __basic_locate::
                           2042 ;mini_BASIC/minibasic.h:228: __endasm;	
   07C3 DD 21 02 00   [14] 2043 	ld	ix,#2; posicion primer parametro 
   07C7 DD 39         [15] 2044 	add ix,sp;
   07C9 DD 6E 02      [19] 2045 	ld	l, 2(ix)
   07CC DD 66 00      [19] 2046 	ld	h, (ix)
   07CF CD 75 BB      [17] 2047 	call	0xbb75
                           2048 ;mini_BASIC/minibasic.h:230: }
   07D2 C9            [10] 2049 	ret
                           2050 ;mini_BASIC/minibasic.h:251: void _basic_sound(unsigned char nChannelStatus, int nTonePeriod, int nDuration, unsigned char nVolume, char nVolumeEnvelope, char nToneEnvelope, unsigned char nNoisePeriod) 
                           2051 ;	---------------------------------
                           2052 ; Function _basic_sound
                           2053 ; ---------------------------------
   07D3                    2054 __basic_sound::
                           2055 ;mini_BASIC/minibasic.h:330: __endasm;
   07D3 DD 21 02 00   [14] 2056 	ld	ix,#2;
   07D7 DD 39         [15] 2057 	add	ix,sp;
   07D9 21 F1 F7      [10] 2058 	LD	HL, #0xf7f1
   07DC DD 7E 00      [19] 2059 	LD	A, (IX) ;nChannelStatus
   07DF 77            [ 7] 2060 	LD	(HL), A
   07E0 23            [ 6] 2061 	INC	HL
   07E1 DD 7E 06      [19] 2062 	LD	A,6 (IX) ;nVolumeEnvelope
   07E4 77            [ 7] 2063 	LD	(HL), A
   07E5 23            [ 6] 2064 	INC	HL
   07E6 DD 7E 07      [19] 2065 	LD	A, 7 (IX) ;nToneEnvelope
   07E9 77            [ 7] 2066 	LD	(HL), A
   07EA 23            [ 6] 2067 	INC	HL
   07EB DD 7E 01      [19] 2068 	LD	A, 1 (IX) ;nTonePeriod
   07EE 77            [ 7] 2069 	LD	(HL), A
   07EF 23            [ 6] 2070 	INC	HL
   07F0 DD 7E 02      [19] 2071 	LD	A, 2 (IX) ;nTonePeriod
   07F3 77            [ 7] 2072 	LD	(HL), A
   07F4 23            [ 6] 2073 	INC	HL
   07F5 DD 7E 08      [19] 2074 	LD	A, 8 (IX) ;nNoisePeriod
   07F8 77            [ 7] 2075 	LD	(HL), A
   07F9 23            [ 6] 2076 	INC	HL
   07FA DD 7E 05      [19] 2077 	LD	A, 5 (IX) ;nVolume
   07FD 77            [ 7] 2078 	LD	(HL), A
   07FE 23            [ 6] 2079 	INC	HL
   07FF DD 7E 03      [19] 2080 	LD	A, 3 (IX) ;nDuration
   0802 77            [ 7] 2081 	LD	(HL), A
   0803 23            [ 6] 2082 	INC	HL
   0804 DD 7E 04      [19] 2083 	LD	A, 4 (IX) ;nDuration
   0807 77            [ 7] 2084 	LD	(HL), A
   0808 23            [ 6] 2085 	INC	HL
   0809 21 F1 F7      [10] 2086 	LD	HL, #0xf7f1
   080C CD AA BC      [17] 2087 	CALL	#0xBCAA ;SOUND QUEUE
                           2088 ;mini_BASIC/minibasic.h:333: }
   080F C9            [10] 2089 	ret
                           2090 ;mini_BASIC/minibasic.h:335: void _basic_ink (char ink1, char ink2)
                           2091 ;	---------------------------------
                           2092 ; Function _basic_ink
                           2093 ; ---------------------------------
   0810                    2094 __basic_ink::
                           2095 ;mini_BASIC/minibasic.h:347: __endasm;	
   0810 DD 21 02 00   [14] 2096 	ld	ix,#2; posicion primer parametro 
   0814 DD 39         [15] 2097 	add ix,sp;
   0816 DD 7E 00      [19] 2098 	ld	a, (ix)
   0819 DD 46 01      [19] 2099 	ld	b, 1(ix)
   081C 48            [ 4] 2100 	ld	c,b
   081D CD 32 BC      [17] 2101 	call	0xbc32
                           2102 ;mini_BASIC/minibasic.h:348: }
   0820 C9            [10] 2103 	ret
                           2104 ;mini_BASIC/minibasic.h:350: char _basic_peek(unsigned int address)
                           2105 ;	---------------------------------
                           2106 ; Function _basic_peek
                           2107 ; ---------------------------------
   0821                    2108 __basic_peek::
                           2109 ;mini_BASIC/minibasic.h:361: __endasm;
   0821 DD 21 02 00   [14] 2110 	ld	ix,#2; posicion primer parametro 
   0825 DD 39         [15] 2111 	add ix,sp;
   0827 DD 6E 00      [19] 2112 	ld	l, (ix)
   082A DD 66 01      [19] 2113 	ld	h,1(ix)
   082D 7E            [ 7] 2114 	ld	a,(hl)
   082E 6F            [ 4] 2115 	ld	l,a
   082F C9            [10] 2116 	ret
                           2117 ;mini_BASIC/minibasic.h:363: return 0;
   0830 2E 00         [ 7] 2118 	ld	l, #0x00
                           2119 ;mini_BASIC/minibasic.h:365: }
   0832 C9            [10] 2120 	ret
                           2121 ;mini_BASIC/minibasic.h:367: void _basic_poke(unsigned int address, unsigned char data)
                           2122 ;	---------------------------------
                           2123 ; Function _basic_poke
                           2124 ; ---------------------------------
   0833                    2125 __basic_poke::
                           2126 ;mini_BASIC/minibasic.h:381: __endasm;
   0833 DD 21 02 00   [14] 2127 	ld	ix,#2; posicion primer parametro 
   0837 DD 39         [15] 2128 	add ix,sp;
   0839 DD 6E 00      [19] 2129 	ld	l, (ix)
   083C DD 66 01      [19] 2130 	ld	h,1(ix)
   083F DD 7E 02      [19] 2131 	ld	a,2(ix)
   0842 77            [ 7] 2132 	ld	(hl),a
   0843 C9            [10] 2133 	ret
                           2134 ;mini_BASIC/minibasic.h:382: }
   0844 C9            [10] 2135 	ret
                           2136 ;mini_BASIC/minibasic.h:384: void _basic_pen_txt(char ink)
                           2137 ;	---------------------------------
                           2138 ; Function _basic_pen_txt
                           2139 ; ---------------------------------
   0845                    2140 __basic_pen_txt::
                           2141 ;mini_BASIC/minibasic.h:392: __endasm;
   0845 DD 21 02 00   [14] 2142 	ld	ix,#2; posicion primer parametro 
   0849 DD 39         [15] 2143 	add ix,sp;
   084B DD 7E 00      [19] 2144 	ld	a, (ix)
   084E CD 90 BB      [17] 2145 	call	0xbb90
                           2146 ;mini_BASIC/minibasic.h:395: }
   0851 C9            [10] 2147 	ret
                           2148 ;mini_BASIC/minibasic.h:396: void _basic_pen_graph(char ink)
                           2149 ;	---------------------------------
                           2150 ; Function _basic_pen_graph
                           2151 ; ---------------------------------
   0852                    2152 __basic_pen_graph::
                           2153 ;mini_BASIC/minibasic.h:403: __endasm;
   0852 DD 21 02 00   [14] 2154 	ld	ix,#2; posicion primer parametro 
   0856 DD 39         [15] 2155 	add ix,sp;
   0858 DD 7E 00      [19] 2156 	ld	a, (ix)
   085B CD DE BB      [17] 2157 	call	0xbbde
                           2158 ;mini_BASIC/minibasic.h:405: }
   085E C9            [10] 2159 	ret
                           2160 ;mini_BASIC/minibasic.h:411: void _basic_paper(char ink)
                           2161 ;	---------------------------------
                           2162 ; Function _basic_paper
                           2163 ; ---------------------------------
   085F                    2164 __basic_paper::
                           2165 ;mini_BASIC/minibasic.h:418: __endasm;
   085F DD 21 02 00   [14] 2166 	ld	ix,#2; posicion primer parametro 
   0863 DD 39         [15] 2167 	add ix,sp;
   0865 DD 7E 00      [19] 2168 	ld	a, (ix)
   0868 CD 96 BB      [17] 2169 	call	0xbb96
                           2170 ;mini_BASIC/minibasic.h:420: }
   086B C9            [10] 2171 	ret
                           2172 ;mini_BASIC/minibasic.h:422: void _basic_plot(int x, int y){
                           2173 ;	---------------------------------
                           2174 ; Function _basic_plot
                           2175 ; ---------------------------------
   086C                    2176 __basic_plot::
                           2177 ;mini_BASIC/minibasic.h:435: __endasm;
   086C DD 21 02 00   [14] 2178 	ld	ix,#2; posicion primer parametro 
   0870 DD 39         [15] 2179 	add ix,sp;
   0872 DD 5E 00      [19] 2180 	ld	e,(ix)
   0875 DD 56 01      [19] 2181 	ld	d, 1(ix)
   0878 DD 6E 02      [19] 2182 	ld	l, 2(ix)
   087B DD 66 03      [19] 2183 	ld	h, 3(ix)
   087E CD EA BB      [17] 2184 	call	0xBBEA ; GRA PLOT ABSOLUTE
   0881 C9            [10] 2185 	ret
                           2186 ;mini_BASIC/minibasic.h:436: }
   0882 C9            [10] 2187 	ret
                           2188 ;mini_BASIC/minibasic.h:438: void _basic_move(int x, int y){
                           2189 ;	---------------------------------
                           2190 ; Function _basic_move
                           2191 ; ---------------------------------
   0883                    2192 __basic_move::
                           2193 ;mini_BASIC/minibasic.h:451: __endasm;
   0883 DD 21 02 00   [14] 2194 	ld	ix,#2; posicion primer parametro 
   0887 DD 39         [15] 2195 	add ix,sp;
   0889 DD 5E 00      [19] 2196 	ld	e,(ix)
   088C DD 56 01      [19] 2197 	ld	d, 1(ix)
   088F DD 6E 02      [19] 2198 	ld	l, 2(ix)
   0892 DD 66 03      [19] 2199 	ld	h, 3(ix)
   0895 CD C0 BB      [17] 2200 	call	0xBBC0 ; GRA MOVE ABSOLUTE
   0898 C9            [10] 2201 	ret
                           2202 ;mini_BASIC/minibasic.h:452: }
   0899 C9            [10] 2203 	ret
                           2204 ;mini_BASIC/minibasic.h:454: void _basic_draw(int x, int y)
                           2205 ;	---------------------------------
                           2206 ; Function _basic_draw
                           2207 ; ---------------------------------
   089A                    2208 __basic_draw::
                           2209 ;mini_BASIC/minibasic.h:469: __endasm;	
   089A DD 21 02 00   [14] 2210 	ld	ix,#2; posicion primer parametro 
   089E DD 39         [15] 2211 	add ix,sp;
   08A0 DD 5E 00      [19] 2212 	ld	e,(ix)
   08A3 DD 56 01      [19] 2213 	ld	d, 1(ix)
   08A6 DD 6E 02      [19] 2214 	ld	l, 2(ix)
   08A9 DD 66 03      [19] 2215 	ld	h, 3(ix)
   08AC CD F6 BB      [17] 2216 	call	0xBBF6 ; GRA LlNE ABSOLUTE
   08AF C9            [10] 2217 	ret
                           2218 ;mini_BASIC/minibasic.h:471: }
   08B0 C9            [10] 2219 	ret
                           2220 ;ciclo.c:59: int  main()
                           2221 ;	---------------------------------
                           2222 ; Function main
                           2223 ; ---------------------------------
   08B1                    2224 _main::
   08B1 F5            [11] 2225 	push	af
                           2226 ;ciclo.c:62: c=0;
   08B2 21 00 00      [10] 2227 	ld	hl, #0x0000
   08B5 22r2Er00      [16] 2228 	ld	(_c), hl
                           2229 ;ciclo.c:64: fps=0;
                           2230 ;ciclo.c:65: t1=0;//_basic_time();
   08B8 2E 00         [ 7] 2231 	ld	l,#0x00
   08BA 22r5Ar00      [16] 2232 	ld	(_fps),hl
   08BD 22r54r00      [16] 2233 	ld	(_t1), hl
                           2234 ;ciclo.c:66: dir=5; //quieto
   08C0 2E 05         [ 7] 2235 	ld	l, #0x05
   08C2 22r38r00      [16] 2236 	ld	(_dir), hl
                           2237 ;ciclo.c:67: newr=0; //nueva ruta fant
   08C5 FD 21r79r00   [14] 2238 	ld	iy, #_newr
   08C9 FD 36 00 00   [19] 2239 	ld	0 (iy), #0x00
                           2240 ;ciclo.c:68: op=0; // inicializacion operacion logica precomputada
   08CD FD 21r7Ar00   [14] 2241 	ld	iy, #_op
   08D1 FD 36 00 00   [19] 2242 	ld	0 (iy), #0x00
                           2243 ;ciclo.c:69: precomp=0;
                           2244 ;ciclo.c:70: co=0;
   08D5 2E 00         [ 7] 2245 	ld	l,#0x00
   08D7 22r7Br00      [16] 2246 	ld	(_precomp),hl
   08DA 22r7Dr00      [16] 2247 	ld	(_co), hl
                           2248 ;ciclo.c:72: rf[0]=5;//derecha
   08DD 21r61r00      [10] 2249 	ld	hl, #_rf
   08E0 36 05         [10] 2250 	ld	(hl), #0x05
                           2251 ;ciclo.c:73: rf[1]=6;//izq
   08E2 21r62r00      [10] 2252 	ld	hl, #(_rf + 0x0001)
   08E5 36 06         [10] 2253 	ld	(hl), #0x06
                           2254 ;ciclo.c:74: rf[2]=6;//izq
   08E7 21r63r00      [10] 2255 	ld	hl, #(_rf + 0x0002)
   08EA 36 06         [10] 2256 	ld	(hl), #0x06
                           2257 ;ciclo.c:75: rf[3]=5;//derecha
   08EC 21r64r00      [10] 2258 	ld	hl, #(_rf + 0x0003)
   08EF 36 05         [10] 2259 	ld	(hl), #0x05
                           2260 ;ciclo.c:76: for (n=0;n<4;n++){
   08F1 21 00 00      [10] 2261 	ld	hl, #0x0000
   08F4 22r30r00      [16] 2262 	ld	(_n), hl
   08F7                    2263 00201$:
                           2264 ;ciclo.c:77: dfx[n]=27003+(27+n)*16;
   08F7 2Ar30r00      [16] 2265 	ld	hl, (_n)
   08FA 29            [11] 2266 	add	hl, hl
   08FB 7D            [ 4] 2267 	ld	a, l
   08FC C6r65         [ 7] 2268 	add	a, #<(_dfx)
   08FE 4F            [ 4] 2269 	ld	c, a
   08FF 7C            [ 4] 2270 	ld	a, h
   0900 CEs00         [ 7] 2271 	adc	a, #>(_dfx)
   0902 47            [ 4] 2272 	ld	b, a
   0903 FD 21r30r00   [14] 2273 	ld	iy, #_n
   0907 FD 7E 00      [19] 2274 	ld	a, 0 (iy)
   090A C6 1B         [ 7] 2275 	add	a, #0x1b
   090C 6F            [ 4] 2276 	ld	l, a
   090D FD 7E 01      [19] 2277 	ld	a, 1 (iy)
   0910 CE 00         [ 7] 2278 	adc	a, #0x00
   0912 67            [ 4] 2279 	ld	h, a
   0913 29            [11] 2280 	add	hl, hl
   0914 29            [11] 2281 	add	hl, hl
   0915 29            [11] 2282 	add	hl, hl
   0916 29            [11] 2283 	add	hl, hl
   0917 EB            [ 4] 2284 	ex	de,hl
   0918 21 7B 69      [10] 2285 	ld	hl, #0x697b
   091B 19            [11] 2286 	add	hl, de
   091C EB            [ 4] 2287 	ex	de, hl
   091D 7B            [ 4] 2288 	ld	a, e
   091E 02            [ 7] 2289 	ld	(bc), a
   091F 03            [ 6] 2290 	inc	bc
   0920 7A            [ 4] 2291 	ld	a, d
   0921 02            [ 7] 2292 	ld	(bc), a
                           2293 ;ciclo.c:78: dfy[n]=27001+(27+n)*16;
   0922 2Ar30r00      [16] 2294 	ld	hl, (_n)
   0925 29            [11] 2295 	add	hl, hl
   0926 3Er6D         [ 7] 2296 	ld	a, #<(_dfy)
   0928 85            [ 4] 2297 	add	a, l
   0929 4F            [ 4] 2298 	ld	c, a
   092A 3Es00         [ 7] 2299 	ld	a, #>(_dfy)
   092C 8C            [ 4] 2300 	adc	a, h
   092D 47            [ 4] 2301 	ld	b, a
   092E FD 7E 00      [19] 2302 	ld	a, 0 (iy)
   0931 C6 1B         [ 7] 2303 	add	a, #0x1b
   0933 6F            [ 4] 2304 	ld	l, a
   0934 FD 7E 01      [19] 2305 	ld	a, 1 (iy)
   0937 CE 00         [ 7] 2306 	adc	a, #0x00
   0939 67            [ 4] 2307 	ld	h, a
   093A 29            [11] 2308 	add	hl, hl
   093B 29            [11] 2309 	add	hl, hl
   093C 29            [11] 2310 	add	hl, hl
   093D 29            [11] 2311 	add	hl, hl
   093E EB            [ 4] 2312 	ex	de,hl
   093F 21 79 69      [10] 2313 	ld	hl, #0x6979
   0942 19            [11] 2314 	add	hl, de
   0943 EB            [ 4] 2315 	ex	de, hl
   0944 7B            [ 4] 2316 	ld	a, e
   0945 02            [ 7] 2317 	ld	(bc), a
   0946 03            [ 6] 2318 	inc	bc
   0947 7A            [ 4] 2319 	ld	a, d
   0948 02            [ 7] 2320 	ld	(bc), a
                           2321 ;ciclo.c:76: for (n=0;n<4;n++){
   0949 2Ar30r00      [16] 2322 	ld	hl, (_n)
   094C 23            [ 6] 2323 	inc	hl
   094D 22r30r00      [16] 2324 	ld	(_n), hl
   0950 FD 7E 00      [19] 2325 	ld	a, 0 (iy)
   0953 D6 04         [ 7] 2326 	sub	a, #0x04
   0955 FD 7E 01      [19] 2327 	ld	a, 1 (iy)
   0958 17            [ 4] 2328 	rla
   0959 3F            [ 4] 2329 	ccf
   095A 1F            [ 4] 2330 	rra
   095B DE 80         [ 7] 2331 	sbc	a, #0x80
   095D 38 98         [12] 2332 	jr	C,00201$
                           2333 ;ciclo.c:83: _8BP_printspall_4(0,0,0,0);
   095F 21 00 00      [10] 2334 	ld	hl, #0x0000
   0962 E5            [11] 2335 	push	hl
   0963 2E 00         [ 7] 2336 	ld	l, #0x00
   0965 E5            [11] 2337 	push	hl
   0966 2E 00         [ 7] 2338 	ld	l, #0x00
   0968 E5            [11] 2339 	push	hl
   0969 2E 00         [ 7] 2340 	ld	l, #0x00
   096B E5            [11] 2341 	push	hl
   096C CDrEFr02      [17] 2342 	call	__8BP_printspall_4
   096F F1            [10] 2343 	pop	af
   0970 F1            [10] 2344 	pop	af
   0971 F1            [10] 2345 	pop	af
                           2346 ;ciclo.c:85: _8BP_colsp_2(33,&cod);
   0972 21r3Ar00      [10] 2347 	ld	hl, #_cod
   0975 E3            [19] 2348 	ex	(sp),hl
   0976 21 21 00      [10] 2349 	ld	hl, #0x0021
   0979 E5            [11] 2350 	push	hl
   097A CDr16r01      [17] 2351 	call	__8BP_colsp_2
   097D F1            [10] 2352 	pop	af
                           2353 ;ciclo.c:86: _8BP_colay_3(62, &col,31); 
   097E 21 1F 00      [10] 2354 	ld	hl, #0x001f
   0981 E3            [19] 2355 	ex	(sp),hl
   0982 21r3Er00      [10] 2356 	ld	hl, #_col
   0985 E5            [11] 2357 	push	hl
   0986 21 3E 00      [10] 2358 	ld	hl, #0x003e
   0989 E5            [11] 2359 	push	hl
   098A CDrB0r00      [17] 2360 	call	__8BP_colay_3
   098D F1            [10] 2361 	pop	af
   098E F1            [10] 2362 	pop	af
                           2363 ;ciclo.c:87: _8BP_colay_1(31);
   098F 21 1F 00      [10] 2364 	ld	hl, #0x001f
   0992 E3            [19] 2365 	ex	(sp),hl
   0993 CDrA4r00      [17] 2366 	call	__8BP_colay_1
                           2367 ;ciclo.c:92: _8BP_peek_2(17900,&scr_dir); scr=(int*)scr_dir;
   0996 21r42r00      [10] 2368 	ld	hl, #_scr_dir
   0999 E3            [19] 2369 	ex	(sp),hl
   099A 21 EC 45      [10] 2370 	ld	hl, #0x45ec
   099D E5            [11] 2371 	push	hl
   099E CDr47r05      [17] 2372 	call	__8BP_peek_2
   09A1 F1            [10] 2373 	pop	af
   09A2 F1            [10] 2374 	pop	af
   09A3 2Ar42r00      [16] 2375 	ld	hl, (_scr_dir)
   09A6 22r40r00      [16] 2376 	ld	(_scr), hl
                           2377 ;ciclo.c:93: _8BP_peek_2(17902,&target_dir);target=(int*)target_dir;
   09A9 21r46r00      [10] 2378 	ld	hl, #_target_dir
   09AC E5            [11] 2379 	push	hl
   09AD 21 EE 45      [10] 2380 	ld	hl, #0x45ee
   09B0 E5            [11] 2381 	push	hl
   09B1 CDr47r05      [17] 2382 	call	__8BP_peek_2
   09B4 F1            [10] 2383 	pop	af
   09B5 F1            [10] 2384 	pop	af
   09B6 2Ar46r00      [16] 2385 	ld	hl, (_target_dir)
   09B9 22r44r00      [16] 2386 	ld	(_target), hl
                           2387 ;ciclo.c:94: _8BP_peek_2(17904,&music_dir);music=(int*)music_dir;
   09BC 21r52r00      [10] 2388 	ld	hl, #_music_dir
   09BF E5            [11] 2389 	push	hl
   09C0 21 F0 45      [10] 2390 	ld	hl, #0x45f0
   09C3 E5            [11] 2391 	push	hl
   09C4 CDr47r05      [17] 2392 	call	__8BP_peek_2
   09C7 F1            [10] 2393 	pop	af
   09C8 F1            [10] 2394 	pop	af
   09C9 2Ar52r00      [16] 2395 	ld	hl, (_music_dir)
   09CC 22r50r00      [16] 2396 	ld	(_music), hl
                           2397 ;ciclo.c:95: _8BP_peek_2(17906,&hi_dir); hi=(int*)hi_dir;
   09CF 21r4Ar00      [10] 2398 	ld	hl, #_hi_dir
   09D2 E5            [11] 2399 	push	hl
   09D3 21 F2 45      [10] 2400 	ld	hl, #0x45f2
   09D6 E5            [11] 2401 	push	hl
   09D7 CDr47r05      [17] 2402 	call	__8BP_peek_2
   09DA F1            [10] 2403 	pop	af
   09DB F1            [10] 2404 	pop	af
   09DC 2Ar4Ar00      [16] 2405 	ld	hl, (_hi_dir)
   09DF 22r48r00      [16] 2406 	ld	(_hi), hl
                           2407 ;ciclo.c:96: _8BP_peek_2(17908,&flaghi_dir);flaghi=(int*)flaghi_dir;
   09E2 21r4Er00      [10] 2408 	ld	hl, #_flaghi_dir
   09E5 E5            [11] 2409 	push	hl
   09E6 21 F4 45      [10] 2410 	ld	hl, #0x45f4
   09E9 E5            [11] 2411 	push	hl
   09EA CDr47r05      [17] 2412 	call	__8BP_peek_2
   09ED F1            [10] 2413 	pop	af
   09EE F1            [10] 2414 	pop	af
   09EF 2Ar4Er00      [16] 2415 	ld	hl, (_flaghi_dir)
   09F2 22r4Cr00      [16] 2416 	ld	(_flaghi), hl
                           2417 ;ciclo.c:97: _8BP_peek_2(17914,&precomp);// precomputed logic
   09F5 21r7Br00      [10] 2418 	ld	hl, #_precomp
   09F8 E5            [11] 2419 	push	hl
   09F9 21 FA 45      [10] 2420 	ld	hl, #0x45fa
   09FC E5            [11] 2421 	push	hl
   09FD CDr47r05      [17] 2422 	call	__8BP_peek_2
   0A00 F1            [10] 2423 	pop	af
                           2424 ;ciclo.c:100: _8BP_peek_2(27499,&x);
   0A01 21r32r00      [10] 2425 	ld	hl, #_x
   0A04 E3            [19] 2426 	ex	(sp),hl
   0A05 21 6B 6B      [10] 2427 	ld	hl, #0x6b6b
   0A08 E5            [11] 2428 	push	hl
   0A09 CDr47r05      [17] 2429 	call	__8BP_peek_2
   0A0C F1            [10] 2430 	pop	af
                           2431 ;ciclo.c:101: _8BP_peek_2(27497,&y);
   0A0D 21r34r00      [10] 2432 	ld	hl, #_y
   0A10 E3            [19] 2433 	ex	(sp),hl
   0A11 21 69 6B      [10] 2434 	ld	hl, #0x6b69
   0A14 E5            [11] 2435 	push	hl
   0A15 CDr47r05      [17] 2436 	call	__8BP_peek_2
   0A18 F1            [10] 2437 	pop	af
   0A19 F1            [10] 2438 	pop	af
                           2439 ;ciclo.c:103: t1=_basic_time();
   0A1A CDr35r06      [17] 2440 	call	__basic_time
   0A1D 22r54r00      [16] 2441 	ld	(_t1), hl
                           2442 ;ciclo.c:116: label_CICLO:
   0A20                    2443 00102$:
                           2444 ;ciclo.c:118: c=c+1;//if (c==2000) {_8BP_poke_2(17910,0);_8BP_poke_2(17912,c);return 0;}
   0A20 2Ar2Er00      [16] 2445 	ld	hl, (_c)
   0A23 23            [ 6] 2446 	inc	hl
   0A24 22r2Er00      [16] 2447 	ld	(_c), hl
                           2448 ;ciclo.c:119: n=c & 3;
   0A27 3Ar2Er00      [13] 2449 	ld	a,(#_c + 0)
   0A2A E6 03         [ 7] 2450 	and	a, #0x03
   0A2C 32r30r00      [13] 2451 	ld	(_n+0), a
   0A2F 21r31r00      [10] 2452 	ld	hl,#_n + 1
   0A32 36 00         [10] 2453 	ld	(hl), #0x00
                           2454 ;ciclo.c:121: _8BP_autoall();
   0A34 CDr67r00      [17] 2455 	call	__8BP_autoall
                           2456 ;ciclo.c:122: if ((n & 1) >0 ) goto label_1340;//colision fantasmas(=1) y puntos (n=3)
   0A37 3Ar30r00      [13] 2457 	ld	a,(#_n + 0)
   0A3A E6 01         [ 7] 2458 	and	a, #0x01
   0A3C 4F            [ 4] 2459 	ld	c, a
   0A3D 06 00         [ 7] 2460 	ld	b, #0x00
   0A3F AF            [ 4] 2461 	xor	a, a
   0A40 B9            [ 4] 2462 	cp	a, c
   0A41 98            [ 4] 2463 	sbc	a, b
   0A42 E2r47r0A      [10] 2464 	jp	PO, 00412$
   0A45 EE 80         [ 7] 2465 	xor	a, #0x80
   0A47                    2466 00412$:
   0A47 FAr13r0D      [10] 2467 	jp	M, 00152$
                           2468 ;ciclo.c:123: if (n>0) goto label_1190; //colay (n=2)
   0A4A AF            [ 4] 2469 	xor	a, a
   0A4B FD 21r30r00   [14] 2470 	ld	iy, #_n
   0A4F FD BE 00      [19] 2471 	cp	a, 0 (iy)
   0A52 FD 9E 01      [19] 2472 	sbc	a, 1 (iy)
   0A55 E2r5Ar0A      [10] 2473 	jp	PO, 00413$
   0A58 EE 80         [ 7] 2474 	xor	a, #0x80
   0A5A                    2475 00413$:
   0A5A F2rFAr0A      [10] 2476 	jp	P, 00120$
                           2477 ;ciclo.c:130: _8BP_colay_1(31);
   0A5D 21 1F 00      [10] 2478 	ld	hl, #0x001f
   0A60 E5            [11] 2479 	push	hl
   0A61 CDrA4r00      [17] 2480 	call	__8BP_colay_1
   0A64 F1            [10] 2481 	pop	af
                           2482 ;ciclo.c:131: if (col==0) goto label_1490;
   0A65 FD 21r3Er00   [14] 2483 	ld	iy, #_col
   0A69 FD 7E 01      [19] 2484 	ld	a, 1 (iy)
   0A6C FD B6 00      [19] 2485 	or	a, 0 (iy)
   0A6F CAr57r0F      [10] 2486 	jp	Z, 00188$
                           2487 ;ciclo.c:132: _8BP_setupsp_3(31,15,4); //ruta 4 es parado 
   0A72 21 04 00      [10] 2488 	ld	hl, #0x0004
   0A75 E5            [11] 2489 	push	hl
   0A76 2E 0F         [ 7] 2490 	ld	l, #0x0f
   0A78 E5            [11] 2491 	push	hl
   0A79 2E 1F         [ 7] 2492 	ld	l, #0x1f
   0A7B E5            [11] 2493 	push	hl
   0A7C CDrB6r03      [17] 2494 	call	__8BP_setupsp_3
   0A7F F1            [10] 2495 	pop	af
   0A80 F1            [10] 2496 	pop	af
   0A81 F1            [10] 2497 	pop	af
                           2498 ;ciclo.c:133: if (dir==1) _8BP_mover_3(31,0,1);
   0A82 FD 21r38r00   [14] 2499 	ld	iy, #_dir
   0A86 FD 7E 00      [19] 2500 	ld	a, 0 (iy)
   0A89 3D            [ 4] 2501 	dec	a
   0A8A FD B6 01      [19] 2502 	or	a, 1 (iy)
   0A8D 20 13         [12] 2503 	jr	NZ,00118$
   0A8F 21 01 00      [10] 2504 	ld	hl, #0x0001
   0A92 E5            [11] 2505 	push	hl
   0A93 2E 00         [ 7] 2506 	ld	l, #0x00
   0A95 E5            [11] 2507 	push	hl
   0A96 2E 1F         [ 7] 2508 	ld	l, #0x1f
   0A98 E5            [11] 2509 	push	hl
   0A99 CDrF2r04      [17] 2510 	call	__8BP_mover_3
   0A9C F1            [10] 2511 	pop	af
   0A9D F1            [10] 2512 	pop	af
   0A9E F1            [10] 2513 	pop	af
   0A9F C3r57r0F      [10] 2514 	jp	00188$
   0AA2                    2515 00118$:
                           2516 ;ciclo.c:134: else if (dir==2) _8BP_mover_3(31,4,0);
   0AA2 FD 21r38r00   [14] 2517 	ld	iy, #_dir
   0AA6 FD 7E 00      [19] 2518 	ld	a, 0 (iy)
   0AA9 D6 02         [ 7] 2519 	sub	a, #0x02
   0AAB FD B6 01      [19] 2520 	or	a, 1 (iy)
   0AAE 20 13         [12] 2521 	jr	NZ,00115$
   0AB0 21 00 00      [10] 2522 	ld	hl, #0x0000
   0AB3 E5            [11] 2523 	push	hl
   0AB4 2E 04         [ 7] 2524 	ld	l, #0x04
   0AB6 E5            [11] 2525 	push	hl
   0AB7 2E 1F         [ 7] 2526 	ld	l, #0x1f
   0AB9 E5            [11] 2527 	push	hl
   0ABA CDrF2r04      [17] 2528 	call	__8BP_mover_3
   0ABD F1            [10] 2529 	pop	af
   0ABE F1            [10] 2530 	pop	af
   0ABF F1            [10] 2531 	pop	af
   0AC0 C3r57r0F      [10] 2532 	jp	00188$
   0AC3                    2533 00115$:
                           2534 ;ciclo.c:135: else if (dir==3) _8BP_mover_3(31,-4,0);
   0AC3 FD 21r38r00   [14] 2535 	ld	iy, #_dir
   0AC7 FD 7E 00      [19] 2536 	ld	a, 0 (iy)
   0ACA D6 03         [ 7] 2537 	sub	a, #0x03
   0ACC FD B6 01      [19] 2538 	or	a, 1 (iy)
   0ACF 20 15         [12] 2539 	jr	NZ,00112$
   0AD1 21 00 00      [10] 2540 	ld	hl, #0x0000
   0AD4 E5            [11] 2541 	push	hl
   0AD5 21 FC FF      [10] 2542 	ld	hl, #0xfffc
   0AD8 E5            [11] 2543 	push	hl
   0AD9 21 1F 00      [10] 2544 	ld	hl, #0x001f
   0ADC E5            [11] 2545 	push	hl
   0ADD CDrF2r04      [17] 2546 	call	__8BP_mover_3
   0AE0 F1            [10] 2547 	pop	af
   0AE1 F1            [10] 2548 	pop	af
   0AE2 F1            [10] 2549 	pop	af
   0AE3 C3r57r0F      [10] 2550 	jp	00188$
   0AE6                    2551 00112$:
                           2552 ;ciclo.c:136: else _8BP_mover_3(31,0,-1); //dir=0
   0AE6 21 FF FF      [10] 2553 	ld	hl, #0xffff
   0AE9 E5            [11] 2554 	push	hl
   0AEA 21 00 00      [10] 2555 	ld	hl, #0x0000
   0AED E5            [11] 2556 	push	hl
   0AEE 2E 1F         [ 7] 2557 	ld	l, #0x1f
   0AF0 E5            [11] 2558 	push	hl
   0AF1 CDrF2r04      [17] 2559 	call	__8BP_mover_3
   0AF4 F1            [10] 2560 	pop	af
   0AF5 F1            [10] 2561 	pop	af
   0AF6 F1            [10] 2562 	pop	af
                           2563 ;ciclo.c:138: goto label_1490;
   0AF7 C3r57r0F      [10] 2564 	jp	00188$
                           2565 ;ciclo.c:142: label_1260:
   0AFA                    2566 00120$:
                           2567 ;ciclo.c:143: if (c & 63) goto label_1270;
   0AFA 3Ar2Er00      [13] 2568 	ld	a,(#_c + 0)
   0AFD E6 3F         [ 7] 2569 	and	a, #0x3f
   0AFF 20 67         [12] 2570 	jr	NZ,00123$
                           2571 ;ciclo.c:144: t2=_basic_time();
   0B01 CDr35r06      [17] 2572 	call	__basic_time
   0B04 FD 21 00 00   [14] 2573 	ld	iy, #0
   0B08 FD 39         [15] 2574 	add	iy, sp
   0B0A FD 75 00      [19] 2575 	ld	0 (iy), l
   0B0D FD 74 01      [19] 2576 	ld	1 (iy), h
   0B10 11r56r00      [10] 2577 	ld	de, #_t2
   0B13 21 00 00      [10] 2578 	ld	hl, #0
   0B16 39            [11] 2579 	add	hl, sp
   0B17 ED A0         [16] 2580 	ldi
   0B19 ED A0         [16] 2581 	ldi
                           2582 ;ciclo.c:145: fps=64*300/(t2-t1);
   0B1B 21r54r00      [10] 2583 	ld	hl, #_t1
   0B1E D5            [11] 2584 	push	de
   0B1F FD 21 02 00   [14] 2585 	ld	iy, #2
   0B23 FD 39         [15] 2586 	add	iy, sp
   0B25 FD E5         [15] 2587 	push	iy
   0B27 D1            [10] 2588 	pop	de
   0B28 FD 21r56r00   [14] 2589 	ld	iy, #_t2
   0B2C FD 7E 00      [19] 2590 	ld	a, 0 (iy)
   0B2F 96            [ 7] 2591 	sub	a, (hl)
   0B30 12            [ 7] 2592 	ld	(de), a
   0B31 FD 7E 01      [19] 2593 	ld	a, 1 (iy)
   0B34 23            [ 6] 2594 	inc	hl
   0B35 9E            [ 7] 2595 	sbc	a, (hl)
   0B36 13            [ 6] 2596 	inc	de
   0B37 12            [ 7] 2597 	ld	(de), a
   0B38 D1            [10] 2598 	pop	de
   0B39 E1            [10] 2599 	pop	hl
   0B3A E5            [11] 2600 	push	hl
   0B3B E5            [11] 2601 	push	hl
   0B3C 21 00 4B      [10] 2602 	ld	hl, #0x4b00
   0B3F E5            [11] 2603 	push	hl
   0B40 CDr00r00      [17] 2604 	call	__divsint
   0B43 F1            [10] 2605 	pop	af
   0B44 F1            [10] 2606 	pop	af
                           2607 ;ciclo.c:146: cfps=_basic_str(fps);
   0B45 22r5Ar00      [16] 2608 	ld	(_fps), hl
   0B48 E5            [11] 2609 	push	hl
   0B49 CDr29r07      [17] 2610 	call	__basic_str
   0B4C F1            [10] 2611 	pop	af
                           2612 ;ciclo.c:147: _8BP_printat_4(0,190,74,cfps);
   0B4D 22r5Cr00      [16] 2613 	ld	(_cfps), hl
   0B50 E5            [11] 2614 	push	hl
   0B51 21 4A 00      [10] 2615 	ld	hl, #0x004a
   0B54 E5            [11] 2616 	push	hl
   0B55 2E BE         [ 7] 2617 	ld	l, #0xbe
   0B57 E5            [11] 2618 	push	hl
   0B58 2E 00         [ 7] 2619 	ld	l, #0x00
   0B5A E5            [11] 2620 	push	hl
   0B5B CDr25r02      [17] 2621 	call	__8BP_printat_4
   0B5E F1            [10] 2622 	pop	af
   0B5F F1            [10] 2623 	pop	af
   0B60 F1            [10] 2624 	pop	af
   0B61 F1            [10] 2625 	pop	af
                           2626 ;ciclo.c:148: t1=t2;
   0B62 2Ar56r00      [16] 2627 	ld	hl, (_t2)
   0B65 22r54r00      [16] 2628 	ld	(_t1), hl
                           2629 ;ciclo.c:152: label_1270:
   0B68                    2630 00123$:
                           2631 ;ciclo.c:153: if (dir>0) {
   0B68 AF            [ 4] 2632 	xor	a, a
   0B69 FD 21r38r00   [14] 2633 	ld	iy, #_dir
   0B6D FD BE 00      [19] 2634 	cp	a, 0 (iy)
   0B70 FD 9E 01      [19] 2635 	sbc	a, 1 (iy)
   0B73 E2r78r0B      [10] 2636 	jp	PO, 00422$
   0B76 EE 80         [ 7] 2637 	xor	a, #0x80
   0B78                    2638 00422$:
   0B78 F2rD4r0B      [10] 2639 	jp	P, 00130$
                           2640 ;ciclo.c:154: if (_basic_inkey(27)==0){ 
   0B7B 3E 1B         [ 7] 2641 	ld	a, #0x1b
   0B7D F5            [11] 2642 	push	af
   0B7E 33            [ 6] 2643 	inc	sp
   0B7F CDr81r06      [17] 2644 	call	__basic_inkey
   0B82 33            [ 6] 2645 	inc	sp
   0B83 7D            [ 4] 2646 	ld	a, l
   0B84 B7            [ 4] 2647 	or	a, a
   0B85 20 4D         [12] 2648 	jr	NZ,00130$
                           2649 ;ciclo.c:155: _8BP_mover_3(31,0,1);_8BP_colay_1(31);_8BP_mover_3(31,0,-1);
   0B87 21 01 00      [10] 2650 	ld	hl, #0x0001
   0B8A E5            [11] 2651 	push	hl
   0B8B 2E 00         [ 7] 2652 	ld	l, #0x00
   0B8D E5            [11] 2653 	push	hl
   0B8E 2E 1F         [ 7] 2654 	ld	l, #0x1f
   0B90 E5            [11] 2655 	push	hl
   0B91 CDrF2r04      [17] 2656 	call	__8BP_mover_3
   0B94 F1            [10] 2657 	pop	af
   0B95 F1            [10] 2658 	pop	af
   0B96 21 1F 00      [10] 2659 	ld	hl, #0x001f
   0B99 E3            [19] 2660 	ex	(sp),hl
   0B9A CDrA4r00      [17] 2661 	call	__8BP_colay_1
   0B9D 21 FF FF      [10] 2662 	ld	hl, #0xffff
   0BA0 E3            [19] 2663 	ex	(sp),hl
   0BA1 21 00 00      [10] 2664 	ld	hl, #0x0000
   0BA4 E5            [11] 2665 	push	hl
   0BA5 2E 1F         [ 7] 2666 	ld	l, #0x1f
   0BA7 E5            [11] 2667 	push	hl
   0BA8 CDrF2r04      [17] 2668 	call	__8BP_mover_3
   0BAB F1            [10] 2669 	pop	af
   0BAC F1            [10] 2670 	pop	af
   0BAD F1            [10] 2671 	pop	af
                           2672 ;ciclo.c:156: if (col==0){
   0BAE FD 21r3Er00   [14] 2673 	ld	iy, #_col
   0BB2 FD 7E 01      [19] 2674 	ld	a, 1 (iy)
   0BB5 FD B6 00      [19] 2675 	or	a, 0 (iy)
   0BB8 C2r57r0F      [10] 2676 	jp	NZ, 00188$
                           2677 ;ciclo.c:157: _8BP_setupsp_3(31,15,0); dir=0;
   0BBB 21 00 00      [10] 2678 	ld	hl, #0x0000
   0BBE E5            [11] 2679 	push	hl
   0BBF 2E 0F         [ 7] 2680 	ld	l, #0x0f
   0BC1 E5            [11] 2681 	push	hl
   0BC2 2E 1F         [ 7] 2682 	ld	l, #0x1f
   0BC4 E5            [11] 2683 	push	hl
   0BC5 CDrB6r03      [17] 2684 	call	__8BP_setupsp_3
   0BC8 F1            [10] 2685 	pop	af
   0BC9 F1            [10] 2686 	pop	af
   0BCA F1            [10] 2687 	pop	af
   0BCB 21 00 00      [10] 2688 	ld	hl, #0x0000
   0BCE 22r38r00      [16] 2689 	ld	(_dir), hl
                           2690 ;ciclo.c:158: goto label_1490;
   0BD1 C3r57r0F      [10] 2691 	jp	00188$
                           2692 ;ciclo.c:160: else goto label_1490;// hay colision layout
   0BD4                    2693 00130$:
                           2694 ;ciclo.c:163: if (dir!=1){
   0BD4 FD 21r38r00   [14] 2695 	ld	iy, #_dir
   0BD8 FD 7E 00      [19] 2696 	ld	a, 0 (iy)
   0BDB 3D            [ 4] 2697 	dec	a
   0BDC FD B6 01      [19] 2698 	or	a, 1 (iy)
   0BDF 28 5A         [12] 2699 	jr	Z,00137$
                           2700 ;ciclo.c:164: if (_basic_inkey(34)==0) {
   0BE1 3E 22         [ 7] 2701 	ld	a, #0x22
   0BE3 F5            [11] 2702 	push	af
   0BE4 33            [ 6] 2703 	inc	sp
   0BE5 CDr81r06      [17] 2704 	call	__basic_inkey
   0BE8 33            [ 6] 2705 	inc	sp
   0BE9 7D            [ 4] 2706 	ld	a, l
   0BEA B7            [ 4] 2707 	or	a, a
   0BEB 20 4E         [12] 2708 	jr	NZ,00137$
                           2709 ;ciclo.c:165: _8BP_mover_3(31,0,-1);_8BP_colay_1(31);_8BP_mover_3(31,0,1);
   0BED 21 FF FF      [10] 2710 	ld	hl, #0xffff
   0BF0 E5            [11] 2711 	push	hl
   0BF1 21 00 00      [10] 2712 	ld	hl, #0x0000
   0BF4 E5            [11] 2713 	push	hl
   0BF5 2E 1F         [ 7] 2714 	ld	l, #0x1f
   0BF7 E5            [11] 2715 	push	hl
   0BF8 CDrF2r04      [17] 2716 	call	__8BP_mover_3
   0BFB F1            [10] 2717 	pop	af
   0BFC F1            [10] 2718 	pop	af
   0BFD 21 1F 00      [10] 2719 	ld	hl, #0x001f
   0C00 E3            [19] 2720 	ex	(sp),hl
   0C01 CDrA4r00      [17] 2721 	call	__8BP_colay_1
   0C04 F1            [10] 2722 	pop	af
   0C05 21 01 00      [10] 2723 	ld	hl, #0x0001
   0C08 E5            [11] 2724 	push	hl
   0C09 2E 00         [ 7] 2725 	ld	l, #0x00
   0C0B E5            [11] 2726 	push	hl
   0C0C 2E 1F         [ 7] 2727 	ld	l, #0x1f
   0C0E E5            [11] 2728 	push	hl
   0C0F CDrF2r04      [17] 2729 	call	__8BP_mover_3
   0C12 F1            [10] 2730 	pop	af
   0C13 F1            [10] 2731 	pop	af
   0C14 F1            [10] 2732 	pop	af
                           2733 ;ciclo.c:166: if (col==0){
   0C15 FD 21r3Er00   [14] 2734 	ld	iy, #_col
   0C19 FD 7E 01      [19] 2735 	ld	a, 1 (iy)
   0C1C FD B6 00      [19] 2736 	or	a, 0 (iy)
   0C1F C2r57r0F      [10] 2737 	jp	NZ, 00188$
                           2738 ;ciclo.c:167: _8BP_setupsp_3(31,15,1); dir=1;
   0C22 21 01 00      [10] 2739 	ld	hl, #0x0001
   0C25 E5            [11] 2740 	push	hl
   0C26 2E 0F         [ 7] 2741 	ld	l, #0x0f
   0C28 E5            [11] 2742 	push	hl
   0C29 2E 1F         [ 7] 2743 	ld	l, #0x1f
   0C2B E5            [11] 2744 	push	hl
   0C2C CDrB6r03      [17] 2745 	call	__8BP_setupsp_3
   0C2F F1            [10] 2746 	pop	af
   0C30 F1            [10] 2747 	pop	af
   0C31 F1            [10] 2748 	pop	af
   0C32 21 01 00      [10] 2749 	ld	hl, #0x0001
   0C35 22r38r00      [16] 2750 	ld	(_dir), hl
                           2751 ;ciclo.c:168: goto label_1490;
   0C38 C3r57r0F      [10] 2752 	jp	00188$
                           2753 ;ciclo.c:170: else goto label_1490;// hay colision layout
   0C3B                    2754 00137$:
                           2755 ;ciclo.c:173: if (dir!=2){
   0C3B FD 21r38r00   [14] 2756 	ld	iy, #_dir
   0C3F FD 7E 00      [19] 2757 	ld	a, 0 (iy)
   0C42 D6 02         [ 7] 2758 	sub	a, #0x02
   0C44 FD B6 01      [19] 2759 	or	a, 1 (iy)
   0C47 28 5B         [12] 2760 	jr	Z,00144$
                           2761 ;ciclo.c:174: if (_basic_inkey(67)==0) {
   0C49 3E 43         [ 7] 2762 	ld	a, #0x43
   0C4B F5            [11] 2763 	push	af
   0C4C 33            [ 6] 2764 	inc	sp
   0C4D CDr81r06      [17] 2765 	call	__basic_inkey
   0C50 33            [ 6] 2766 	inc	sp
   0C51 7D            [ 4] 2767 	ld	a, l
   0C52 B7            [ 4] 2768 	or	a, a
   0C53 20 4F         [12] 2769 	jr	NZ,00144$
                           2770 ;ciclo.c:175: _8BP_mover_3(31,-1,0);_8BP_colay_1(31);_8BP_mover_3(31,1,0);
   0C55 21 00 00      [10] 2771 	ld	hl, #0x0000
   0C58 E5            [11] 2772 	push	hl
   0C59 21 FF FF      [10] 2773 	ld	hl, #0xffff
   0C5C E5            [11] 2774 	push	hl
   0C5D 21 1F 00      [10] 2775 	ld	hl, #0x001f
   0C60 E5            [11] 2776 	push	hl
   0C61 CDrF2r04      [17] 2777 	call	__8BP_mover_3
   0C64 F1            [10] 2778 	pop	af
   0C65 F1            [10] 2779 	pop	af
   0C66 21 1F 00      [10] 2780 	ld	hl, #0x001f
   0C69 E3            [19] 2781 	ex	(sp),hl
   0C6A CDrA4r00      [17] 2782 	call	__8BP_colay_1
   0C6D F1            [10] 2783 	pop	af
   0C6E 21 00 00      [10] 2784 	ld	hl, #0x0000
   0C71 E5            [11] 2785 	push	hl
   0C72 2E 01         [ 7] 2786 	ld	l, #0x01
   0C74 E5            [11] 2787 	push	hl
   0C75 2E 1F         [ 7] 2788 	ld	l, #0x1f
   0C77 E5            [11] 2789 	push	hl
   0C78 CDrF2r04      [17] 2790 	call	__8BP_mover_3
   0C7B F1            [10] 2791 	pop	af
   0C7C F1            [10] 2792 	pop	af
   0C7D F1            [10] 2793 	pop	af
                           2794 ;ciclo.c:176: if (col==0){
   0C7E FD 21r3Er00   [14] 2795 	ld	iy, #_col
   0C82 FD 7E 01      [19] 2796 	ld	a, 1 (iy)
   0C85 FD B6 00      [19] 2797 	or	a, 0 (iy)
   0C88 C2r57r0F      [10] 2798 	jp	NZ, 00188$
                           2799 ;ciclo.c:177: _8BP_setupsp_3(31,15,2); dir=2;
   0C8B 21 02 00      [10] 2800 	ld	hl, #0x0002
   0C8E E5            [11] 2801 	push	hl
   0C8F 2E 0F         [ 7] 2802 	ld	l, #0x0f
   0C91 E5            [11] 2803 	push	hl
   0C92 2E 1F         [ 7] 2804 	ld	l, #0x1f
   0C94 E5            [11] 2805 	push	hl
   0C95 CDrB6r03      [17] 2806 	call	__8BP_setupsp_3
   0C98 F1            [10] 2807 	pop	af
   0C99 F1            [10] 2808 	pop	af
   0C9A F1            [10] 2809 	pop	af
   0C9B 21 02 00      [10] 2810 	ld	hl, #0x0002
   0C9E 22r38r00      [16] 2811 	ld	(_dir), hl
                           2812 ;ciclo.c:178: goto label_1490;
   0CA1 C3r57r0F      [10] 2813 	jp	00188$
                           2814 ;ciclo.c:180: else goto label_1490;// hay colision layout
   0CA4                    2815 00144$:
                           2816 ;ciclo.c:183: if (dir<3){
   0CA4 FD 21r38r00   [14] 2817 	ld	iy, #_dir
   0CA8 FD 7E 00      [19] 2818 	ld	a, 0 (iy)
   0CAB D6 03         [ 7] 2819 	sub	a, #0x03
   0CAD FD 7E 01      [19] 2820 	ld	a, 1 (iy)
   0CB0 17            [ 4] 2821 	rla
   0CB1 3F            [ 4] 2822 	ccf
   0CB2 1F            [ 4] 2823 	rra
   0CB3 DE 80         [ 7] 2824 	sbc	a, #0x80
   0CB5 D2r57r0F      [10] 2825 	jp	NC, 00188$
                           2826 ;ciclo.c:184: if (_basic_inkey(69)==0) {
   0CB8 3E 45         [ 7] 2827 	ld	a, #0x45
   0CBA F5            [11] 2828 	push	af
   0CBB 33            [ 6] 2829 	inc	sp
   0CBC CDr81r06      [17] 2830 	call	__basic_inkey
   0CBF 33            [ 6] 2831 	inc	sp
   0CC0 7D            [ 4] 2832 	ld	a, l
   0CC1 B7            [ 4] 2833 	or	a, a
   0CC2 C2r57r0F      [10] 2834 	jp	NZ, 00188$
                           2835 ;ciclo.c:185: _8BP_mover_3(31,1,0);_8BP_colay_1(31);_8BP_mover_3(31,-1,0);
   0CC5 21 00 00      [10] 2836 	ld	hl, #0x0000
   0CC8 E5            [11] 2837 	push	hl
   0CC9 2E 01         [ 7] 2838 	ld	l, #0x01
   0CCB E5            [11] 2839 	push	hl
   0CCC 2E 1F         [ 7] 2840 	ld	l, #0x1f
   0CCE E5            [11] 2841 	push	hl
   0CCF CDrF2r04      [17] 2842 	call	__8BP_mover_3
   0CD2 F1            [10] 2843 	pop	af
   0CD3 F1            [10] 2844 	pop	af
   0CD4 21 1F 00      [10] 2845 	ld	hl, #0x001f
   0CD7 E3            [19] 2846 	ex	(sp),hl
   0CD8 CDrA4r00      [17] 2847 	call	__8BP_colay_1
   0CDB 21 00 00      [10] 2848 	ld	hl, #0x0000
   0CDE E3            [19] 2849 	ex	(sp),hl
   0CDF 21 FF FF      [10] 2850 	ld	hl, #0xffff
   0CE2 E5            [11] 2851 	push	hl
   0CE3 21 1F 00      [10] 2852 	ld	hl, #0x001f
   0CE6 E5            [11] 2853 	push	hl
   0CE7 CDrF2r04      [17] 2854 	call	__8BP_mover_3
   0CEA F1            [10] 2855 	pop	af
   0CEB F1            [10] 2856 	pop	af
   0CEC F1            [10] 2857 	pop	af
                           2858 ;ciclo.c:186: if (col==0){
   0CED FD 21r3Er00   [14] 2859 	ld	iy, #_col
   0CF1 FD 7E 01      [19] 2860 	ld	a, 1 (iy)
   0CF4 FD B6 00      [19] 2861 	or	a, 0 (iy)
   0CF7 C2r57r0F      [10] 2862 	jp	NZ, 00188$
                           2863 ;ciclo.c:187: _8BP_setupsp_3(31,15,3); dir=3;
   0CFA 21 03 00      [10] 2864 	ld	hl, #0x0003
   0CFD E5            [11] 2865 	push	hl
   0CFE 2E 0F         [ 7] 2866 	ld	l, #0x0f
   0D00 E5            [11] 2867 	push	hl
   0D01 2E 1F         [ 7] 2868 	ld	l, #0x1f
   0D03 E5            [11] 2869 	push	hl
   0D04 CDrB6r03      [17] 2870 	call	__8BP_setupsp_3
   0D07 F1            [10] 2871 	pop	af
   0D08 F1            [10] 2872 	pop	af
   0D09 F1            [10] 2873 	pop	af
   0D0A 21 03 00      [10] 2874 	ld	hl, #0x0003
   0D0D 22r38r00      [16] 2875 	ld	(_dir), hl
                           2876 ;ciclo.c:188: goto label_1490;
   0D10 C3r57r0F      [10] 2877 	jp	00188$
                           2878 ;ciclo.c:195: label_1340: 
   0D13                    2879 00152$:
                           2880 ;ciclo.c:199: if (n==1) {
   0D13 FD 21r30r00   [14] 2881 	ld	iy, #_n
   0D17 FD 7E 00      [19] 2882 	ld	a, 0 (iy)
   0D1A 3D            [ 4] 2883 	dec	a
   0D1B FD B6 01      [19] 2884 	or	a, 1 (iy)
   0D1E 20 1F         [12] 2885 	jr	NZ,00157$
                           2886 ;ciclo.c:200: _8BP_colsp_1(31);
   0D20 21 1F 00      [10] 2887 	ld	hl, #0x001f
   0D23 E5            [11] 2888 	push	hl
   0D24 CDr30r01      [17] 2889 	call	__8BP_colsp_1
   0D27 F1            [10] 2890 	pop	af
                           2891 ;ciclo.c:201: if (cod<32) goto label_1810;
   0D28 FD 21r3Ar00   [14] 2892 	ld	iy, #_cod
   0D2C FD 7E 00      [19] 2893 	ld	a, 0 (iy)
   0D2F D6 20         [ 7] 2894 	sub	a, #0x20
   0D31 FD 7E 01      [19] 2895 	ld	a, 1 (iy)
   0D34 17            [ 4] 2896 	rla
   0D35 3F            [ 4] 2897 	ccf
   0D36 1F            [ 4] 2898 	rra
   0D37 DE 80         [ 7] 2899 	sbc	a, #0x80
   0D39 D2r57r0F      [10] 2900 	jp	NC, 00188$
   0D3C C3rC2r0F      [10] 2901 	jp	00194$
                           2902 ;ciclo.c:202: else goto label_1490;  
   0D3F                    2903 00157$:
                           2904 ;ciclo.c:207: _8BP_peek_2(27499,&x);
   0D3F 21r32r00      [10] 2905 	ld	hl, #_x
   0D42 E5            [11] 2906 	push	hl
   0D43 21 6B 6B      [10] 2907 	ld	hl, #0x6b6b
   0D46 E5            [11] 2908 	push	hl
   0D47 CDr47r05      [17] 2909 	call	__8BP_peek_2
   0D4A F1            [10] 2910 	pop	af
                           2911 ;ciclo.c:208: y=(int)_basic_peek(27497);
   0D4B 21 69 6B      [10] 2912 	ld	hl, #0x6b69
   0D4E E3            [19] 2913 	ex	(sp),hl
   0D4F CDr21r08      [17] 2914 	call	__basic_peek
   0D52 F1            [10] 2915 	pop	af
   0D53 7D            [ 4] 2916 	ld	a, l
   0D54 32r34r00      [13] 2917 	ld	(_y+0), a
   0D57 AF            [ 4] 2918 	xor	a, a
   0D58 32r35r00      [13] 2919 	ld	(_y+1), a
                           2920 ;ciclo.c:209: if (dir==0) {y2=y+8;x2=x+2;}
   0D5B FD 21r34r00   [14] 2921 	ld	iy, #_y
   0D5F FD 7E 00      [19] 2922 	ld	a, 0 (iy)
   0D62 C6 08         [ 7] 2923 	add	a, #0x08
   0D64 4F            [ 4] 2924 	ld	c, a
   0D65 FD 7E 01      [19] 2925 	ld	a, 1 (iy)
   0D68 CE 00         [ 7] 2926 	adc	a, #0x00
   0D6A 47            [ 4] 2927 	ld	b, a
   0D6B FD 21r38r00   [14] 2928 	ld	iy, #_dir
   0D6F FD 7E 01      [19] 2929 	ld	a, 1 (iy)
   0D72 FD B6 00      [19] 2930 	or	a, 0 (iy)
   0D75 20 0C         [12] 2931 	jr	NZ,00168$
   0D77 ED 43r36r00   [20] 2932 	ld	(_y2), bc
   0D7B ED 5Br32r00   [20] 2933 	ld	de, (_x)
   0D7F 13            [ 6] 2934 	inc	de
   0D80 13            [ 6] 2935 	inc	de
   0D81 18 71         [12] 2936 	jr	00170$
   0D83                    2937 00168$:
                           2938 ;ciclo.c:210: else if (dir==1) {y2=y+8;x2=x;}
   0D83 3Ar32r00      [13] 2939 	ld	a,(#_x + 0)
   0D86 FD 21 00 00   [14] 2940 	ld	iy, #0
   0D8A FD 39         [15] 2941 	add	iy, sp
   0D8C FD 77 00      [19] 2942 	ld	0 (iy), a
   0D8F 3Ar33r00      [13] 2943 	ld	a,(#_x + 1)
   0D92 FD 21 00 00   [14] 2944 	ld	iy, #0
   0D96 FD 39         [15] 2945 	add	iy, sp
   0D98 FD 77 01      [19] 2946 	ld	1 (iy), a
   0D9B FD 21r38r00   [14] 2947 	ld	iy, #_dir
   0D9F FD 7E 00      [19] 2948 	ld	a, 0 (iy)
   0DA2 3D            [ 4] 2949 	dec	a
   0DA3 FD B6 01      [19] 2950 	or	a, 1 (iy)
   0DA6 20 08         [12] 2951 	jr	NZ,00165$
   0DA8 ED 43r36r00   [20] 2952 	ld	(_y2), bc
   0DAC D1            [10] 2953 	pop	de
   0DAD D5            [11] 2954 	push	de
   0DAE 18 44         [12] 2955 	jr	00170$
   0DB0                    2956 00165$:
                           2957 ;ciclo.c:211: else if (dir==2)  {y2=y;;x2=x;}
   0DB0 FD 21r38r00   [14] 2958 	ld	iy, #_dir
   0DB4 FD 7E 00      [19] 2959 	ld	a, 0 (iy)
   0DB7 D6 02         [ 7] 2960 	sub	a, #0x02
   0DB9 FD B6 01      [19] 2961 	or	a, 1 (iy)
   0DBC 20 0A         [12] 2962 	jr	NZ,00162$
   0DBE 2Ar34r00      [16] 2963 	ld	hl, (_y)
   0DC1 22r36r00      [16] 2964 	ld	(_y2), hl
   0DC4 D1            [10] 2965 	pop	de
   0DC5 D5            [11] 2966 	push	de
   0DC6 18 2C         [12] 2967 	jr	00170$
   0DC8                    2968 00162$:
                           2969 ;ciclo.c:212: else if (dir==3)  {y2=y+12;x2=x;}
   0DC8 FD 21r38r00   [14] 2970 	ld	iy, #_dir
   0DCC FD 7E 00      [19] 2971 	ld	a, 0 (iy)
   0DCF D6 03         [ 7] 2972 	sub	a, #0x03
   0DD1 FD B6 01      [19] 2973 	or	a, 1 (iy)
   0DD4 20 18         [12] 2974 	jr	NZ,00159$
   0DD6 21r36r00      [10] 2975 	ld	hl, #_y2
   0DD9 FD 21r34r00   [14] 2976 	ld	iy, #_y
   0DDD FD 7E 00      [19] 2977 	ld	a, 0 (iy)
   0DE0 C6 0C         [ 7] 2978 	add	a, #0x0c
   0DE2 77            [ 7] 2979 	ld	(hl), a
   0DE3 FD 7E 01      [19] 2980 	ld	a, 1 (iy)
   0DE6 CE 00         [ 7] 2981 	adc	a, #0x00
   0DE8 23            [ 6] 2982 	inc	hl
   0DE9 77            [ 7] 2983 	ld	(hl), a
   0DEA D1            [10] 2984 	pop	de
   0DEB D5            [11] 2985 	push	de
   0DEC 18 06         [12] 2986 	jr	00170$
   0DEE                    2987 00159$:
                           2988 ;ciclo.c:213: else {y2=y+8;x2=x;}//dir 4?
   0DEE ED 43r36r00   [20] 2989 	ld	(_y2), bc
   0DF2 D1            [10] 2990 	pop	de
   0DF3 D5            [11] 2991 	push	de
                           2992 ;ciclo.c:214: label_1400:
   0DF4                    2993 00170$:
                           2994 ;ciclo.c:217: d= 0xA438 + ((y2+3)/8)*20 + (x2+1)/4;//los ajustes son para simular division / basic que es float con CINT 
   0DF4 ED 4Br36r00   [20] 2995 	ld	bc, (_y2)
   0DF8 03            [ 6] 2996 	inc	bc
   0DF9 03            [ 6] 2997 	inc	bc
   0DFA 03            [ 6] 2998 	inc	bc
   0DFB 69            [ 4] 2999 	ld	l, c
   0DFC 60            [ 4] 3000 	ld	h, b
   0DFD CB 78         [ 8] 3001 	bit	7, b
   0DFF 28 04         [12] 3002 	jr	Z,00205$
   0E01 21 07 00      [10] 3003 	ld	hl, #0x0007
   0E04 09            [11] 3004 	add	hl, bc
   0E05                    3005 00205$:
   0E05 06 03         [ 7] 3006 	ld	b, #0x03
   0E07                    3007 00433$:
   0E07 CB 2C         [ 8] 3008 	sra	h
   0E09 CB 1D         [ 8] 3009 	rr	l
   0E0B 10 FA         [13] 3010 	djnz	00433$
   0E0D 4D            [ 4] 3011 	ld	c, l
   0E0E 44            [ 4] 3012 	ld	b, h
   0E0F 29            [11] 3013 	add	hl, hl
   0E10 29            [11] 3014 	add	hl, hl
   0E11 09            [11] 3015 	add	hl, bc
   0E12 29            [11] 3016 	add	hl, hl
   0E13 29            [11] 3017 	add	hl, hl
   0E14 01 38 A4      [10] 3018 	ld	bc, #0xa438
   0E17 09            [11] 3019 	add	hl,bc
   0E18 4D            [ 4] 3020 	ld	c, l
   0E19 44            [ 4] 3021 	ld	b, h
   0E1A EB            [ 4] 3022 	ex	de,hl
   0E1B 23            [ 6] 3023 	inc	hl
   0E1C 5D            [ 4] 3024 	ld	e, l
   0E1D 54            [ 4] 3025 	ld	d, h
   0E1E CB 7C         [ 8] 3026 	bit	7, h
   0E20 28 04         [12] 3027 	jr	Z,00206$
   0E22 EB            [ 4] 3028 	ex	de,hl
   0E23 13            [ 6] 3029 	inc	de
   0E24 13            [ 6] 3030 	inc	de
   0E25 13            [ 6] 3031 	inc	de
   0E26                    3032 00206$:
   0E26 CB 2A         [ 8] 3033 	sra	d
   0E28 CB 1B         [ 8] 3034 	rr	e
   0E2A CB 2A         [ 8] 3035 	sra	d
   0E2C CB 1B         [ 8] 3036 	rr	e
   0E2E 79            [ 4] 3037 	ld	a, c
   0E2F 21r58r00      [10] 3038 	ld	hl, #_d
   0E32 83            [ 4] 3039 	add	a, e
   0E33 77            [ 7] 3040 	ld	(hl), a
   0E34 78            [ 4] 3041 	ld	a, b
   0E35 8A            [ 4] 3042 	adc	a, d
   0E36 23            [ 6] 3043 	inc	hl
   0E37 77            [ 7] 3044 	ld	(hl), a
                           3045 ;ciclo.c:218: dato=_basic_peek(d);
   0E38 2Ar58r00      [16] 3046 	ld	hl, (_d)
   0E3B E5            [11] 3047 	push	hl
   0E3C CDr21r08      [17] 3048 	call	__basic_peek
   0E3F F1            [10] 3049 	pop	af
   0E40 7D            [ 4] 3050 	ld	a, l
   0E41 32r5Er00      [13] 3051 	ld	(_dato+0), a
                           3052 ;ciclo.c:235: if (_basic_inkey(38)==0){
   0E44 3E 26         [ 7] 3053 	ld	a, #0x26
   0E46 F5            [11] 3054 	push	af
   0E47 33            [ 6] 3055 	inc	sp
   0E48 CDr81r06      [17] 3056 	call	__basic_inkey
   0E4B 33            [ 6] 3057 	inc	sp
   0E4C 7D            [ 4] 3058 	ld	a, l
   0E4D B7            [ 4] 3059 	or	a, a
   0E4E 20 2E         [12] 3060 	jr	NZ,00175$
                           3061 ;ciclo.c:236: if (*music==1) {*music=0;_8BP_music();}
   0E50 2Ar50r00      [16] 3062 	ld	hl, (_music)
   0E53 4E            [ 7] 3063 	ld	c, (hl)
   0E54 23            [ 6] 3064 	inc	hl
   0E55 46            [ 7] 3065 	ld	b, (hl)
   0E56 2B            [ 6] 3066 	dec	hl
   0E57 79            [ 4] 3067 	ld	a, c
   0E58 3D            [ 4] 3068 	dec	a
   0E59 B0            [ 4] 3069 	or	a, b
   0E5A 20 09         [12] 3070 	jr	NZ,00172$
   0E5C AF            [ 4] 3071 	xor	a, a
   0E5D 77            [ 7] 3072 	ld	(hl), a
   0E5E 23            [ 6] 3073 	inc	hl
   0E5F 77            [ 7] 3074 	ld	(hl), a
   0E60 CDrF0r01      [17] 3075 	call	__8BP_music
   0E63 18 19         [12] 3076 	jr	00175$
   0E65                    3077 00172$:
                           3078 ;ciclo.c:237: else {*music=1;_8BP_music_4(0,0,0,6);}
   0E65 36 01         [10] 3079 	ld	(hl), #0x01
   0E67 23            [ 6] 3080 	inc	hl
   0E68 36 00         [10] 3081 	ld	(hl), #0x00
   0E6A 21 06 00      [10] 3082 	ld	hl, #0x0006
   0E6D E5            [11] 3083 	push	hl
   0E6E 2E 00         [ 7] 3084 	ld	l, #0x00
   0E70 E5            [11] 3085 	push	hl
   0E71 2E 00         [ 7] 3086 	ld	l, #0x00
   0E73 E5            [11] 3087 	push	hl
   0E74 2E 00         [ 7] 3088 	ld	l, #0x00
   0E76 E5            [11] 3089 	push	hl
   0E77 CDrC0r01      [17] 3090 	call	__8BP_music_4
   0E7A F1            [10] 3091 	pop	af
   0E7B F1            [10] 3092 	pop	af
   0E7C F1            [10] 3093 	pop	af
   0E7D F1            [10] 3094 	pop	af
   0E7E                    3095 00175$:
                           3096 ;ciclo.c:239: if (dato<60) {if (dato>32) goto label_1440; else goto label_1490;}
   0E7E FD 21r5Er00   [14] 3097 	ld	iy, #_dato
   0E82 FD 7E 00      [19] 3098 	ld	a, 0 (iy)
   0E85 D6 3C         [ 7] 3099 	sub	a, #0x3c
   0E87 30 08         [12] 3100 	jr	NC,00181$
   0E89 3E 20         [ 7] 3101 	ld	a, #0x20
   0E8B FD 96 00      [19] 3102 	sub	a, 0 (iy)
   0E8E D2r57r0F      [10] 3103 	jp	NC, 00188$
                           3104 ;ciclo.c:242: label_1440:
   0E91                    3105 00181$:
                           3106 ;ciclo.c:243: _basic_poke(d,32); 
   0E91 3E 20         [ 7] 3107 	ld	a, #0x20
   0E93 F5            [11] 3108 	push	af
   0E94 33            [ 6] 3109 	inc	sp
   0E95 2Ar58r00      [16] 3110 	ld	hl, (_d)
   0E98 E5            [11] 3111 	push	hl
   0E99 CDr33r08      [17] 3112 	call	__basic_poke
   0E9C F1            [10] 3113 	pop	af
   0E9D 33            [ 6] 3114 	inc	sp
                           3115 ;ciclo.c:245: *scr=(*scr)+1;
   0E9E ED 4Br40r00   [20] 3116 	ld	bc, (_scr)
   0EA2 69            [ 4] 3117 	ld	l, c
   0EA3 60            [ 4] 3118 	ld	h, b
   0EA4 5E            [ 7] 3119 	ld	e, (hl)
   0EA5 23            [ 6] 3120 	inc	hl
   0EA6 56            [ 7] 3121 	ld	d, (hl)
   0EA7 13            [ 6] 3122 	inc	de
   0EA8 7B            [ 4] 3123 	ld	a, e
   0EA9 02            [ 7] 3124 	ld	(bc), a
   0EAA 03            [ 6] 3125 	inc	bc
   0EAB 7A            [ 4] 3126 	ld	a, d
   0EAC 02            [ 7] 3127 	ld	(bc), a
                           3128 ;ciclo.c:246: cad=_basic_str(*scr);
   0EAD 2Ar40r00      [16] 3129 	ld	hl, (_scr)
   0EB0 4E            [ 7] 3130 	ld	c, (hl)
   0EB1 23            [ 6] 3131 	inc	hl
   0EB2 46            [ 7] 3132 	ld	b, (hl)
   0EB3 C5            [11] 3133 	push	bc
   0EB4 CDr29r07      [17] 3134 	call	__basic_str
   0EB7 F1            [10] 3135 	pop	af
                           3136 ;ciclo.c:247: _8BP_printat_4(0,0,62,cad);
   0EB8 22r5Fr00      [16] 3137 	ld	(_cad), hl
   0EBB E5            [11] 3138 	push	hl
   0EBC 21 3E 00      [10] 3139 	ld	hl, #0x003e
   0EBF E5            [11] 3140 	push	hl
   0EC0 2E 00         [ 7] 3141 	ld	l, #0x00
   0EC2 E5            [11] 3142 	push	hl
   0EC3 2E 00         [ 7] 3143 	ld	l, #0x00
   0EC5 E5            [11] 3144 	push	hl
   0EC6 CDr25r02      [17] 3145 	call	__8BP_printat_4
   0EC9 F1            [10] 3146 	pop	af
   0ECA F1            [10] 3147 	pop	af
   0ECB F1            [10] 3148 	pop	af
   0ECC F1            [10] 3149 	pop	af
                           3150 ;ciclo.c:248: if (*music==0) _basic_sound(4,400,10,15,0,1,0);
   0ECD 2Ar50r00      [16] 3151 	ld	hl, (_music)
   0ED0 7E            [ 7] 3152 	ld	a, (hl)
   0ED1 23            [ 6] 3153 	inc	hl
   0ED2 4E            [ 7] 3154 	ld	c, (hl)
   0ED3 B1            [ 4] 3155 	or	a, c
   0ED4 20 1E         [12] 3156 	jr	NZ,00183$
   0ED6 AF            [ 4] 3157 	xor	a, a
   0ED7 57            [ 4] 3158 	ld	d,a
   0ED8 1E 01         [ 7] 3159 	ld	e,#0x01
   0EDA D5            [11] 3160 	push	de
   0EDB AF            [ 4] 3161 	xor	a, a
   0EDC 57            [ 4] 3162 	ld	d,a
   0EDD 1E 0F         [ 7] 3163 	ld	e,#0x0f
   0EDF D5            [11] 3164 	push	de
   0EE0 21 0A 00      [10] 3165 	ld	hl, #0x000a
   0EE3 E5            [11] 3166 	push	hl
   0EE4 21 90 01      [10] 3167 	ld	hl, #0x0190
   0EE7 E5            [11] 3168 	push	hl
   0EE8 3E 04         [ 7] 3169 	ld	a, #0x04
   0EEA F5            [11] 3170 	push	af
   0EEB 33            [ 6] 3171 	inc	sp
   0EEC CDrD3r07      [17] 3172 	call	__basic_sound
   0EEF 21 09 00      [10] 3173 	ld	hl, #9
   0EF2 39            [11] 3174 	add	hl, sp
   0EF3 F9            [ 6] 3175 	ld	sp, hl
   0EF4                    3176 00183$:
                           3177 ;ciclo.c:245: *scr=(*scr)+1;
   0EF4 2Ar40r00      [16] 3178 	ld	hl, (_scr)
   0EF7 4E            [ 7] 3179 	ld	c, (hl)
   0EF8 23            [ 6] 3180 	inc	hl
   0EF9 46            [ 7] 3181 	ld	b, (hl)
                           3182 ;ciclo.c:250: if ((*scr)==(*target)) {goto label_2060;}
   0EFA 2Ar44r00      [16] 3183 	ld	hl, (_target)
   0EFD 5E            [ 7] 3184 	ld	e, (hl)
   0EFE 23            [ 6] 3185 	inc	hl
   0EFF 56            [ 7] 3186 	ld	d, (hl)
   0F00 EB            [ 4] 3187 	ex	de,hl
   0F01 BF            [ 4] 3188 	cp	a, a
   0F02 ED 42         [15] 3189 	sbc	hl, bc
   0F04 CAr25r10      [10] 3190 	jp	Z,00200$
                           3191 ;ciclo.c:251: if ((*hi)>(*scr)) goto label_1490;
   0F07 2Ar48r00      [16] 3192 	ld	hl, (_hi)
   0F0A 5E            [ 7] 3193 	ld	e, (hl)
   0F0B 23            [ 6] 3194 	inc	hl
   0F0C 56            [ 7] 3195 	ld	d, (hl)
   0F0D 79            [ 4] 3196 	ld	a, c
   0F0E 93            [ 4] 3197 	sub	a, e
   0F0F 78            [ 4] 3198 	ld	a, b
   0F10 9A            [ 4] 3199 	sbc	a, d
   0F11 E2r16r0F      [10] 3200 	jp	PO, 00437$
   0F14 EE 80         [ 7] 3201 	xor	a, #0x80
   0F16                    3202 00437$:
   0F16 FAr57r0F      [10] 3203 	jp	M, 00188$
                           3204 ;ciclo.c:252: _basic_pen_txt(2);
   0F19 3E 02         [ 7] 3205 	ld	a, #0x02
   0F1B F5            [11] 3206 	push	af
   0F1C 33            [ 6] 3207 	inc	sp
   0F1D CDr45r08      [17] 3208 	call	__basic_pen_txt
   0F20 33            [ 6] 3209 	inc	sp
                           3210 ;ciclo.c:253: _basic_locate(18,14);_basic_print("NEW");
   0F21 21 0E 00      [10] 3211 	ld	hl, #0x000e
   0F24 E5            [11] 3212 	push	hl
   0F25 2E 12         [ 7] 3213 	ld	l, #0x12
   0F27 E5            [11] 3214 	push	hl
   0F28 CDrC3r07      [17] 3215 	call	__basic_locate
   0F2B F1            [10] 3216 	pop	af
   0F2C 21r44r10      [10] 3217 	ld	hl, #___str_1
   0F2F E3            [19] 3218 	ex	(sp),hl
   0F30 CDr6Fr06      [17] 3219 	call	__basic_print
   0F33 F1            [10] 3220 	pop	af
                           3221 ;ciclo.c:254: _basic_locate(16,15);_basic_print("HI-SCORE");
   0F34 21 0F 00      [10] 3222 	ld	hl, #0x000f
   0F37 E5            [11] 3223 	push	hl
   0F38 2E 10         [ 7] 3224 	ld	l, #0x10
   0F3A E5            [11] 3225 	push	hl
   0F3B CDrC3r07      [17] 3226 	call	__basic_locate
   0F3E F1            [10] 3227 	pop	af
   0F3F 21r48r10      [10] 3228 	ld	hl, #___str_2
   0F42 E3            [19] 3229 	ex	(sp),hl
   0F43 CDr6Fr06      [17] 3230 	call	__basic_print
   0F46 F1            [10] 3231 	pop	af
                           3232 ;ciclo.c:255: *hi=30000;
   0F47 2Ar48r00      [16] 3233 	ld	hl, (_hi)
   0F4A 36 30         [10] 3234 	ld	(hl), #0x30
   0F4C 23            [ 6] 3235 	inc	hl
   0F4D 36 75         [10] 3236 	ld	(hl), #0x75
                           3237 ;ciclo.c:256: *flaghi=1;
   0F4F 2Ar4Cr00      [16] 3238 	ld	hl, (_flaghi)
   0F52 36 01         [10] 3239 	ld	(hl), #0x01
   0F54 23            [ 6] 3240 	inc	hl
   0F55 36 00         [10] 3241 	ld	(hl), #0x00
                           3242 ;ciclo.c:260: label_1490:
   0F57                    3243 00188$:
                           3244 ;ciclo.c:261: id=27+n;
   0F57 21r75r00      [10] 3245 	ld	hl, #_id
   0F5A FD 21r30r00   [14] 3246 	ld	iy, #_n
   0F5E FD 7E 00      [19] 3247 	ld	a, 0 (iy)
   0F61 C6 1B         [ 7] 3248 	add	a, #0x1b
   0F63 77            [ 7] 3249 	ld	(hl), a
   0F64 FD 7E 01      [19] 3250 	ld	a, 1 (iy)
   0F67 CE 00         [ 7] 3251 	adc	a, #0x00
   0F69 23            [ 6] 3252 	inc	hl
   0F6A 77            [ 7] 3253 	ld	(hl), a
                           3254 ;ciclo.c:262: if (precomp==0) logica_fantasma(id);
   0F6B FD 21r7Br00   [14] 3255 	ld	iy, #_precomp
   0F6F FD 7E 01      [19] 3256 	ld	a, 1 (iy)
   0F72 FD B6 00      [19] 3257 	or	a, 0 (iy)
   0F75 20 0A         [12] 3258 	jr	NZ,00192$
   0F77 2Ar75r00      [16] 3259 	ld	hl, (_id)
   0F7A E5            [11] 3260 	push	hl
   0F7B CDr51r10      [17] 3261 	call	_logica_fantasma
   0F7E F1            [10] 3262 	pop	af
   0F7F 18 3B         [12] 3263 	jr	00193$
   0F81                    3264 00192$:
                           3265 ;ciclo.c:264: res =logica_fantasma_precomputed(id);
   0F81 2Ar75r00      [16] 3266 	ld	hl, (_id)
   0F84 E5            [11] 3267 	push	hl
   0F85 CDr67r15      [17] 3268 	call	_logica_fantasma_precomputed
   0F88 F1            [10] 3269 	pop	af
   0F89 22r7Fr00      [16] 3270 	ld	(_res), hl
                           3271 ;ciclo.c:265: if (res==-1) {
   0F8C FD 21r7Fr00   [14] 3272 	ld	iy, #_res
   0F90 FD 7E 00      [19] 3273 	ld	a, 0 (iy)
   0F93 3C            [ 4] 3274 	inc	a
   0F94 20 26         [12] 3275 	jr	NZ,00193$
   0F96 FD 7E 01      [19] 3276 	ld	a, 1 (iy)
   0F99 3C            [ 4] 3277 	inc	a
   0F9A 20 20         [12] 3278 	jr	NZ,00193$
                           3279 ;ciclo.c:266: _8BP_poke_2(17910,0);//muerte como si fantasma
   0F9C 21 00 00      [10] 3280 	ld	hl, #0x0000
   0F9F E5            [11] 3281 	push	hl
   0FA0 21 F6 45      [10] 3282 	ld	hl, #0x45f6
   0FA3 E5            [11] 3283 	push	hl
   0FA4 CDr60r05      [17] 3284 	call	__8BP_poke_2
   0FA7 F1            [10] 3285 	pop	af
   0FA8 F1            [10] 3286 	pop	af
                           3287 ;ciclo.c:267: _8BP_poke_2(17912,c);
   0FA9 2Ar2Er00      [16] 3288 	ld	hl, (_c)
   0FAC E5            [11] 3289 	push	hl
   0FAD 21 F8 45      [10] 3290 	ld	hl, #0x45f8
   0FB0 E5            [11] 3291 	push	hl
   0FB1 CDr60r05      [17] 3292 	call	__8BP_poke_2
   0FB4 F1            [10] 3293 	pop	af
   0FB5 F1            [10] 3294 	pop	af
                           3295 ;ciclo.c:268: return 0;
   0FB6 21 00 00      [10] 3296 	ld	hl, #0x0000
   0FB9 C3r42r10      [10] 3297 	jp	00203$
   0FBC                    3298 00193$:
                           3299 ;ciclo.c:273: _8BP_printspall();
   0FBC CDr2Br03      [17] 3300 	call	__8BP_printspall
                           3301 ;ciclo.c:274: goto label_CICLO;
   0FBF C3r20r0A      [10] 3302 	jp	00102$
                           3303 ;ciclo.c:279: label_1810:
   0FC2                    3304 00194$:
                           3305 ;ciclo.c:281: if (cod<27){
   0FC2 FD 21r3Ar00   [14] 3306 	ld	iy, #_cod
   0FC6 FD 7E 00      [19] 3307 	ld	a, 0 (iy)
   0FC9 D6 1B         [ 7] 3308 	sub	a, #0x1b
   0FCB FD 7E 01      [19] 3309 	ld	a, 1 (iy)
   0FCE 17            [ 4] 3310 	rla
   0FCF 3F            [ 4] 3311 	ccf
   0FD0 1F            [ 4] 3312 	rra
   0FD1 DE 80         [ 7] 3313 	sbc	a, #0x80
   0FD3 30 31         [12] 3314 	jr	NC,00199$
                           3315 ;ciclo.c:282: if (cod==26) {_8BP_mover_3(31,0,-80);goto label_1490;}
   0FD5 FD 7E 00      [19] 3316 	ld	a, 0 (iy)
   0FD8 D6 1A         [ 7] 3317 	sub	a, #0x1a
   0FDA FD B6 01      [19] 3318 	or	a, 1 (iy)
   0FDD 20 14         [12] 3319 	jr	NZ,00196$
   0FDF 21 B0 FF      [10] 3320 	ld	hl, #0xffb0
   0FE2 E5            [11] 3321 	push	hl
   0FE3 21 00 00      [10] 3322 	ld	hl, #0x0000
   0FE6 E5            [11] 3323 	push	hl
   0FE7 2E 1F         [ 7] 3324 	ld	l, #0x1f
   0FE9 E5            [11] 3325 	push	hl
   0FEA CDrF2r04      [17] 3326 	call	__8BP_mover_3
   0FED F1            [10] 3327 	pop	af
   0FEE F1            [10] 3328 	pop	af
   0FEF F1            [10] 3329 	pop	af
   0FF0 C3r57r0F      [10] 3330 	jp	00188$
   0FF3                    3331 00196$:
                           3332 ;ciclo.c:283: else {_8BP_mover_3(31,0,80);goto label_1490;}
   0FF3 21 50 00      [10] 3333 	ld	hl, #0x0050
   0FF6 E5            [11] 3334 	push	hl
   0FF7 2E 00         [ 7] 3335 	ld	l, #0x00
   0FF9 E5            [11] 3336 	push	hl
   0FFA 2E 1F         [ 7] 3337 	ld	l, #0x1f
   0FFC E5            [11] 3338 	push	hl
   0FFD CDrF2r04      [17] 3339 	call	__8BP_mover_3
   1000 F1            [10] 3340 	pop	af
   1001 F1            [10] 3341 	pop	af
   1002 F1            [10] 3342 	pop	af
   1003 C3r57r0F      [10] 3343 	jp	00188$
   1006                    3344 00199$:
                           3345 ;ciclo.c:286: _8BP_poke_2(17910,0);//muerte
   1006 21 00 00      [10] 3346 	ld	hl, #0x0000
   1009 E5            [11] 3347 	push	hl
   100A 21 F6 45      [10] 3348 	ld	hl, #0x45f6
   100D E5            [11] 3349 	push	hl
   100E CDr60r05      [17] 3350 	call	__8BP_poke_2
   1011 F1            [10] 3351 	pop	af
   1012 F1            [10] 3352 	pop	af
                           3353 ;ciclo.c:287: _8BP_poke_2(17912,c);
   1013 2Ar2Er00      [16] 3354 	ld	hl, (_c)
   1016 E5            [11] 3355 	push	hl
   1017 21 F8 45      [10] 3356 	ld	hl, #0x45f8
   101A E5            [11] 3357 	push	hl
   101B CDr60r05      [17] 3358 	call	__8BP_poke_2
   101E F1            [10] 3359 	pop	af
   101F F1            [10] 3360 	pop	af
                           3361 ;ciclo.c:288: return 0;
   1020 21 00 00      [10] 3362 	ld	hl, #0x0000
   1023 18 1D         [12] 3363 	jr	00203$
                           3364 ;ciclo.c:291: label_2060:
   1025                    3365 00200$:
                           3366 ;ciclo.c:292: _8BP_poke_2(17910,1);//next level
   1025 21 01 00      [10] 3367 	ld	hl, #0x0001
   1028 E5            [11] 3368 	push	hl
   1029 21 F6 45      [10] 3369 	ld	hl, #0x45f6
   102C E5            [11] 3370 	push	hl
   102D CDr60r05      [17] 3371 	call	__8BP_poke_2
   1030 F1            [10] 3372 	pop	af
   1031 F1            [10] 3373 	pop	af
                           3374 ;ciclo.c:293: _8BP_poke_2(17912,c);
   1032 2Ar2Er00      [16] 3375 	ld	hl, (_c)
   1035 E5            [11] 3376 	push	hl
   1036 21 F8 45      [10] 3377 	ld	hl, #0x45f8
   1039 E5            [11] 3378 	push	hl
   103A CDr60r05      [17] 3379 	call	__8BP_poke_2
   103D F1            [10] 3380 	pop	af
   103E F1            [10] 3381 	pop	af
                           3382 ;ciclo.c:294: return 0;	
   103F 21 00 00      [10] 3383 	ld	hl, #0x0000
   1042                    3384 00203$:
                           3385 ;ciclo.c:295: }
   1042 F1            [10] 3386 	pop	af
   1043 C9            [10] 3387 	ret
   1044                    3388 ___str_1:
   1044 4E 45 57           3389 	.ascii "NEW"
   1047 00                 3390 	.db 0x00
   1048                    3391 ___str_2:
   1048 48 49 2D 53 43 4F  3392 	.ascii "HI-SCORE"
        52 45
   1050 00                 3393 	.db 0x00
                           3394 ;ciclo.c:298: void logica_fantasma(int id){
                           3395 ;	---------------------------------
                           3396 ; Function logica_fantasma
                           3397 ; ---------------------------------
   1051                    3398 _logica_fantasma::
                           3399 ;ciclo.c:300: if (rf[n]<7){
   1051 01r61r00      [10] 3400 	ld	bc, #_rf+0
   1054 2Ar30r00      [16] 3401 	ld	hl, (_n)
   1057 09            [11] 3402 	add	hl, bc
   1058 6E            [ 7] 3403 	ld	l, (hl)
                           3404 ;ciclo.c:301: xf =_basic_peek(dfx[n]);
   1059 ED 5Br30r00   [20] 3405 	ld	de, (_n)
   105D CB 23         [ 8] 3406 	sla	e
   105F CB 12         [ 8] 3407 	rl	d
                           3408 ;ciclo.c:300: if (rf[n]<7){
   1061 7D            [ 4] 3409 	ld	a, l
   1062 D6 07         [ 7] 3410 	sub	a, #0x07
   1064 D2r08r13      [10] 3411 	jp	NC, 00140$
                           3412 ;ciclo.c:301: xf =_basic_peek(dfx[n]);
   1067 21r65r00      [10] 3413 	ld	hl, #_dfx+0
   106A 19            [11] 3414 	add	hl, de
   106B 5E            [ 7] 3415 	ld	e, (hl)
   106C 23            [ 6] 3416 	inc	hl
   106D 56            [ 7] 3417 	ld	d, (hl)
   106E C5            [11] 3418 	push	bc
   106F D5            [11] 3419 	push	de
   1070 CDr21r08      [17] 3420 	call	__basic_peek
   1073 F1            [10] 3421 	pop	af
   1074 7D            [ 4] 3422 	ld	a, l
   1075 C1            [10] 3423 	pop	bc
   1076 32r77r00      [13] 3424 	ld	(_xf+0), a
                           3425 ;ciclo.c:302: if ((xf & 3)!=0) return;  
   1079 3Ar77r00      [13] 3426 	ld	a,(#_xf + 0)
   107C E6 03         [ 7] 3427 	and	a, #0x03
                           3428 ;ciclo.c:304: else goto label_1650;//ruta vertical
   107E C0            [11] 3429 	ret	NZ
                           3430 ;ciclo.c:305: if (rf[n]>5) goto label_1590; //izq
   107F 2Ar30r00      [16] 3431 	ld	hl, (_n)
   1082 09            [11] 3432 	add	hl, bc
   1083 56            [ 7] 3433 	ld	d, (hl)
                           3434 ;ciclo.c:308: newr=(1+newr) & 3;
   1084 FD 21r79r00   [14] 3435 	ld	iy, #_newr
   1088 FD 7E 00      [19] 3436 	ld	a, 0 (iy)
   108B 3C            [ 4] 3437 	inc	a
   108C E6 03         [ 7] 3438 	and	a, #0x03
   108E 5F            [ 4] 3439 	ld	e, a
                           3440 ;ciclo.c:305: if (rf[n]>5) goto label_1590; //izq
   108F 3E 05         [ 7] 3441 	ld	a, #0x05
   1091 92            [ 4] 3442 	sub	a, d
   1092 DArCDr11      [10] 3443 	jp	C, 00123$
                           3444 ;ciclo.c:308: newr=(1+newr) & 3;
   1095 FD 73 00      [19] 3445 	ld	0 (iy), e
                           3446 ;ciclo.c:309: if (newr==1) goto label_1550;
   1098 FD 7E 00      [19] 3447 	ld	a, 0 (iy)
   109B 3D            [ 4] 3448 	dec	a
   109C 28 4B         [12] 3449 	jr	Z,00115$
                           3450 ;ciclo.c:310: if (newr==2) goto label_1560;
   109E FD 7E 00      [19] 3451 	ld	a, 0 (iy)
   10A1 D6 02         [ 7] 3452 	sub	a, #0x02
   10A3 CAr4Ar11      [10] 3453 	jp	Z,00118$
                           3454 ;ciclo.c:312: label_1540:
   10A6                    3455 00112$:
                           3456 ;ciclo.c:313: _8BP_mover_3(id,0,1);_8BP_colay_1(id);_8BP_mover_3(id,0,-1); if (col==0) return;//sigue
   10A6 C5            [11] 3457 	push	bc
   10A7 21 01 00      [10] 3458 	ld	hl, #0x0001
   10AA E5            [11] 3459 	push	hl
   10AB 2E 00         [ 7] 3460 	ld	l, #0x00
   10AD E5            [11] 3461 	push	hl
   10AE 21 08 00      [10] 3462 	ld	hl, #8
   10B1 39            [11] 3463 	add	hl, sp
   10B2 4E            [ 7] 3464 	ld	c, (hl)
   10B3 23            [ 6] 3465 	inc	hl
   10B4 46            [ 7] 3466 	ld	b, (hl)
   10B5 C5            [11] 3467 	push	bc
   10B6 CDrF2r04      [17] 3468 	call	__8BP_mover_3
   10B9 F1            [10] 3469 	pop	af
   10BA F1            [10] 3470 	pop	af
   10BB F1            [10] 3471 	pop	af
   10BC 21 04 00      [10] 3472 	ld	hl, #4
   10BF 39            [11] 3473 	add	hl, sp
   10C0 4E            [ 7] 3474 	ld	c, (hl)
   10C1 23            [ 6] 3475 	inc	hl
   10C2 46            [ 7] 3476 	ld	b, (hl)
   10C3 C5            [11] 3477 	push	bc
   10C4 CDrA4r00      [17] 3478 	call	__8BP_colay_1
   10C7 21 FF FF      [10] 3479 	ld	hl, #0xffff
   10CA E3            [19] 3480 	ex	(sp),hl
   10CB 21 00 00      [10] 3481 	ld	hl, #0x0000
   10CE E5            [11] 3482 	push	hl
   10CF 21 08 00      [10] 3483 	ld	hl, #8
   10D2 39            [11] 3484 	add	hl, sp
   10D3 4E            [ 7] 3485 	ld	c, (hl)
   10D4 23            [ 6] 3486 	inc	hl
   10D5 46            [ 7] 3487 	ld	b, (hl)
   10D6 C5            [11] 3488 	push	bc
   10D7 CDrF2r04      [17] 3489 	call	__8BP_mover_3
   10DA F1            [10] 3490 	pop	af
   10DB F1            [10] 3491 	pop	af
   10DC F1            [10] 3492 	pop	af
   10DD C1            [10] 3493 	pop	bc
   10DE FD 21r3Er00   [14] 3494 	ld	iy, #_col
   10E2 FD 7E 01      [19] 3495 	ld	a, 1 (iy)
   10E5 FD B6 00      [19] 3496 	or	a, 0 (iy)
                           3497 ;ciclo.c:314: label_1550:
   10E8 C8            [11] 3498 	ret	Z
   10E9                    3499 00115$:
                           3500 ;ciclo.c:315: _8BP_mover_3(id,-1,0);_8BP_colay_1(id);_8BP_mover_3(id,1,0); if (col==0) {rf[n]=7;_8BP_setupsp_3(id,15,7);return;}
   10E9 C5            [11] 3501 	push	bc
   10EA 21 00 00      [10] 3502 	ld	hl, #0x0000
   10ED E5            [11] 3503 	push	hl
   10EE 21 FF FF      [10] 3504 	ld	hl, #0xffff
   10F1 E5            [11] 3505 	push	hl
   10F2 21 08 00      [10] 3506 	ld	hl, #8
   10F5 39            [11] 3507 	add	hl, sp
   10F6 4E            [ 7] 3508 	ld	c, (hl)
   10F7 23            [ 6] 3509 	inc	hl
   10F8 46            [ 7] 3510 	ld	b, (hl)
   10F9 C5            [11] 3511 	push	bc
   10FA CDrF2r04      [17] 3512 	call	__8BP_mover_3
   10FD F1            [10] 3513 	pop	af
   10FE F1            [10] 3514 	pop	af
   10FF F1            [10] 3515 	pop	af
   1100 21 04 00      [10] 3516 	ld	hl, #4
   1103 39            [11] 3517 	add	hl, sp
   1104 4E            [ 7] 3518 	ld	c, (hl)
   1105 23            [ 6] 3519 	inc	hl
   1106 46            [ 7] 3520 	ld	b, (hl)
   1107 C5            [11] 3521 	push	bc
   1108 CDrA4r00      [17] 3522 	call	__8BP_colay_1
   110B F1            [10] 3523 	pop	af
   110C 21 00 00      [10] 3524 	ld	hl, #0x0000
   110F E5            [11] 3525 	push	hl
   1110 2E 01         [ 7] 3526 	ld	l, #0x01
   1112 E5            [11] 3527 	push	hl
   1113 21 08 00      [10] 3528 	ld	hl, #8
   1116 39            [11] 3529 	add	hl, sp
   1117 4E            [ 7] 3530 	ld	c, (hl)
   1118 23            [ 6] 3531 	inc	hl
   1119 46            [ 7] 3532 	ld	b, (hl)
   111A C5            [11] 3533 	push	bc
   111B CDrF2r04      [17] 3534 	call	__8BP_mover_3
   111E F1            [10] 3535 	pop	af
   111F F1            [10] 3536 	pop	af
   1120 F1            [10] 3537 	pop	af
   1121 C1            [10] 3538 	pop	bc
   1122 FD 21r3Er00   [14] 3539 	ld	iy, #_col
   1126 FD 7E 01      [19] 3540 	ld	a, 1 (iy)
   1129 FD B6 00      [19] 3541 	or	a, 0 (iy)
   112C 20 1C         [12] 3542 	jr	NZ,00118$
   112E 2Ar30r00      [16] 3543 	ld	hl, (_n)
   1131 09            [11] 3544 	add	hl, bc
   1132 36 07         [10] 3545 	ld	(hl), #0x07
   1134 21 07 00      [10] 3546 	ld	hl, #0x0007
   1137 E5            [11] 3547 	push	hl
   1138 2E 0F         [ 7] 3548 	ld	l, #0x0f
   113A E5            [11] 3549 	push	hl
   113B 21 06 00      [10] 3550 	ld	hl, #6
   113E 39            [11] 3551 	add	hl, sp
   113F 4E            [ 7] 3552 	ld	c, (hl)
   1140 23            [ 6] 3553 	inc	hl
   1141 46            [ 7] 3554 	ld	b, (hl)
   1142 C5            [11] 3555 	push	bc
   1143 CDrB6r03      [17] 3556 	call	__8BP_setupsp_3
   1146 F1            [10] 3557 	pop	af
   1147 F1            [10] 3558 	pop	af
   1148 F1            [10] 3559 	pop	af
   1149 C9            [10] 3560 	ret
                           3561 ;ciclo.c:316: label_1560:
   114A                    3562 00118$:
                           3563 ;ciclo.c:317: _8BP_mover_3(id,1,0);_8BP_colay_1(id);_8BP_mover_3(id,-1,0); if (col==0) {rf[n]=8;_8BP_setupsp_3(id,15,8);return;}
   114A C5            [11] 3564 	push	bc
   114B 21 00 00      [10] 3565 	ld	hl, #0x0000
   114E E5            [11] 3566 	push	hl
   114F 2E 01         [ 7] 3567 	ld	l, #0x01
   1151 E5            [11] 3568 	push	hl
   1152 21 08 00      [10] 3569 	ld	hl, #8
   1155 39            [11] 3570 	add	hl, sp
   1156 4E            [ 7] 3571 	ld	c, (hl)
   1157 23            [ 6] 3572 	inc	hl
   1158 46            [ 7] 3573 	ld	b, (hl)
   1159 C5            [11] 3574 	push	bc
   115A CDrF2r04      [17] 3575 	call	__8BP_mover_3
   115D F1            [10] 3576 	pop	af
   115E F1            [10] 3577 	pop	af
   115F F1            [10] 3578 	pop	af
   1160 21 04 00      [10] 3579 	ld	hl, #4
   1163 39            [11] 3580 	add	hl, sp
   1164 4E            [ 7] 3581 	ld	c, (hl)
   1165 23            [ 6] 3582 	inc	hl
   1166 46            [ 7] 3583 	ld	b, (hl)
   1167 C5            [11] 3584 	push	bc
   1168 CDrA4r00      [17] 3585 	call	__8BP_colay_1
   116B 21 00 00      [10] 3586 	ld	hl, #0x0000
   116E E3            [19] 3587 	ex	(sp),hl
   116F 21 FF FF      [10] 3588 	ld	hl, #0xffff
   1172 E5            [11] 3589 	push	hl
   1173 21 08 00      [10] 3590 	ld	hl, #8
   1176 39            [11] 3591 	add	hl, sp
   1177 4E            [ 7] 3592 	ld	c, (hl)
   1178 23            [ 6] 3593 	inc	hl
   1179 46            [ 7] 3594 	ld	b, (hl)
   117A C5            [11] 3595 	push	bc
   117B CDrF2r04      [17] 3596 	call	__8BP_mover_3
   117E F1            [10] 3597 	pop	af
   117F F1            [10] 3598 	pop	af
   1180 F1            [10] 3599 	pop	af
   1181 C1            [10] 3600 	pop	bc
   1182 FD 21r3Er00   [14] 3601 	ld	iy, #_col
   1186 FD 7E 01      [19] 3602 	ld	a, 1 (iy)
   1189 FD B6 00      [19] 3603 	or	a, 0 (iy)
   118C 20 1C         [12] 3604 	jr	NZ,00120$
   118E 2Ar30r00      [16] 3605 	ld	hl, (_n)
   1191 09            [11] 3606 	add	hl, bc
   1192 36 08         [10] 3607 	ld	(hl), #0x08
   1194 21 08 00      [10] 3608 	ld	hl, #0x0008
   1197 E5            [11] 3609 	push	hl
   1198 2E 0F         [ 7] 3610 	ld	l, #0x0f
   119A E5            [11] 3611 	push	hl
   119B 21 06 00      [10] 3612 	ld	hl, #6
   119E 39            [11] 3613 	add	hl, sp
   119F 4E            [ 7] 3614 	ld	c, (hl)
   11A0 23            [ 6] 3615 	inc	hl
   11A1 46            [ 7] 3616 	ld	b, (hl)
   11A2 C5            [11] 3617 	push	bc
   11A3 CDrB6r03      [17] 3618 	call	__8BP_setupsp_3
   11A6 F1            [10] 3619 	pop	af
   11A7 F1            [10] 3620 	pop	af
   11A8 F1            [10] 3621 	pop	af
   11A9 C9            [10] 3622 	ret
   11AA                    3623 00120$:
                           3624 ;ciclo.c:318: if (xf>75) {_8BP_mover_3(id,0,-80); return;}
   11AA 3E 4B         [ 7] 3625 	ld	a, #0x4b
   11AC FD 21r77r00   [14] 3626 	ld	iy, #_xf
   11B0 FD 96 00      [19] 3627 	sub	a, 0 (iy)
   11B3 D2rA6r10      [10] 3628 	jp	NC, 00112$
   11B6 21 B0 FF      [10] 3629 	ld	hl, #0xffb0
   11B9 E5            [11] 3630 	push	hl
   11BA 21 00 00      [10] 3631 	ld	hl, #0x0000
   11BD E5            [11] 3632 	push	hl
   11BE 21 06 00      [10] 3633 	ld	hl, #6
   11C1 39            [11] 3634 	add	hl, sp
   11C2 4E            [ 7] 3635 	ld	c, (hl)
   11C3 23            [ 6] 3636 	inc	hl
   11C4 46            [ 7] 3637 	ld	b, (hl)
   11C5 C5            [11] 3638 	push	bc
   11C6 CDrF2r04      [17] 3639 	call	__8BP_mover_3
   11C9 F1            [10] 3640 	pop	af
   11CA F1            [10] 3641 	pop	af
   11CB F1            [10] 3642 	pop	af
   11CC C9            [10] 3643 	ret
                           3644 ;ciclo.c:322: label_1590: 
   11CD                    3645 00123$:
                           3646 ;ciclo.c:323: if (xf<200) newr=(1+newr) & 3; else {_8BP_mover_3(id,0,80);return;} 
   11CD 3Ar77r00      [13] 3647 	ld	a,(#_xf + 0)
   11D0 D6 C8         [ 7] 3648 	sub	a, #0xc8
   11D2 30 06         [12] 3649 	jr	NC,00125$
   11D4 21r79r00      [10] 3650 	ld	hl,#_newr + 0
   11D7 73            [ 7] 3651 	ld	(hl), e
   11D8 18 16         [12] 3652 	jr	00126$
   11DA                    3653 00125$:
   11DA 21 50 00      [10] 3654 	ld	hl, #0x0050
   11DD E5            [11] 3655 	push	hl
   11DE 2E 00         [ 7] 3656 	ld	l, #0x00
   11E0 E5            [11] 3657 	push	hl
   11E1 21 06 00      [10] 3658 	ld	hl, #6
   11E4 39            [11] 3659 	add	hl, sp
   11E5 4E            [ 7] 3660 	ld	c, (hl)
   11E6 23            [ 6] 3661 	inc	hl
   11E7 46            [ 7] 3662 	ld	b, (hl)
   11E8 C5            [11] 3663 	push	bc
   11E9 CDrF2r04      [17] 3664 	call	__8BP_mover_3
   11EC F1            [10] 3665 	pop	af
   11ED F1            [10] 3666 	pop	af
   11EE F1            [10] 3667 	pop	af
   11EF C9            [10] 3668 	ret
   11F0                    3669 00126$:
                           3670 ;ciclo.c:324: if (newr==1) goto label_1620;
   11F0 FD 21r79r00   [14] 3671 	ld	iy, #_newr
   11F4 FD 7E 00      [19] 3672 	ld	a, 0 (iy)
   11F7 3D            [ 4] 3673 	dec	a
   11F8 28 4C         [12] 3674 	jr	Z,00134$
                           3675 ;ciclo.c:325: if (newr==2) goto label_1630;
   11FA FD 7E 00      [19] 3676 	ld	a, 0 (iy)
   11FD D6 02         [ 7] 3677 	sub	a, #0x02
   11FF CArA7r12      [10] 3678 	jp	Z,00137$
                           3679 ;ciclo.c:327: label_1610:
   1202                    3680 00131$:
                           3681 ;ciclo.c:328: _8BP_mover_3(id,0,-1);_8BP_colay_1(id);_8BP_mover_3(id,0,1); if (col==0) return;//sigue
   1202 C5            [11] 3682 	push	bc
   1203 21 FF FF      [10] 3683 	ld	hl, #0xffff
   1206 E5            [11] 3684 	push	hl
   1207 21 00 00      [10] 3685 	ld	hl, #0x0000
   120A E5            [11] 3686 	push	hl
   120B 21 08 00      [10] 3687 	ld	hl, #8
   120E 39            [11] 3688 	add	hl, sp
   120F 4E            [ 7] 3689 	ld	c, (hl)
   1210 23            [ 6] 3690 	inc	hl
   1211 46            [ 7] 3691 	ld	b, (hl)
   1212 C5            [11] 3692 	push	bc
   1213 CDrF2r04      [17] 3693 	call	__8BP_mover_3
   1216 F1            [10] 3694 	pop	af
   1217 F1            [10] 3695 	pop	af
   1218 F1            [10] 3696 	pop	af
   1219 21 04 00      [10] 3697 	ld	hl, #4
   121C 39            [11] 3698 	add	hl, sp
   121D 4E            [ 7] 3699 	ld	c, (hl)
   121E 23            [ 6] 3700 	inc	hl
   121F 46            [ 7] 3701 	ld	b, (hl)
   1220 C5            [11] 3702 	push	bc
   1221 CDrA4r00      [17] 3703 	call	__8BP_colay_1
   1224 F1            [10] 3704 	pop	af
   1225 21 01 00      [10] 3705 	ld	hl, #0x0001
   1228 E5            [11] 3706 	push	hl
   1229 2E 00         [ 7] 3707 	ld	l, #0x00
   122B E5            [11] 3708 	push	hl
   122C 21 08 00      [10] 3709 	ld	hl, #8
   122F 39            [11] 3710 	add	hl, sp
   1230 4E            [ 7] 3711 	ld	c, (hl)
   1231 23            [ 6] 3712 	inc	hl
   1232 46            [ 7] 3713 	ld	b, (hl)
   1233 C5            [11] 3714 	push	bc
   1234 CDrF2r04      [17] 3715 	call	__8BP_mover_3
   1237 F1            [10] 3716 	pop	af
   1238 F1            [10] 3717 	pop	af
   1239 F1            [10] 3718 	pop	af
   123A C1            [10] 3719 	pop	bc
   123B FD 21r3Er00   [14] 3720 	ld	iy, #_col
   123F FD 7E 01      [19] 3721 	ld	a, 1 (iy)
   1242 FD B6 00      [19] 3722 	or	a, 0 (iy)
                           3723 ;ciclo.c:329: label_1620:
   1245 C8            [11] 3724 	ret	Z
   1246                    3725 00134$:
                           3726 ;ciclo.c:330: _8BP_mover_3(id,-1,0);_8BP_colay_1(id);_8BP_mover_3(id,1,0); if (col==0) {rf[n]=7;_8BP_setupsp_3(id,15,7);return;}
   1246 C5            [11] 3727 	push	bc
   1247 21 00 00      [10] 3728 	ld	hl, #0x0000
   124A E5            [11] 3729 	push	hl
   124B 21 FF FF      [10] 3730 	ld	hl, #0xffff
   124E E5            [11] 3731 	push	hl
   124F 21 08 00      [10] 3732 	ld	hl, #8
   1252 39            [11] 3733 	add	hl, sp
   1253 4E            [ 7] 3734 	ld	c, (hl)
   1254 23            [ 6] 3735 	inc	hl
   1255 46            [ 7] 3736 	ld	b, (hl)
   1256 C5            [11] 3737 	push	bc
   1257 CDrF2r04      [17] 3738 	call	__8BP_mover_3
   125A F1            [10] 3739 	pop	af
   125B F1            [10] 3740 	pop	af
   125C F1            [10] 3741 	pop	af
   125D 21 04 00      [10] 3742 	ld	hl, #4
   1260 39            [11] 3743 	add	hl, sp
   1261 4E            [ 7] 3744 	ld	c, (hl)
   1262 23            [ 6] 3745 	inc	hl
   1263 46            [ 7] 3746 	ld	b, (hl)
   1264 C5            [11] 3747 	push	bc
   1265 CDrA4r00      [17] 3748 	call	__8BP_colay_1
   1268 F1            [10] 3749 	pop	af
   1269 21 00 00      [10] 3750 	ld	hl, #0x0000
   126C E5            [11] 3751 	push	hl
   126D 2E 01         [ 7] 3752 	ld	l, #0x01
   126F E5            [11] 3753 	push	hl
   1270 21 08 00      [10] 3754 	ld	hl, #8
   1273 39            [11] 3755 	add	hl, sp
   1274 4E            [ 7] 3756 	ld	c, (hl)
   1275 23            [ 6] 3757 	inc	hl
   1276 46            [ 7] 3758 	ld	b, (hl)
   1277 C5            [11] 3759 	push	bc
   1278 CDrF2r04      [17] 3760 	call	__8BP_mover_3
   127B F1            [10] 3761 	pop	af
   127C F1            [10] 3762 	pop	af
   127D F1            [10] 3763 	pop	af
   127E C1            [10] 3764 	pop	bc
   127F FD 21r3Er00   [14] 3765 	ld	iy, #_col
   1283 FD 7E 01      [19] 3766 	ld	a, 1 (iy)
   1286 FD B6 00      [19] 3767 	or	a, 0 (iy)
   1289 20 1C         [12] 3768 	jr	NZ,00137$
   128B 2Ar30r00      [16] 3769 	ld	hl, (_n)
   128E 09            [11] 3770 	add	hl, bc
   128F 36 07         [10] 3771 	ld	(hl), #0x07
   1291 21 07 00      [10] 3772 	ld	hl, #0x0007
   1294 E5            [11] 3773 	push	hl
   1295 2E 0F         [ 7] 3774 	ld	l, #0x0f
   1297 E5            [11] 3775 	push	hl
   1298 21 06 00      [10] 3776 	ld	hl, #6
   129B 39            [11] 3777 	add	hl, sp
   129C 4E            [ 7] 3778 	ld	c, (hl)
   129D 23            [ 6] 3779 	inc	hl
   129E 46            [ 7] 3780 	ld	b, (hl)
   129F C5            [11] 3781 	push	bc
   12A0 CDrB6r03      [17] 3782 	call	__8BP_setupsp_3
   12A3 F1            [10] 3783 	pop	af
   12A4 F1            [10] 3784 	pop	af
   12A5 F1            [10] 3785 	pop	af
   12A6 C9            [10] 3786 	ret
                           3787 ;ciclo.c:331: label_1630:
   12A7                    3788 00137$:
                           3789 ;ciclo.c:332: _8BP_mover_3(id,1,0);_8BP_colay_1(id);_8BP_mover_3(id,-1,0); if (col==0) {rf[n]=8;_8BP_setupsp_3(id,15,8);return;}
   12A7 C5            [11] 3790 	push	bc
   12A8 21 00 00      [10] 3791 	ld	hl, #0x0000
   12AB E5            [11] 3792 	push	hl
   12AC 2E 01         [ 7] 3793 	ld	l, #0x01
   12AE E5            [11] 3794 	push	hl
   12AF 21 08 00      [10] 3795 	ld	hl, #8
   12B2 39            [11] 3796 	add	hl, sp
   12B3 4E            [ 7] 3797 	ld	c, (hl)
   12B4 23            [ 6] 3798 	inc	hl
   12B5 46            [ 7] 3799 	ld	b, (hl)
   12B6 C5            [11] 3800 	push	bc
   12B7 CDrF2r04      [17] 3801 	call	__8BP_mover_3
   12BA F1            [10] 3802 	pop	af
   12BB F1            [10] 3803 	pop	af
   12BC F1            [10] 3804 	pop	af
   12BD 21 04 00      [10] 3805 	ld	hl, #4
   12C0 39            [11] 3806 	add	hl, sp
   12C1 4E            [ 7] 3807 	ld	c, (hl)
   12C2 23            [ 6] 3808 	inc	hl
   12C3 46            [ 7] 3809 	ld	b, (hl)
   12C4 C5            [11] 3810 	push	bc
   12C5 CDrA4r00      [17] 3811 	call	__8BP_colay_1
   12C8 21 00 00      [10] 3812 	ld	hl, #0x0000
   12CB E3            [19] 3813 	ex	(sp),hl
   12CC 21 FF FF      [10] 3814 	ld	hl, #0xffff
   12CF E5            [11] 3815 	push	hl
   12D0 21 08 00      [10] 3816 	ld	hl, #8
   12D3 39            [11] 3817 	add	hl, sp
   12D4 4E            [ 7] 3818 	ld	c, (hl)
   12D5 23            [ 6] 3819 	inc	hl
   12D6 46            [ 7] 3820 	ld	b, (hl)
   12D7 C5            [11] 3821 	push	bc
   12D8 CDrF2r04      [17] 3822 	call	__8BP_mover_3
   12DB F1            [10] 3823 	pop	af
   12DC F1            [10] 3824 	pop	af
   12DD F1            [10] 3825 	pop	af
   12DE C1            [10] 3826 	pop	bc
   12DF FD 21r3Er00   [14] 3827 	ld	iy, #_col
   12E3 FD 7E 01      [19] 3828 	ld	a, 1 (iy)
   12E6 FD B6 00      [19] 3829 	or	a, 0 (iy)
   12E9 C2r02r12      [10] 3830 	jp	NZ, 00131$
   12EC 2Ar30r00      [16] 3831 	ld	hl, (_n)
   12EF 09            [11] 3832 	add	hl, bc
   12F0 36 08         [10] 3833 	ld	(hl), #0x08
   12F2 21 08 00      [10] 3834 	ld	hl, #0x0008
   12F5 E5            [11] 3835 	push	hl
   12F6 2E 0F         [ 7] 3836 	ld	l, #0x0f
   12F8 E5            [11] 3837 	push	hl
   12F9 21 06 00      [10] 3838 	ld	hl, #6
   12FC 39            [11] 3839 	add	hl, sp
   12FD 4E            [ 7] 3840 	ld	c, (hl)
   12FE 23            [ 6] 3841 	inc	hl
   12FF 46            [ 7] 3842 	ld	b, (hl)
   1300 C5            [11] 3843 	push	bc
   1301 CDrB6r03      [17] 3844 	call	__8BP_setupsp_3
   1304 F1            [10] 3845 	pop	af
   1305 F1            [10] 3846 	pop	af
   1306 F1            [10] 3847 	pop	af
   1307 C9            [10] 3848 	ret
                           3849 ;ciclo.c:336: label_1650: 
   1308                    3850 00140$:
                           3851 ;ciclo.c:337: yf=_basic_peek(dfy[n]);
   1308 21r6Dr00      [10] 3852 	ld	hl, #_dfy
   130B 19            [11] 3853 	add	hl, de
   130C 5E            [ 7] 3854 	ld	e, (hl)
   130D 23            [ 6] 3855 	inc	hl
   130E 56            [ 7] 3856 	ld	d, (hl)
   130F C5            [11] 3857 	push	bc
   1310 D5            [11] 3858 	push	de
   1311 CDr21r08      [17] 3859 	call	__basic_peek
   1314 F1            [10] 3860 	pop	af
   1315 7D            [ 4] 3861 	ld	a, l
   1316 C1            [10] 3862 	pop	bc
   1317 32r78r00      [13] 3863 	ld	(_yf+0), a
                           3864 ;ciclo.c:338: if (yf & 7) return; 
   131A 3Ar78r00      [13] 3865 	ld	a,(#_yf + 0)
   131D E6 07         [ 7] 3866 	and	a, #0x07
   131F C0            [11] 3867 	ret	NZ
                           3868 ;ciclo.c:339: if (rf[n]==8) goto label_1720;
   1320 2Ar30r00      [16] 3869 	ld	hl, (_n)
   1323 09            [11] 3870 	add	hl, bc
   1324 5E            [ 7] 3871 	ld	e, (hl)
                           3872 ;ciclo.c:308: newr=(1+newr) & 3;
   1325 FD 21r79r00   [14] 3873 	ld	iy, #_newr
   1329 FD 7E 00      [19] 3874 	ld	a, 0 (iy)
   132C 3C            [ 4] 3875 	inc	a
   132D E6 03         [ 7] 3876 	and	a, #0x03
   132F 57            [ 4] 3877 	ld	d, a
                           3878 ;ciclo.c:339: if (rf[n]==8) goto label_1720;
   1330 7B            [ 4] 3879 	ld	a, e
   1331 D6 08         [ 7] 3880 	sub	a, #0x08
   1333 CAr4Dr14      [10] 3881 	jp	Z,00158$
                           3882 ;ciclo.c:340: newr=(1+newr) & 3;
   1336 FD 72 00      [19] 3883 	ld	0 (iy), d
                           3884 ;ciclo.c:341: if (newr==1) goto label_1690;
   1339 FD 7E 00      [19] 3885 	ld	a, 0 (iy)
   133C 3D            [ 4] 3886 	dec	a
   133D 28 4C         [12] 3887 	jr	Z,00152$
                           3888 ;ciclo.c:342: if (newr==2) goto label_1700;
   133F FD 7E 00      [19] 3889 	ld	a, 0 (iy)
   1342 D6 02         [ 7] 3890 	sub	a, #0x02
   1344 CArEBr13      [10] 3891 	jp	Z,00155$
                           3892 ;ciclo.c:344: label_1680:
   1347                    3893 00149$:
                           3894 ;ciclo.c:345: _8BP_mover_3(id,-1,0);_8BP_colay_1(id);_8BP_mover_3(id,1,0); if (col==0) return;//sigue
   1347 C5            [11] 3895 	push	bc
   1348 21 00 00      [10] 3896 	ld	hl, #0x0000
   134B E5            [11] 3897 	push	hl
   134C 21 FF FF      [10] 3898 	ld	hl, #0xffff
   134F E5            [11] 3899 	push	hl
   1350 21 08 00      [10] 3900 	ld	hl, #8
   1353 39            [11] 3901 	add	hl, sp
   1354 4E            [ 7] 3902 	ld	c, (hl)
   1355 23            [ 6] 3903 	inc	hl
   1356 46            [ 7] 3904 	ld	b, (hl)
   1357 C5            [11] 3905 	push	bc
   1358 CDrF2r04      [17] 3906 	call	__8BP_mover_3
   135B F1            [10] 3907 	pop	af
   135C F1            [10] 3908 	pop	af
   135D F1            [10] 3909 	pop	af
   135E 21 04 00      [10] 3910 	ld	hl, #4
   1361 39            [11] 3911 	add	hl, sp
   1362 4E            [ 7] 3912 	ld	c, (hl)
   1363 23            [ 6] 3913 	inc	hl
   1364 46            [ 7] 3914 	ld	b, (hl)
   1365 C5            [11] 3915 	push	bc
   1366 CDrA4r00      [17] 3916 	call	__8BP_colay_1
   1369 F1            [10] 3917 	pop	af
   136A 21 00 00      [10] 3918 	ld	hl, #0x0000
   136D E5            [11] 3919 	push	hl
   136E 2E 01         [ 7] 3920 	ld	l, #0x01
   1370 E5            [11] 3921 	push	hl
   1371 21 08 00      [10] 3922 	ld	hl, #8
   1374 39            [11] 3923 	add	hl, sp
   1375 4E            [ 7] 3924 	ld	c, (hl)
   1376 23            [ 6] 3925 	inc	hl
   1377 46            [ 7] 3926 	ld	b, (hl)
   1378 C5            [11] 3927 	push	bc
   1379 CDrF2r04      [17] 3928 	call	__8BP_mover_3
   137C F1            [10] 3929 	pop	af
   137D F1            [10] 3930 	pop	af
   137E F1            [10] 3931 	pop	af
   137F C1            [10] 3932 	pop	bc
   1380 FD 21r3Er00   [14] 3933 	ld	iy, #_col
   1384 FD 7E 01      [19] 3934 	ld	a, 1 (iy)
   1387 FD B6 00      [19] 3935 	or	a, 0 (iy)
                           3936 ;ciclo.c:346: label_1690:
   138A C8            [11] 3937 	ret	Z
   138B                    3938 00152$:
                           3939 ;ciclo.c:347: _8BP_mover_3(id,0,1);_8BP_colay_1(id);_8BP_mover_3(id,0,-1); if (col==0) {rf[n]=5;_8BP_setupsp_3(id,15,5);return;}
   138B C5            [11] 3940 	push	bc
   138C 21 01 00      [10] 3941 	ld	hl, #0x0001
   138F E5            [11] 3942 	push	hl
   1390 2E 00         [ 7] 3943 	ld	l, #0x00
   1392 E5            [11] 3944 	push	hl
   1393 21 08 00      [10] 3945 	ld	hl, #8
   1396 39            [11] 3946 	add	hl, sp
   1397 4E            [ 7] 3947 	ld	c, (hl)
   1398 23            [ 6] 3948 	inc	hl
   1399 46            [ 7] 3949 	ld	b, (hl)
   139A C5            [11] 3950 	push	bc
   139B CDrF2r04      [17] 3951 	call	__8BP_mover_3
   139E F1            [10] 3952 	pop	af
   139F F1            [10] 3953 	pop	af
   13A0 F1            [10] 3954 	pop	af
   13A1 21 04 00      [10] 3955 	ld	hl, #4
   13A4 39            [11] 3956 	add	hl, sp
   13A5 4E            [ 7] 3957 	ld	c, (hl)
   13A6 23            [ 6] 3958 	inc	hl
   13A7 46            [ 7] 3959 	ld	b, (hl)
   13A8 C5            [11] 3960 	push	bc
   13A9 CDrA4r00      [17] 3961 	call	__8BP_colay_1
   13AC 21 FF FF      [10] 3962 	ld	hl, #0xffff
   13AF E3            [19] 3963 	ex	(sp),hl
   13B0 21 00 00      [10] 3964 	ld	hl, #0x0000
   13B3 E5            [11] 3965 	push	hl
   13B4 21 08 00      [10] 3966 	ld	hl, #8
   13B7 39            [11] 3967 	add	hl, sp
   13B8 4E            [ 7] 3968 	ld	c, (hl)
   13B9 23            [ 6] 3969 	inc	hl
   13BA 46            [ 7] 3970 	ld	b, (hl)
   13BB C5            [11] 3971 	push	bc
   13BC CDrF2r04      [17] 3972 	call	__8BP_mover_3
   13BF F1            [10] 3973 	pop	af
   13C0 F1            [10] 3974 	pop	af
   13C1 F1            [10] 3975 	pop	af
   13C2 C1            [10] 3976 	pop	bc
   13C3 FD 21r3Er00   [14] 3977 	ld	iy, #_col
   13C7 FD 7E 01      [19] 3978 	ld	a, 1 (iy)
   13CA FD B6 00      [19] 3979 	or	a, 0 (iy)
   13CD 20 1C         [12] 3980 	jr	NZ,00155$
   13CF 2Ar30r00      [16] 3981 	ld	hl, (_n)
   13D2 09            [11] 3982 	add	hl, bc
   13D3 36 05         [10] 3983 	ld	(hl), #0x05
   13D5 21 05 00      [10] 3984 	ld	hl, #0x0005
   13D8 E5            [11] 3985 	push	hl
   13D9 2E 0F         [ 7] 3986 	ld	l, #0x0f
   13DB E5            [11] 3987 	push	hl
   13DC 21 06 00      [10] 3988 	ld	hl, #6
   13DF 39            [11] 3989 	add	hl, sp
   13E0 4E            [ 7] 3990 	ld	c, (hl)
   13E1 23            [ 6] 3991 	inc	hl
   13E2 46            [ 7] 3992 	ld	b, (hl)
   13E3 C5            [11] 3993 	push	bc
   13E4 CDrB6r03      [17] 3994 	call	__8BP_setupsp_3
   13E7 F1            [10] 3995 	pop	af
   13E8 F1            [10] 3996 	pop	af
   13E9 F1            [10] 3997 	pop	af
   13EA C9            [10] 3998 	ret
                           3999 ;ciclo.c:348: label_1700:
   13EB                    4000 00155$:
                           4001 ;ciclo.c:349: _8BP_mover_3(id,0,-1);_8BP_colay_1(id);_8BP_mover_3(id,0,1); if (col==0) {rf[n]=6;_8BP_setupsp_3(id,15,6);return;}
   13EB C5            [11] 4002 	push	bc
   13EC 21 FF FF      [10] 4003 	ld	hl, #0xffff
   13EF E5            [11] 4004 	push	hl
   13F0 21 00 00      [10] 4005 	ld	hl, #0x0000
   13F3 E5            [11] 4006 	push	hl
   13F4 21 08 00      [10] 4007 	ld	hl, #8
   13F7 39            [11] 4008 	add	hl, sp
   13F8 4E            [ 7] 4009 	ld	c, (hl)
   13F9 23            [ 6] 4010 	inc	hl
   13FA 46            [ 7] 4011 	ld	b, (hl)
   13FB C5            [11] 4012 	push	bc
   13FC CDrF2r04      [17] 4013 	call	__8BP_mover_3
   13FF F1            [10] 4014 	pop	af
   1400 F1            [10] 4015 	pop	af
   1401 F1            [10] 4016 	pop	af
   1402 21 04 00      [10] 4017 	ld	hl, #4
   1405 39            [11] 4018 	add	hl, sp
   1406 4E            [ 7] 4019 	ld	c, (hl)
   1407 23            [ 6] 4020 	inc	hl
   1408 46            [ 7] 4021 	ld	b, (hl)
   1409 C5            [11] 4022 	push	bc
   140A CDrA4r00      [17] 4023 	call	__8BP_colay_1
   140D F1            [10] 4024 	pop	af
   140E 21 01 00      [10] 4025 	ld	hl, #0x0001
   1411 E5            [11] 4026 	push	hl
   1412 2E 00         [ 7] 4027 	ld	l, #0x00
   1414 E5            [11] 4028 	push	hl
   1415 21 08 00      [10] 4029 	ld	hl, #8
   1418 39            [11] 4030 	add	hl, sp
   1419 4E            [ 7] 4031 	ld	c, (hl)
   141A 23            [ 6] 4032 	inc	hl
   141B 46            [ 7] 4033 	ld	b, (hl)
   141C C5            [11] 4034 	push	bc
   141D CDrF2r04      [17] 4035 	call	__8BP_mover_3
   1420 F1            [10] 4036 	pop	af
   1421 F1            [10] 4037 	pop	af
   1422 F1            [10] 4038 	pop	af
   1423 C1            [10] 4039 	pop	bc
   1424 FD 21r3Er00   [14] 4040 	ld	iy, #_col
   1428 FD 7E 01      [19] 4041 	ld	a, 1 (iy)
   142B FD B6 00      [19] 4042 	or	a, 0 (iy)
   142E C2r47r13      [10] 4043 	jp	NZ, 00149$
   1431 2Ar30r00      [16] 4044 	ld	hl, (_n)
   1434 09            [11] 4045 	add	hl, bc
   1435 36 06         [10] 4046 	ld	(hl), #0x06
   1437 21 06 00      [10] 4047 	ld	hl, #0x0006
   143A E5            [11] 4048 	push	hl
   143B 2E 0F         [ 7] 4049 	ld	l, #0x0f
   143D E5            [11] 4050 	push	hl
   143E 21 06 00      [10] 4051 	ld	hl, #6
   1441 39            [11] 4052 	add	hl, sp
   1442 4E            [ 7] 4053 	ld	c, (hl)
   1443 23            [ 6] 4054 	inc	hl
   1444 46            [ 7] 4055 	ld	b, (hl)
   1445 C5            [11] 4056 	push	bc
   1446 CDrB6r03      [17] 4057 	call	__8BP_setupsp_3
   1449 F1            [10] 4058 	pop	af
   144A F1            [10] 4059 	pop	af
   144B F1            [10] 4060 	pop	af
   144C C9            [10] 4061 	ret
                           4062 ;ciclo.c:353: label_1720:
   144D                    4063 00158$:
                           4064 ;ciclo.c:354: newr=(1+newr) & 3;
   144D FD 21r79r00   [14] 4065 	ld	iy, #_newr
   1451 FD 72 00      [19] 4066 	ld	0 (iy), d
                           4067 ;ciclo.c:355: if (newr==1) goto label_1750;
   1454 FD 7E 00      [19] 4068 	ld	a, 0 (iy)
   1457 3D            [ 4] 4069 	dec	a
   1458 28 4B         [12] 4070 	jr	Z,00166$
                           4071 ;ciclo.c:356: if (newr==2) goto label_1760;  
   145A FD 7E 00      [19] 4072 	ld	a, 0 (iy)
   145D D6 02         [ 7] 4073 	sub	a, #0x02
   145F CAr05r15      [10] 4074 	jp	Z,00169$
                           4075 ;ciclo.c:358: label_1740:
   1462                    4076 00163$:
                           4077 ;ciclo.c:359: _8BP_mover_3(id,1,0);_8BP_colay_1(id);_8BP_mover_3(id,-1,0); if (col==0) return;//sigue
   1462 C5            [11] 4078 	push	bc
   1463 21 00 00      [10] 4079 	ld	hl, #0x0000
   1466 E5            [11] 4080 	push	hl
   1467 2E 01         [ 7] 4081 	ld	l, #0x01
   1469 E5            [11] 4082 	push	hl
   146A 21 08 00      [10] 4083 	ld	hl, #8
   146D 39            [11] 4084 	add	hl, sp
   146E 4E            [ 7] 4085 	ld	c, (hl)
   146F 23            [ 6] 4086 	inc	hl
   1470 46            [ 7] 4087 	ld	b, (hl)
   1471 C5            [11] 4088 	push	bc
   1472 CDrF2r04      [17] 4089 	call	__8BP_mover_3
   1475 F1            [10] 4090 	pop	af
   1476 F1            [10] 4091 	pop	af
   1477 F1            [10] 4092 	pop	af
   1478 21 04 00      [10] 4093 	ld	hl, #4
   147B 39            [11] 4094 	add	hl, sp
   147C 4E            [ 7] 4095 	ld	c, (hl)
   147D 23            [ 6] 4096 	inc	hl
   147E 46            [ 7] 4097 	ld	b, (hl)
   147F C5            [11] 4098 	push	bc
   1480 CDrA4r00      [17] 4099 	call	__8BP_colay_1
   1483 21 00 00      [10] 4100 	ld	hl, #0x0000
   1486 E3            [19] 4101 	ex	(sp),hl
   1487 21 FF FF      [10] 4102 	ld	hl, #0xffff
   148A E5            [11] 4103 	push	hl
   148B 21 08 00      [10] 4104 	ld	hl, #8
   148E 39            [11] 4105 	add	hl, sp
   148F 4E            [ 7] 4106 	ld	c, (hl)
   1490 23            [ 6] 4107 	inc	hl
   1491 46            [ 7] 4108 	ld	b, (hl)
   1492 C5            [11] 4109 	push	bc
   1493 CDrF2r04      [17] 4110 	call	__8BP_mover_3
   1496 F1            [10] 4111 	pop	af
   1497 F1            [10] 4112 	pop	af
   1498 F1            [10] 4113 	pop	af
   1499 C1            [10] 4114 	pop	bc
   149A FD 21r3Er00   [14] 4115 	ld	iy, #_col
   149E FD 7E 01      [19] 4116 	ld	a, 1 (iy)
   14A1 FD B6 00      [19] 4117 	or	a, 0 (iy)
                           4118 ;ciclo.c:360: label_1750:
   14A4 C8            [11] 4119 	ret	Z
   14A5                    4120 00166$:
                           4121 ;ciclo.c:361: _8BP_mover_3(id,0,1);_8BP_colay_1(id);_8BP_mover_3(id,0,-1); if (col==0) {rf[n]=5;_8BP_setupsp_3(id,15,5);return;}
   14A5 C5            [11] 4122 	push	bc
   14A6 21 01 00      [10] 4123 	ld	hl, #0x0001
   14A9 E5            [11] 4124 	push	hl
   14AA 2E 00         [ 7] 4125 	ld	l, #0x00
   14AC E5            [11] 4126 	push	hl
   14AD 21 08 00      [10] 4127 	ld	hl, #8
   14B0 39            [11] 4128 	add	hl, sp
   14B1 4E            [ 7] 4129 	ld	c, (hl)
   14B2 23            [ 6] 4130 	inc	hl
   14B3 46            [ 7] 4131 	ld	b, (hl)
   14B4 C5            [11] 4132 	push	bc
   14B5 CDrF2r04      [17] 4133 	call	__8BP_mover_3
   14B8 F1            [10] 4134 	pop	af
   14B9 F1            [10] 4135 	pop	af
   14BA F1            [10] 4136 	pop	af
   14BB 21 04 00      [10] 4137 	ld	hl, #4
   14BE 39            [11] 4138 	add	hl, sp
   14BF 4E            [ 7] 4139 	ld	c, (hl)
   14C0 23            [ 6] 4140 	inc	hl
   14C1 46            [ 7] 4141 	ld	b, (hl)
   14C2 C5            [11] 4142 	push	bc
   14C3 CDrA4r00      [17] 4143 	call	__8BP_colay_1
   14C6 21 FF FF      [10] 4144 	ld	hl, #0xffff
   14C9 E3            [19] 4145 	ex	(sp),hl
   14CA 21 00 00      [10] 4146 	ld	hl, #0x0000
   14CD E5            [11] 4147 	push	hl
   14CE 21 08 00      [10] 4148 	ld	hl, #8
   14D1 39            [11] 4149 	add	hl, sp
   14D2 4E            [ 7] 4150 	ld	c, (hl)
   14D3 23            [ 6] 4151 	inc	hl
   14D4 46            [ 7] 4152 	ld	b, (hl)
   14D5 C5            [11] 4153 	push	bc
   14D6 CDrF2r04      [17] 4154 	call	__8BP_mover_3
   14D9 F1            [10] 4155 	pop	af
   14DA F1            [10] 4156 	pop	af
   14DB F1            [10] 4157 	pop	af
   14DC C1            [10] 4158 	pop	bc
   14DD FD 21r3Er00   [14] 4159 	ld	iy, #_col
   14E1 FD 7E 01      [19] 4160 	ld	a, 1 (iy)
   14E4 FD B6 00      [19] 4161 	or	a, 0 (iy)
   14E7 20 1C         [12] 4162 	jr	NZ,00169$
   14E9 2Ar30r00      [16] 4163 	ld	hl, (_n)
   14EC 09            [11] 4164 	add	hl, bc
   14ED 36 05         [10] 4165 	ld	(hl), #0x05
   14EF 21 05 00      [10] 4166 	ld	hl, #0x0005
   14F2 E5            [11] 4167 	push	hl
   14F3 2E 0F         [ 7] 4168 	ld	l, #0x0f
   14F5 E5            [11] 4169 	push	hl
   14F6 21 06 00      [10] 4170 	ld	hl, #6
   14F9 39            [11] 4171 	add	hl, sp
   14FA 4E            [ 7] 4172 	ld	c, (hl)
   14FB 23            [ 6] 4173 	inc	hl
   14FC 46            [ 7] 4174 	ld	b, (hl)
   14FD C5            [11] 4175 	push	bc
   14FE CDrB6r03      [17] 4176 	call	__8BP_setupsp_3
   1501 F1            [10] 4177 	pop	af
   1502 F1            [10] 4178 	pop	af
   1503 F1            [10] 4179 	pop	af
   1504 C9            [10] 4180 	ret
                           4181 ;ciclo.c:362: label_1760:
   1505                    4182 00169$:
                           4183 ;ciclo.c:363: _8BP_mover_3(id,0,-1);_8BP_colay_1(id);_8BP_mover_3(id,0,1); if (col==0) {rf[n]=6;_8BP_setupsp_3(id,15,6);return;}
   1505 C5            [11] 4184 	push	bc
   1506 21 FF FF      [10] 4185 	ld	hl, #0xffff
   1509 E5            [11] 4186 	push	hl
   150A 21 00 00      [10] 4187 	ld	hl, #0x0000
   150D E5            [11] 4188 	push	hl
   150E 21 08 00      [10] 4189 	ld	hl, #8
   1511 39            [11] 4190 	add	hl, sp
   1512 4E            [ 7] 4191 	ld	c, (hl)
   1513 23            [ 6] 4192 	inc	hl
   1514 46            [ 7] 4193 	ld	b, (hl)
   1515 C5            [11] 4194 	push	bc
   1516 CDrF2r04      [17] 4195 	call	__8BP_mover_3
   1519 F1            [10] 4196 	pop	af
   151A F1            [10] 4197 	pop	af
   151B F1            [10] 4198 	pop	af
   151C 21 04 00      [10] 4199 	ld	hl, #4
   151F 39            [11] 4200 	add	hl, sp
   1520 4E            [ 7] 4201 	ld	c, (hl)
   1521 23            [ 6] 4202 	inc	hl
   1522 46            [ 7] 4203 	ld	b, (hl)
   1523 C5            [11] 4204 	push	bc
   1524 CDrA4r00      [17] 4205 	call	__8BP_colay_1
   1527 F1            [10] 4206 	pop	af
   1528 21 01 00      [10] 4207 	ld	hl, #0x0001
   152B E5            [11] 4208 	push	hl
   152C 2E 00         [ 7] 4209 	ld	l, #0x00
   152E E5            [11] 4210 	push	hl
   152F 21 08 00      [10] 4211 	ld	hl, #8
   1532 39            [11] 4212 	add	hl, sp
   1533 4E            [ 7] 4213 	ld	c, (hl)
   1534 23            [ 6] 4214 	inc	hl
   1535 46            [ 7] 4215 	ld	b, (hl)
   1536 C5            [11] 4216 	push	bc
   1537 CDrF2r04      [17] 4217 	call	__8BP_mover_3
   153A F1            [10] 4218 	pop	af
   153B F1            [10] 4219 	pop	af
   153C F1            [10] 4220 	pop	af
   153D C1            [10] 4221 	pop	bc
   153E FD 21r3Er00   [14] 4222 	ld	iy, #_col
   1542 FD 7E 01      [19] 4223 	ld	a, 1 (iy)
   1545 FD B6 00      [19] 4224 	or	a, 0 (iy)
   1548 C2r62r14      [10] 4225 	jp	NZ, 00163$
   154B 2Ar30r00      [16] 4226 	ld	hl, (_n)
   154E 09            [11] 4227 	add	hl, bc
   154F 36 06         [10] 4228 	ld	(hl), #0x06
   1551 21 06 00      [10] 4229 	ld	hl, #0x0006
   1554 E5            [11] 4230 	push	hl
   1555 2E 0F         [ 7] 4231 	ld	l, #0x0f
   1557 E5            [11] 4232 	push	hl
   1558 21 06 00      [10] 4233 	ld	hl, #6
   155B 39            [11] 4234 	add	hl, sp
   155C 4E            [ 7] 4235 	ld	c, (hl)
   155D 23            [ 6] 4236 	inc	hl
   155E 46            [ 7] 4237 	ld	b, (hl)
   155F C5            [11] 4238 	push	bc
   1560 CDrB6r03      [17] 4239 	call	__8BP_setupsp_3
   1563 F1            [10] 4240 	pop	af
   1564 F1            [10] 4241 	pop	af
   1565 F1            [10] 4242 	pop	af
                           4243 ;ciclo.c:364: goto label_1740;
                           4244 ;ciclo.c:368: }
   1566 C9            [10] 4245 	ret
                           4246 ;ciclo.c:369: int logica_fantasma_precomputed(int id){
                           4247 ;	---------------------------------
                           4248 ; Function logica_fantasma_precomputed
                           4249 ; ---------------------------------
   1567                    4250 _logica_fantasma_precomputed::
                           4251 ;ciclo.c:371: if (op<8) {op=_basic_peek(40000+co);}
   1567 3Ar7Ar00      [13] 4252 	ld	a,(#_op + 0)
   156A D6 08         [ 7] 4253 	sub	a, #0x08
   156C 30 12         [12] 4254 	jr	NC,00102$
   156E 2Ar7Dr00      [16] 4255 	ld	hl, (_co)
   1571 01 40 9C      [10] 4256 	ld	bc, #0x9c40
   1574 09            [11] 4257 	add	hl, bc
   1575 E5            [11] 4258 	push	hl
   1576 CDr21r08      [17] 4259 	call	__basic_peek
   1579 F1            [10] 4260 	pop	af
   157A 7D            [ 4] 4261 	ld	a, l
   157B 32r7Ar00      [13] 4262 	ld	(_op+0), a
   157E 18 0D         [12] 4263 	jr	00103$
   1580                    4264 00102$:
                           4265 ;ciclo.c:372: else {op=op-1; return 0;}
   1580 3Ar7Ar00      [13] 4266 	ld	a,(#_op + 0)
   1583 21r7Ar00      [10] 4267 	ld	hl, #_op
   1586 C6 FF         [ 7] 4268 	add	a, #0xff
   1588 77            [ 7] 4269 	ld	(hl), a
   1589 21 00 00      [10] 4270 	ld	hl, #0x0000
   158C C9            [10] 4271 	ret
   158D                    4272 00103$:
                           4273 ;ciclo.c:373: co=co+1;if (co==2000) return -1;
   158D 2Ar7Dr00      [16] 4274 	ld	hl, (_co)
   1590 23            [ 6] 4275 	inc	hl
   1591 22r7Dr00      [16] 4276 	ld	(_co), hl
   1594 FD 21r7Dr00   [14] 4277 	ld	iy, #_co
   1598 FD 7E 00      [19] 4278 	ld	a, 0 (iy)
   159B D6 D0         [ 7] 4279 	sub	a, #0xd0
   159D 20 0B         [12] 4280 	jr	NZ,00105$
   159F FD 7E 01      [19] 4281 	ld	a, 1 (iy)
   15A2 D6 07         [ 7] 4282 	sub	a, #0x07
   15A4 20 04         [12] 4283 	jr	NZ,00105$
   15A6 21 FF FF      [10] 4284 	ld	hl, #0xffff
   15A9 C9            [10] 4285 	ret
   15AA                    4286 00105$:
                           4287 ;ciclo.c:374: if (op>=7) return 0;
   15AA 3Ar7Ar00      [13] 4288 	ld	a,(#_op + 0)
   15AD D6 07         [ 7] 4289 	sub	a, #0x07
   15AF 38 04         [12] 4290 	jr	C,00107$
   15B1 21 00 00      [10] 4291 	ld	hl, #0x0000
   15B4 C9            [10] 4292 	ret
   15B5                    4293 00107$:
                           4294 ;ciclo.c:375: if (op>3)  {
   15B5 3E 03         [ 7] 4295 	ld	a, #0x03
   15B7 FD 21r7Ar00   [14] 4296 	ld	iy, #_op
   15BB FD 96 00      [19] 4297 	sub	a, 0 (iy)
   15BE 30 60         [12] 4298 	jr	NC,00115$
                           4299 ;ciclo.c:376: if (op==4) {_8BP_mover_3(id,0,80);return 0;}
   15C0 FD 7E 00      [19] 4300 	ld	a, 0 (iy)
   15C3 D6 04         [ 7] 4301 	sub	a, #0x04
   15C5 20 19         [12] 4302 	jr	NZ,00109$
   15C7 21 50 00      [10] 4303 	ld	hl, #0x0050
   15CA E5            [11] 4304 	push	hl
   15CB 2E 00         [ 7] 4305 	ld	l, #0x00
   15CD E5            [11] 4306 	push	hl
   15CE 21 06 00      [10] 4307 	ld	hl, #6
   15D1 39            [11] 4308 	add	hl, sp
   15D2 4E            [ 7] 4309 	ld	c, (hl)
   15D3 23            [ 6] 4310 	inc	hl
   15D4 46            [ 7] 4311 	ld	b, (hl)
   15D5 C5            [11] 4312 	push	bc
   15D6 CDrF2r04      [17] 4313 	call	__8BP_mover_3
   15D9 F1            [10] 4314 	pop	af
   15DA F1            [10] 4315 	pop	af
   15DB F1            [10] 4316 	pop	af
   15DC 21 00 00      [10] 4317 	ld	hl, #0x0000
   15DF C9            [10] 4318 	ret
   15E0                    4319 00109$:
                           4320 ;ciclo.c:377: if (op==5) {_8BP_setupsp_3(id,15,5);return 0;}
   15E0 3Ar7Ar00      [13] 4321 	ld	a,(#_op + 0)
   15E3 D6 05         [ 7] 4322 	sub	a, #0x05
   15E5 20 19         [12] 4323 	jr	NZ,00111$
   15E7 21 05 00      [10] 4324 	ld	hl, #0x0005
   15EA E5            [11] 4325 	push	hl
   15EB 2E 0F         [ 7] 4326 	ld	l, #0x0f
   15ED E5            [11] 4327 	push	hl
   15EE 21 06 00      [10] 4328 	ld	hl, #6
   15F1 39            [11] 4329 	add	hl, sp
   15F2 4E            [ 7] 4330 	ld	c, (hl)
   15F3 23            [ 6] 4331 	inc	hl
   15F4 46            [ 7] 4332 	ld	b, (hl)
   15F5 C5            [11] 4333 	push	bc
   15F6 CDrB6r03      [17] 4334 	call	__8BP_setupsp_3
   15F9 F1            [10] 4335 	pop	af
   15FA F1            [10] 4336 	pop	af
   15FB F1            [10] 4337 	pop	af
   15FC 21 00 00      [10] 4338 	ld	hl, #0x0000
   15FF C9            [10] 4339 	ret
   1600                    4340 00111$:
                           4341 ;ciclo.c:378: if (op==6) {_8BP_setupsp_3(id,15,6);return 0;}
   1600 3Ar7Ar00      [13] 4342 	ld	a,(#_op + 0)
   1603 D6 06         [ 7] 4343 	sub	a, #0x06
   1605 20 19         [12] 4344 	jr	NZ,00115$
   1607 21 06 00      [10] 4345 	ld	hl, #0x0006
   160A E5            [11] 4346 	push	hl
   160B 2E 0F         [ 7] 4347 	ld	l, #0x0f
   160D E5            [11] 4348 	push	hl
   160E 21 06 00      [10] 4349 	ld	hl, #6
   1611 39            [11] 4350 	add	hl, sp
   1612 4E            [ 7] 4351 	ld	c, (hl)
   1613 23            [ 6] 4352 	inc	hl
   1614 46            [ 7] 4353 	ld	b, (hl)
   1615 C5            [11] 4354 	push	bc
   1616 CDrB6r03      [17] 4355 	call	__8BP_setupsp_3
   1619 F1            [10] 4356 	pop	af
   161A F1            [10] 4357 	pop	af
   161B F1            [10] 4358 	pop	af
   161C 21 00 00      [10] 4359 	ld	hl, #0x0000
   161F C9            [10] 4360 	ret
   1620                    4361 00115$:
                           4362 ;ciclo.c:380: if (op==1) {_8BP_setupsp_3(id,15,7);return 0;}
   1620 3Ar7Ar00      [13] 4363 	ld	a,(#_op + 0)
   1623 3D            [ 4] 4364 	dec	a
   1624 20 19         [12] 4365 	jr	NZ,00117$
   1626 21 07 00      [10] 4366 	ld	hl, #0x0007
   1629 E5            [11] 4367 	push	hl
   162A 2E 0F         [ 7] 4368 	ld	l, #0x0f
   162C E5            [11] 4369 	push	hl
   162D 21 06 00      [10] 4370 	ld	hl, #6
   1630 39            [11] 4371 	add	hl, sp
   1631 4E            [ 7] 4372 	ld	c, (hl)
   1632 23            [ 6] 4373 	inc	hl
   1633 46            [ 7] 4374 	ld	b, (hl)
   1634 C5            [11] 4375 	push	bc
   1635 CDrB6r03      [17] 4376 	call	__8BP_setupsp_3
   1638 F1            [10] 4377 	pop	af
   1639 F1            [10] 4378 	pop	af
   163A F1            [10] 4379 	pop	af
   163B 21 00 00      [10] 4380 	ld	hl, #0x0000
   163E C9            [10] 4381 	ret
   163F                    4382 00117$:
                           4383 ;ciclo.c:381: if (op==2) {_8BP_setupsp_3(id,15,8);return 0;}
   163F 3Ar7Ar00      [13] 4384 	ld	a,(#_op + 0)
   1642 D6 02         [ 7] 4385 	sub	a, #0x02
   1644 20 19         [12] 4386 	jr	NZ,00119$
   1646 21 08 00      [10] 4387 	ld	hl, #0x0008
   1649 E5            [11] 4388 	push	hl
   164A 2E 0F         [ 7] 4389 	ld	l, #0x0f
   164C E5            [11] 4390 	push	hl
   164D 21 06 00      [10] 4391 	ld	hl, #6
   1650 39            [11] 4392 	add	hl, sp
   1651 4E            [ 7] 4393 	ld	c, (hl)
   1652 23            [ 6] 4394 	inc	hl
   1653 46            [ 7] 4395 	ld	b, (hl)
   1654 C5            [11] 4396 	push	bc
   1655 CDrB6r03      [17] 4397 	call	__8BP_setupsp_3
   1658 F1            [10] 4398 	pop	af
   1659 F1            [10] 4399 	pop	af
   165A F1            [10] 4400 	pop	af
   165B 21 00 00      [10] 4401 	ld	hl, #0x0000
   165E C9            [10] 4402 	ret
   165F                    4403 00119$:
                           4404 ;ciclo.c:382: if (op==3) {_8BP_mover_3(id,0,-80);return 0;}
   165F 3Ar7Ar00      [13] 4405 	ld	a,(#_op + 0)
   1662 D6 03         [ 7] 4406 	sub	a, #0x03
   1664 20 1A         [12] 4407 	jr	NZ,00121$
   1666 21 B0 FF      [10] 4408 	ld	hl, #0xffb0
   1669 E5            [11] 4409 	push	hl
   166A 21 00 00      [10] 4410 	ld	hl, #0x0000
   166D E5            [11] 4411 	push	hl
   166E 21 06 00      [10] 4412 	ld	hl, #6
   1671 39            [11] 4413 	add	hl, sp
   1672 4E            [ 7] 4414 	ld	c, (hl)
   1673 23            [ 6] 4415 	inc	hl
   1674 46            [ 7] 4416 	ld	b, (hl)
   1675 C5            [11] 4417 	push	bc
   1676 CDrF2r04      [17] 4418 	call	__8BP_mover_3
   1679 F1            [10] 4419 	pop	af
   167A F1            [10] 4420 	pop	af
   167B F1            [10] 4421 	pop	af
   167C 21 00 00      [10] 4422 	ld	hl, #0x0000
   167F C9            [10] 4423 	ret
   1680                    4424 00121$:
                           4425 ;ciclo.c:383: return 0; //nunca llega aqui
   1680 21 00 00      [10] 4426 	ld	hl, #0x0000
                           4427 ;ciclo.c:384: }
   1683 C9            [10] 4428 	ret
                           4429 	.area _CODE
                           4430 	.area _INITIALIZER
   0000                    4431 __xinit___basic_rnd_x:
   0000 00 00              4432 	.dw #0x0000
                           4433 	.area _CABS (ABS)
